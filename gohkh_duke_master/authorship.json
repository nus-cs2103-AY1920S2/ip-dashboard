[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "test {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 38,
      "-": 17
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "## 1 What is Duke?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Duke is a personal assistant chatbot that helps to keep track of various tasks. This user guide provides detailed instructions and examples on how you can use Duke to manage your tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "## 2 How to use Duke?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Duke can keep track of various tasks for you. In order to use Duke, you have to key in specific commands that it can understand. Here are the commands you can use:  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "- [`todo`](#211-todo---adds-a-todo-task)  "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "- [`deadline`](#212-deadline---adds-a-deadline-task)  "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "- [`event`](#213-event---adds-an-event-task)  "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "- [`list`](#221-list---lists-tasks)  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "- [`find`](#222-find---finds-tasks)  "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "- [`snooze`](#231-snooze---snoozes-a-task)  "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "- [`done`](#232-done---marks-a-task-as-done)  "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "- [`delete`](#233-delete---deletes-a-task)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "### 2.1 Adding a task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "There are three types of tasks you can add:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "- Todo: a task with a description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "- Deadline: a task with a description and deadline"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "- Event: a task with a description and time"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "#### 2.1.1 `todo` - Adds a todo task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "This command adds a todo item to your list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Usage:  "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`todo [description]`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Example:  "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`todo read book`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`Got it. I\u0027ve added this task:`  "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u0026#8203;`  [T][✗] read book`  "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`There is now 1 task in the list.`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "#### 2.1.2 `deadline` - Adds a deadline task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "This command adds a deadline to your list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Usage:  "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`deadline [description] /by [date] [time]`  "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "The date has to be in yyyy-mm-dd format, and the time has to be in HH:mm format."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Providing the time is optional. If you do not indicate the time, it will be automatically set to 23:59."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Example:  "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`deadline do homework /by 2020-06-30 17:00`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`Got it. I\u0027ve added this task:`  "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u0026#8203;`  [D][✗] do homework (by: 30 Jun 2020, 17:00)`  "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`There are now 2 tasks in the list.`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "#### 2.1.3 `event` - Adds an event task"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "This command adds an event to your list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Usage:  "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`event [description] /at [time]`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Example:  "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`event project meeting /at Monday 3pm`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`Got it. I\u0027ve added this task:`  "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u0026#8203;`  [E][✗] project meeting (by: Monday 3pm)`  "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`There are now 3 tasks in the list.`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "### 2.2 Viewing tasks"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "#### 2.2.1 `list` - Lists tasks"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "This command lists all the tasks that you have added."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Usage:  "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`1. [T][✗] read book`  "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`2. [D][✗] do homework (by: 30 Jun 2020)`  "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`3. [E][✗] project meeting (by: Monday 3pm)`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "#### 2.2.2 `find` - Finds tasks"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "This command lists for all tasks whose descriptions contain the search term you specify."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Usage:  "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`find [search term]`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Example:  "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`find book`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`1. [T][✗] read book`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "### 2.3 Editing tasks"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "#### 2.3.1 `snooze` - Snoozes a task"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "This command postpones the time/deadline of a task."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`snooze [task number] [duration]`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`snooze 2 1 day`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`Noted. Here\u0027s the updated task:`  "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u0026#8203;`  [D][✗] do homework (by: 1 Jul 2020, 17:00)`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "#### 2.3.2 `done` - Marks a task as done"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "This command marks a task as completed."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Usage:  "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`done [task number]`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Example:  "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`done 3`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`Nice! I\u0027ve marked this task as done:`  "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u0026#8203;`  [E][✓] project meeting (by: Monday 3pm)`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "#### 2.3.3 `delete` - Deletes a task"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": "This command removes a task from your list of tasks."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Usage:  "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`delete [task number]`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Example:  "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`Noted. I\u0027ve removed this task:`  "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u0026#8203;`  [T][✗] read book`"
      }
    ],
    "authorContributionMap": {
      "gohkh": 141,
      "-": 11
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A controller for \u003ccode\u003eDialogBox\u003c/code\u003e, which consists of an \u003ccode\u003eImageView\u003c/code\u003e of the person\u0027s display picture"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * and a \u003ccode\u003eLabel\u003c/code\u003e containing the person\u0027s text."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private DialogBox(Image image, String text, Color color) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        displayPicture.setImage(image);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        dialog.setBackground(new Background(new BackgroundFill(color, new CornerRadii(10), null)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        setAlignment(Pos.BOTTOM_LEFT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the dialog box containing the received messages."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param text the messages received by the user"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param image the display picture of the other party"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the dialog box containing the received messages"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static DialogBox getReceivedDialog(Image image, String text, Color color) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new DialogBox(image, text, color);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the dialog box containing the sent messages."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param text the messages sent by the user"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param image the display picture of the user"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the dialog box containing the sent messages"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static DialogBox getSentDialog(Image image, String text, Color color) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        DialogBox dialogBox \u003d new DialogBox(image, text, color);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        dialogBox.flip();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return dialogBox;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Flips the dialog box such that the display picture is on the right and text on the left."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        setAlignment(Pos.BOTTOM_RIGHT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 80
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.task.CannotSnoozeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.temporal.TemporalAmount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A chatbot that keeps track of various tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The commands that Duke can understand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    enum Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        TODO(false) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String execute(Duke duke, String input) throws StorageException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                String arguments \u003d duke.parser.parseArguments(input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                String description \u003d duke.parser.parseTodoDescription(arguments);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                duke.tasks.add(todo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                duke.storage.save(duke.tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                return duke.ui.outputTask(todo, duke.tasks.size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        },"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        DEADLINE(false) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String execute(Duke duke, String input) throws InvalidCommandException, StorageException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                String arguments \u003d duke.parser.parseArguments(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                String description \u003d duke.parser.parseDeadlineDescription(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                LocalDate date \u003d duke.parser.parseDeadlineDate(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                LocalTime time \u003d duke.parser.parseDeadlineTime(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Deadline deadline \u003d new Deadline(description, LocalDateTime.of(date, time));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                duke.tasks.add(deadline);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                duke.storage.save(duke.tasks);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                return duke.ui.outputTask(deadline, duke.tasks.size());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        },"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        EVENT(false) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String execute(Duke duke, String input) throws InvalidCommandException, StorageException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                String arguments \u003d duke.parser.parseArguments(input);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                String description \u003d duke.parser.parseEventDescription(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                String time \u003d duke.parser.parseEventTime(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Event event \u003d new Event(description, time);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                duke.tasks.add(event);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                duke.storage.save(duke.tasks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                return duke.ui.outputTask(event, duke.tasks.size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        },"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        LIST(false) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String execute(Duke duke, String input) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                if (duke.tasks.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    return \"There are no tasks now.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    return duke.tasks.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        },"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        FIND(false) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String execute(Duke duke, String input) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                String arguments \u003d duke.parser.parseArguments(input);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                String searchTerm \u003d duke.parser.parseFindSearchTerm(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                TaskList matchingTasks \u003d duke.tasks.find(searchTerm);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                if (matchingTasks.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    return \"I didn\u0027t manage to find any matching tasks in your list :(\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    return \"Here are the matching tasks in your list:\\n\" + matchingTasks;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        },"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        SNOOZE(false) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String execute(Duke duke, String input) throws InvalidCommandException, TaskNumberOutOfBoundsException,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    CannotSnoozeException, StorageException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                String arguments \u003d duke.parser.parseArguments(input);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                int taskNumber \u003d duke.parser.parseSnoozeTaskNumber(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                TemporalAmount duration \u003d duke.parser.parseSnoozeDuration(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Task snoozedTask \u003d duke.tasks.snooze(taskNumber, duration);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                duke.storage.save(duke.tasks);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                return \"Noted. Here\u0027s the updated task:\\n  \" + snoozedTask;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        },"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        DONE(false) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String execute(Duke duke, String input) throws InvalidCommandException, TaskNumberOutOfBoundsException,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    StorageException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                String arguments \u003d duke.parser.parseArguments(input);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                int taskNumber \u003d duke.parser.parseDoneTaskNumber(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Task completedTask \u003d duke.tasks.complete(taskNumber);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                duke.storage.save(duke.tasks);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                return \"Nice! I\u0027ve marked this task as done:\\n  \" + completedTask;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        },"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        DELETE(false) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String execute(Duke duke, String input) throws InvalidCommandException, TaskNumberOutOfBoundsException,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    StorageException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                String arguments \u003d duke.parser.parseArguments(input);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                int taskNumber \u003d duke.parser.parseDeleteTaskNumber(arguments);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Task deletedTask \u003d duke.tasks.delete(taskNumber);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                duke.storage.save(duke.tasks);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                return \"Noted. I\u0027ve removed this task:\\n  \" + deletedTask;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        },"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        BYE(true) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String execute(Duke duke, String input) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                return duke.ui.sayBye();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        };"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private final boolean isTerminating;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private Command(boolean isTerminating) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            this.isTerminating \u003d isTerminating;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Executes the command."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * @return the output of the command"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        abstract String execute(Duke duke, String input) throws DukeException;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Returns \u003ccode\u003etrue\u003c/code\u003e if this command should terminate Duke, \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * @return \u003ccode\u003etrue\u003c/code\u003e if this command should terminate Duke, \u003ccode\u003efalse\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        boolean isTerminating() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return isTerminating;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a new instance of \u003ccode\u003eDuke\u003c/code\u003e with no database."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        storage \u003d Storage.empty();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a new instance of \u003ccode\u003eDuke\u003c/code\u003e using the file at the specified URI as the database."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param path the URI of the database"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Duke(String path) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            tasks \u003d storage.load();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            ui.outputException(e);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a new instance of \u003ccode\u003eDuke\u003c/code\u003e using \u003ccode\u003e\"./data/duke.txt\"\u003c/code\u003e as the database and runs it."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param args the command-line arguments"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        new Duke(\"./data/duke.txt\").run();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Runs Duke."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        printWelcomeMessage();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                String input \u003d getInput(sc);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Command command \u003d getCommand(input);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                String response \u003d getResponse(command, input);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                printResponse(response);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                if (command.isTerminating()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                printException(e);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String getGreeting() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ui.sayHello();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the command indicated in the user input."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param input the user input"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the command indicated in the user input"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Command getCommand(String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert input !\u003d null;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Command command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        parser.checkArguments(command, input);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the response to the user."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param command the command"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param input the user input"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the response to the user"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String getResponse(Command command, String input) throws DukeException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert command !\u003d null;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert input !\u003d null;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return command.execute(this, input);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String getExceptionMessage(DukeException e) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ui.outputException(e);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private void printWelcomeMessage() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ui.print(ui.getLogo());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ui.print(ui.format(ui.sayHello()));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private String getInput(Scanner sc) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ui.getInput(sc);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private void printResponse(String response) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ui.print(ui.format(response));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private void printException(DukeException e) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ui.print(ui.format(ui.outputException(e)));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 266,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * DukeException is the superclass of those exceptions that can be thrown during the normal operation of Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a \u003ccode\u003eDukeException\u003c/code\u003e with the specified detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param message the detail message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a \u003ccode\u003eDukeException\u003c/code\u003e with the specified detail message and cause."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param message the detail message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param cause the cause"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public DukeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 25
    }
  },
  {
    "path": "src/main/java/duke/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Thrown to indacate that a command is not valid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs an \u003ccode\u003eInvalidCommandException\u003c/code\u003e with the specified detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param message the detail message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 15
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A launcher for Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A Graphical User Interface for Duke."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Duke duke \u003d new Duke(\"./data/duke.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(this.getClass().getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            AnchorPane mainWindow \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Scene scene \u003d new Scene(mainWindow);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            stage.sizeToScene();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 34
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A controller for \u003ccode\u003eMainWindow\u003c/code\u003e, which provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Image DUKE_IMAGE \u003d new Image(MainWindow.class.getResourceAsStream(\"/images/duke.png\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Image USER_IMAGE \u003d new Image(MainWindow.class.getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Color DUKE_COLOR \u003d Color.GHOSTWHITE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Color USER_COLOR \u003d Color.ROYALBLUE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Set the \u003ccode\u003eDuke\u003c/code\u003e object to be used."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param duke the \u003ccode\u003eDuke\u003c/code\u003e object to be used"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setDuke(Duke duke) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String greeting \u003d duke.getGreeting();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getReceivedDialog(DUKE_IMAGE, greeting, DUKE_COLOR));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Reads the user input and gets Duke\u0027s response."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (input.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Duke.Command command \u003d duke.getCommand(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            response \u003d duke.getResponse(command, input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            updateScreen(input, response);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (command.isTerminating()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            response \u003d duke.getExceptionMessage(e);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            updateScreen(input, response);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Creates two dialog boxes, one cantaining the user input and the other containing Duke\u0027s response, and appends"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private void updateScreen(String input, String response) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                DialogBox.getSentDialog(USER_IMAGE, input, USER_COLOR),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                DialogBox.getReceivedDialog(DUKE_IMAGE, response, DUKE_COLOR)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 82
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.temporal.TemporalAmount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A command parser for Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int NUMBER_OF_COMMAND_SECTIONS \u003d 2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int COMMAND_POSITION \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int ARGUMENT_POSITION \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int NUMBER_OF_DEADLINE_COMMAND_ARGUMENTS \u003d 3;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int DEADLINE_DESCRIPTION_POSITION \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int DEADLINE_DATE_POSITION \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int DEADLINE_TIME_POSITION \u003d 2;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int NUMBER_OF_EVENT_COMMAND_ARGUMENTS \u003d 2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int EVENT_DESCRIPTION_POSITION \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int EVENT_TIME_POSITION \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int NUMBER_OF_SNOOZE_COMMAND_ARGUMENTS \u003d 3;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int SNOOZE_TASK_NUMBER_POSITION \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int SNOOZE_AMOUNT_POSITION \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int SNOOZE_TIME_UNIT_POSITION \u003d 2;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the type of Duke command parsed from the user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param input the user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the type of Duke command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Duke.Command parseCommand(String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert input !\u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Duke.Command command;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String[] parsedInput \u003d input.strip().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        switch (parsedInput[COMMAND_POSITION]) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Duke.Command.TODO;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Duke.Command.DEADLINE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Duke.Command.EVENT;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Duke.Command.LIST;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Duke.Command.FIND;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"snooze\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Duke.Command.SNOOZE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Duke.Command.DONE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Duke.Command.DELETE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Duke.Command.BYE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new InvalidCommandException(\"Hmm... I don\u0027t know what that means :(\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert command !\u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if the arguments in the user input can be parsed for the specified Duke command."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param command the type of Duke command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param input the user input"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the arguments in the user input can be parsed for the specified Duke command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    boolean checkArguments(Duke.Command command, String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert command !\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert input !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (!hasArguments(input)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Oops! The description is missing.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (!hasArguments(input)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Oops! The description and deadline are missing.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (!hasArguments(input)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Oops! The description and time are missing.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (hasArguments(input)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Hmm... I don\u0027t understand. Try \\\"list\\\" instead.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (!hasArguments(input)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Oops! The search term is missing.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case SNOOZE:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (!hasArguments(input)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Oops! The task number and snooze duration are missing.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (!hasArguments(input)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Oops! The task number is missing.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (!hasArguments(input)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Oops! The task number is missing.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (hasArguments(input)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Hmm... I don\u0027t understand. Try \\\"bye\\\" instead.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new InvalidCommandException(\"Oh no! There\u0027s something wrong.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if the user input contains arguments, \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param input the user input"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the user input contains arguments, \u003ccode\u003efalse\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    boolean hasArguments(String input) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return input.strip().split(\"\\\\s+\", NUMBER_OF_COMMAND_SECTIONS).length \u003d\u003d NUMBER_OF_COMMAND_SECTIONS;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns a string containing the arguments from the user input."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param input the user input"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the arguments from the user input"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String parseArguments(String input) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!hasArguments(input)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return input.strip().split(\"\\\\s+\", NUMBER_OF_COMMAND_SECTIONS)[ARGUMENT_POSITION];"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the todo description from the arguments in the user input for the todo command."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param arguments the arguments from the user input"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the todo description"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String parseTodoDescription(String arguments) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert arguments !\u003d null;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return arguments;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the deadline description from the arguments in the user input for the deadline command."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param arguments the arguments from the user input"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the deadline description"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String parseDeadlineDescription(String arguments) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert arguments !\u003d null;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return arguments.split(\"\\\\s+/by\\\\s+\", NUMBER_OF_DEADLINE_COMMAND_ARGUMENTS)[DEADLINE_DESCRIPTION_POSITION];"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the date of the deadline from the arguments in the user input for the deadline command."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param arguments the arguments from the user input"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the date of deadline"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    LocalDate parseDeadlineDate(String arguments) throws InvalidCommandException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert arguments !\u003d null;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return LocalDate.parse("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    arguments.split(\"\\\\s+/by\\\\s+\", NUMBER_OF_DEADLINE_COMMAND_ARGUMENTS)[DEADLINE_DATE_POSITION]);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new InvalidCommandException(\"Oops! The date of the deadline is missing.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new InvalidCommandException("
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    \"I don\u0027t understand the deadline. Please provide it YYYY-MM-DD (HH:mm) format.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the time of the deadline from the arguments in the user input for the deadline command."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param arguments the arguments from the user input"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the time of the deadline"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    LocalTime parseDeadlineTime(String arguments) throws InvalidCommandException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert arguments !\u003d null;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return LocalTime.parse("
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    arguments.split(\"\\\\s+/by\\\\s+\", NUMBER_OF_DEADLINE_COMMAND_ARGUMENTS)[DEADLINE_TIME_POSITION]);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return LocalTime.parse(\"23:59\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the event description from the arguments in the user input for the event command."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param arguments the arguments from the user input"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the event description"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String parseEventDescription(String arguments) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert arguments !\u003d null;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return arguments.split(\"\\\\s+/at\\\\s+\", NUMBER_OF_EVENT_COMMAND_ARGUMENTS)[EVENT_DESCRIPTION_POSITION];"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the time of the event from the arguments in the user input for the deadline command."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param arguments the arguments from the user input"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the time of the event"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String parseEventTime(String arguments) throws InvalidCommandException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert arguments !\u003d null;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return arguments.split(\"\\\\s+/at\\\\s+\", NUMBER_OF_EVENT_COMMAND_ARGUMENTS)[EVENT_TIME_POSITION];"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new InvalidCommandException(\"Oops! The time of the event is missing.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the search term from the arguments in the user input for the find command."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param arguments the arguments from the user input"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the search term"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String parseFindSearchTerm(String arguments) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert arguments !\u003d null;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return arguments;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the task number from the arguments in the user input for the snooze command."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param arguments the arguments from the user input"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the task number"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    int parseSnoozeTaskNumber(String arguments) throws InvalidCommandException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert arguments !\u003d null;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Integer.parseInt("
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    arguments.split(\"\\\\s+\", NUMBER_OF_SNOOZE_COMMAND_ARGUMENTS)[SNOOZE_TASK_NUMBER_POSITION]);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new InvalidCommandException(\"Hmm... I don\u0027t know which task you mean :(\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the snooze duration from the arguments in the user input for the snooze command."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param arguments the arguments from the user input"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the snooze duration"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    TemporalAmount parseSnoozeDuration(String arguments) throws InvalidCommandException {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert arguments !\u003d null;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            long amount \u003d Long.parseLong("
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    arguments.split(\"\\\\s+\", NUMBER_OF_SNOOZE_COMMAND_ARGUMENTS)[SNOOZE_AMOUNT_POSITION]);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String timeUnit \u003d arguments.split(\"\\\\s+\", NUMBER_OF_SNOOZE_COMMAND_ARGUMENTS)[SNOOZE_TIME_UNIT_POSITION];"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            ChronoUnit chronoUnit;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (timeUnit.matches(\"(min)(ute)?s?\")) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                chronoUnit \u003d ChronoUnit.MINUTES;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            } else if (timeUnit.matches(\"h((our)|r)?s?\")) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                chronoUnit \u003d ChronoUnit.HOURS;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            } else if (timeUnit.matches(\"d(ay)?s?\")) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                chronoUnit \u003d ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Hmm... I\u0027m not sure how long you want to snooze the task for.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Duration.of(amount, chronoUnit);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new InvalidCommandException(\"Hmm... I\u0027m not sure how long you want to snooze the task for.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the task number from the arguments in the user input for the done command."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param arguments the arguments from the user input"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the task number"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    int parseDoneTaskNumber(String arguments) throws InvalidCommandException {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert arguments !\u003d null;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Integer.parseInt(arguments);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new InvalidCommandException(\"Hmm... I don\u0027t know which task you mean :(\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the task number from the arguments in the user input for the delete command."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param arguments the arguments from the user input"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the task number"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    int parseDeleteTaskNumber(String arguments) throws InvalidCommandException {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert arguments !\u003d null;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Integer.parseInt(arguments);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new InvalidCommandException(\"Hmm... I don\u0027t know which task you mean :(\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 326
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * This class handles the storage and retrieval of tasks in a database on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int TASK_TYPE_POSITION \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int COMPLETION_STATUS_POSITION \u003d 4;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int INFO_START_POSITION \u003d 7;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int DESCRIPTION_POSITION \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int DATETIME_POSITION \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int TIME_POSITION \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path file;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a new \u003ccode\u003eStorage\u003c/code\u003e object using the file at the specified URI as the database."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param path the URI of the database"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Storage(String path) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert path !\u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        file \u003d Paths.get(path);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns an empty \u003ccode\u003eStorage\u003c/code\u003e object with no database."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    static Storage empty() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new EmptyStorage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns a \u003ccode\u003eTaskList\u003c/code\u003e containing the tasks in the database (if any)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the task list containing tasks in the database"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    TaskList load() throws StorageException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new TaskList(Files.readAllLines(file)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .flatMap(x -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            Task task;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            char taskType \u003d x.charAt(TASK_TYPE_POSITION);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            boolean isDone \u003d (x.charAt(COMPLETION_STATUS_POSITION) \u003d\u003d \u0027✓\u0027);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            x \u003d x.substring(INFO_START_POSITION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            String[] info;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            switch (taskType) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            case \u0027T\u0027:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                task \u003d new Todo(x);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            case \u0027D\u0027:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                info \u003d x.substring(0, x.length() - 1).split(\" \\\\(by: \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                task \u003d new Deadline(info[DESCRIPTION_POSITION],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                        LocalDateTime.parse(info[DATETIME_POSITION],"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                            DateTimeFormatter.ofPattern(\"d MMM yyyy, HH:mm\")));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            case \u0027E\u0027:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                info \u003d x.substring(0, x.length() - 1).split(\" \\\\(at: \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                task \u003d new Event(info[DESCRIPTION_POSITION], info[TIME_POSITION]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                return Stream.empty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            if (isDone) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                task \u003d task.complete();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            return Stream.of(task);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                        } catch (StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            return Stream.empty();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    })"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new StorageException(\"Unable to load tasks from \" + file, e);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Stores the tasks in the specified task list into the database."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param tasks the task list"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void save(TaskList tasks) throws StorageException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Files.createDirectories(file.getParent());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Files.write(file, tasks.asList().stream().map(Task::toString).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            assert Files.exists(file);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new StorageException(\"Unable to save tasks to \" + file, e);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * This represents a \u003ccode\u003eStorage\u003c/code\u003e object with no database."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static class EmptyStorage extends Storage {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        EmptyStorage() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            super(\"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        TaskList load() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        void save(TaskList tasks) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 126
    }
  },
  {
    "path": "src/main/java/duke/StorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Thrown when data cannot be read from or written to storage."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class StorageException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a \u003ccode\u003eStorageException\u003c/code\u003e with the specified detail message and cause."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param message the detail message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param cause the cause"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    StorageException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 16
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.task.CannotSnoozeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.task.Snoozable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.temporal.TemporalAmount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * An ordered list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs an empty task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    TaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a task list containing the tasks in the specified list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param tasks the list of tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Appends the specified task to the end of this task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param task the task to be added to the task list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the task list with the specified task appended"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    TaskList add(Task task) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert !tasks.isEmpty();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Snoozes the task with the specified task number by the specified duration."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param taskNumber the task number of the task to be snoozed"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param duration the duration to snooze the task for"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the snoozed task"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Task snooze(int taskNumber, TemporalAmount duration) throws TaskNumberOutOfBoundsException, CannotSnoozeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            int taskIndex \u003d taskNumber - 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Task snoozedTask \u003d (Task) ((Snoozable) tasks.get(taskIndex)).snooze(duration);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            tasks.set(taskIndex, snoozedTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return snoozedTask;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new TaskNumberOutOfBoundsException(taskNumber);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (ClassCastException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new CannotSnoozeException(\"Oops! This task cannot be snoozed.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Marks the task with the specified task number as completed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param taskNumber the task number of the task to be completed"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the completed task"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Task complete(int taskNumber) throws TaskNumberOutOfBoundsException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            int taskIndex \u003d taskNumber - 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Task completedTask \u003d tasks.get(taskIndex).complete();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            tasks.set(taskIndex, completedTask);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            assert tasks.get(taskIndex).isCompleted();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return completedTask;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new TaskNumberOutOfBoundsException(taskNumber);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes the task with the specified task number from this task list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param taskNumber the task number of the task to be deleted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the task that was removed from the task list"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Task delete(int taskNumber) throws TaskNumberOutOfBoundsException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            int taskIndex \u003d taskNumber - 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Task deletedTask \u003d tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return deletedTask;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new TaskNumberOutOfBoundsException(taskNumber);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns a task list with the tasks whose descriptions contain the specified search term."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param searchTerm the search term"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return a task list containing tasks that match the search term"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    TaskList find(String searchTerm) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        TaskList matchingTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (task.getDescription().contains(searchTerm)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                matchingTasks.add(task);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return matchingTasks;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the number of tasks in this task list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the number of tasks in this task list"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    int size() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if this task list contains no tasks, \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if this task list contains no tasks, \u003ccode\u003efalse\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    boolean isEmpty() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /* Returns a list containing the tasks in the task list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return a list containing the tasks in the task list"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    List\u003cTask\u003e asList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns a string representation of the task list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return a string representation of this task list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        StringBuilder list \u003d new StringBuilder();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (i \u003e 0) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                list.append(\"\\n\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            list.append((i + 1) + \". \" + tasks.get(i));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return list.toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 157
    }
  },
  {
    "path": "src/main/java/duke/TaskNumberOutOfBoundsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Thrown when a task number is out of range."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class TaskNumberOutOfBoundsException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a \u003ccode\u003eTaskNumberOutOfBoundsException\u003c/code\u003e with the specified task number that is out of range."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param taskNumber the task number that is out of range"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    TaskNumberOutOfBoundsException(int taskNumber) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(\"Oops! \" + taskNumber + \" doesn\u0027t correspond to any task.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 15
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * This class handles the command-line interface of Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int HORIZONTAL_LINE_LENGTH \u003d 76;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns a string representation of the Duke logo."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the Duke logo"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String getLogo() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return logo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns a welcome greeting."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return a welcome greeting"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String sayHello() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return \"Hello, I\u0027m Duke!\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns a farewell greeting."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return a farewell greeting"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String sayBye() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return \"Goodbye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns user input from the specified \u003ccode\u003eScanner\u003c/code\u003e."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param sc the scanner"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String getInput(Scanner sc) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String outputTask(Task task, int numberOfTasks) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String status;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (numberOfTasks \u003d\u003d 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            status \u003d \"There is now 1 task in the list.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            status \u003d \"There are now \" + numberOfTasks + \" tasks in the list.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return String.format(\"Got it. I\u0027ve added this task:\\n  %s\\n%s\", task, status);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns the detail message string of the exception."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param e the exception"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the detail message of the exception"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String outputException(DukeException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return e.getMessage();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Formats the message."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param message the message to be formatted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the formatted message"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String format(String message) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String horizontalLine \u003d new String(new char[HORIZONTAL_LINE_LENGTH]).replace(\"\\0\", \"-\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        message \u003d horizontalLine + \"\\n\" + message + \"\\n\" + horizontalLine;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return message.lines()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            .map(x -\u003e \"    \" + x + \"\\n\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            .reduce(\"\", (x, y) -\u003e x + y);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Prints the message to standard output."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param message the message to be printed"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void print(String message) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 91
    }
  },
  {
    "path": "src/main/java/duke/task/CannotSnoozeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Thrown when an attempt to snooze a task is unsuccesful."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class CannotSnoozeException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a \u003ccode\u003eCannotSnoozeException\u003c/code\u003e with the specified detail message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param message the detail message"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public CannotSnoozeException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 17
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.temporal.TemporalAmount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Deadline is a subclass of Task. It represents a task with a description and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * completion status, as well as a due date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class Deadline extends Task implements Snoozable\u003cDeadline\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    protected final LocalDateTime deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a Deadline object with the specified description and due"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * date, marked as incomplete."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param description the description of the deadline"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param deadline the due date of the deadline"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Deadline(String description, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(description, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a Deadline object with the specified description, due date,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * and completion status."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param description the description of the deadline"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param deadline the due date of the deadline"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param isCompleted the completion status of the deadline"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Deadline(String description, LocalDateTime deadline, boolean isCompleted) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Deadline complete() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new Deadline(description, deadline, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Deadline snooze(TemporalAmount duration) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new Deadline(description, deadline.plus(duration), isCompleted);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                super.toString(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                deadline.format(DateTimeFormatter.ofPattern(\"d MMM yyyy, HH:mm\")));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 55
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Event is a subclass of Task. It represents a task with a description and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * completion status, as well as the time of the event."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    protected final String time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs an Event object with the specified description and time,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * marked as incomplete."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param description the description of the event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param time the time of the event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Event(String description, String time) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(description, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs an Event object with the specified description, time, and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * completion status."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param description the description of the event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param time the time of the event"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param isCompleted the completion status of the event"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Event(String description, String time, boolean isCompleted) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Event complete() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new Event(description, time, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.toString(), time);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 44
    }
  },
  {
    "path": "src/main/java/duke/task/Snoozable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.temporal.TemporalAmount;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Snoozable is an interface for tasks that can be snoozed or postponed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public interface Snoozable\u003cT extends Task\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Snoozes the task by the specified duration."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param duration the duration to snooze the task for"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    T snooze(TemporalAmount duration);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 15
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Task is the abstract base class for all types of tasks. It encapsulates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * information about the task, namely, a description of the task, and the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * completion status of the task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    protected final boolean isCompleted;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sets up a task with a description and completion status."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param isCompleted the completion status of the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    protected Task(String description, boolean isCompleted) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert description !\u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the description of task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e if the task is completed, \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the completion status of task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return isCompleted;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Marks a task as completed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the completed task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public abstract Task complete();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return String.format(\"[%s] %s\", isCompleted ? \"✓\" : \"✘\", description);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 53
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Todo is a subclass of Task. It represents a basic task with a description and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * completion status."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a Todo object with the specified description, marked as"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * incomplete."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param description the description of the todo"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(description, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a Todo object with the specified description and completion"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * status."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param description the description of the todo"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param isCompleted the completion status of the todo"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Todo(String description, boolean isCompleted) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Todo complete() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new Todo(description, true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 38
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003cfx:root type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitWidth\u003d\"40.0\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" lineSpacing\u003d\"5.0\" minHeight\u003d\"-Infinity\" maxWidth\u003d\"240.0\" style\u003d\"-fx-border-radius: 10,10,10,10; -fx-border-color: black;\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "      \u003c/font\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        \u003cInsets bottom\u003d\"8.0\" left\u003d\"8.0\" right\u003d\"8.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "      \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        \u003cInsets bottom\u003d\"8.0\" left\u003d\"8.0\" right\u003d\"8.0\" top\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "      \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    \u003cInsets bottom\u003d\"8.0\" left\u003d\"8.0\" right\u003d\"8.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "gohkh": 27
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"565.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"35.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"2.0\" AnchorPane.leftAnchor\u003d\"2.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "      \u003c/font\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    \u003c/TextField\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"325.0\" layoutY\u003d\"565.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"35.0\" prefWidth\u003d\"70.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"2.0\" AnchorPane.rightAnchor\u003d\"2.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "      \u003c/font\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    \u003c/Button\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"561.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"561.0\" prefWidth\u003d\"380.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "gohkh": 28
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void getDescription_event_returnsDescription() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"duke\", new Event(\"duke\", \"today\").getDescription());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void isCompleted_incompleteEvent_returnsFalse() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(new Event(\"duke\", \"today\", false).isCompleted());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void isCompleted_completedEvent_returnsTrue() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(new Event(\"duke\", \"today\", true).isCompleted());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void complete_incompleteEvent_completesTodo() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(new Event(\"duke\", \"today\", false).complete().isCompleted());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void complete_completedEvent_remainsComplete() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(new Event(\"duke\", \"today\", false).complete().isCompleted());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toString_event_returnsStringRepresentation() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"[E][✘] duke (at: today)\", new Event(\"duke\", \"today\").toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 39
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void getDescription_todo_returnsDescription() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"duke\", new Todo(\"duke\").getDescription());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void isCompleted_incompleteTodo_returnsFalse() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(new Todo(\"duke\", false).isCompleted());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void isCompleted_completedTodo_returnsTrue() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(new Todo(\"duke\", true).isCompleted());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void complete_incompleteTodo_completesTodo() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(new Todo(\"duke\", false).complete().isCompleted());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void complete_completedTodo_remainsComplete() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(new Todo(\"duke\", false).complete().isCompleted());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toString_todo_returnsStringRepresentation() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"[T][✘] duke\", new Todo(\"duke\").toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 39
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "hi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "todo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "deadline return book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "deadline return book /by tmr"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "deadline return book /by 2020-01-30"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "event"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "event project meeting"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "event project meeting /at Monday 2-3pm"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "delete"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "delete -1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "gohkh": 26
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "java -classpath ../bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "gohkh": 34
    }
  }
]
