[
  {
    "path": "src/main/java/duke/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "enum Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    TODO, DEADLINE, EVENT, LIST, DONE, DELETE, BYE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 5
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final LocalDate deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Deadline(String description, LocalDate deadline) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Deadline(String description, LocalDate deadline, boolean isDone) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Deadline complete() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new Deadline(description, deadline, true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                super.toString(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                deadline.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 30
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Duke() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        storage \u003d Storage.empty();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ui \u003d new Ui(new Scanner(System.in));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Duke(String filepath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ui \u003d new Ui(new Scanner(System.in));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            tasks \u003d storage.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            ui.printException(e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        new Duke(\"../data/duke.txt\").run();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                String input \u003d ui.getInput();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Command command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                String info;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                int taskNumber;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                switch (command) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                case TODO:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    info \u003d parser.parseTaskInfo(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    Todo todo \u003d createTodo(info);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    tasks.add(todo);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    ui.printTask(todo, tasks.size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                case DEADLINE:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    info \u003d parser.parseTaskInfo(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    Deadline deadline \u003d createDeadline(info);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    tasks.add(deadline);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    ui.printTask(deadline, tasks.size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                case EVENT:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    info \u003d parser.parseTaskInfo(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    Event event \u003d createEvent(info);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    tasks.add(event);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    ui.printTask(event, tasks.size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                case DONE:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    taskNumber \u003d parser.parseTaskNumber(input);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    Task completedTask \u003d tasks.complete(taskNumber);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    ui.print(\"Nice! I\u0027ve marked this task as done:\\n  \" + completedTask);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                case DELETE:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    taskNumber \u003d parser.parseTaskNumber(input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    Task deletedTask \u003d tasks.delete(taskNumber);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    ui.print(\"Noted. I\u0027ve removed this task:\\n  \" + deletedTask);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                case LIST:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    ui.print(tasks.list());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                case BYE:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    ui.exit();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    throw new DukeException(\"Hmm... I\u0027m not sure what\u0027s happening.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                storage.save(tasks);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                ui.printException(e);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Todo createTodo(String description) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new Todo(description);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Deadline createDeadline(String info) throws InvalidCommandException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String description \u003d parser.parseDeadlineDescription(info);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        LocalDate date \u003d parser.parseDeadlineDate(info);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new Deadline(description, date);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Event createEvent(String info) throws InvalidCommandException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String description \u003d parser.parseEventDescription(info);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String time \u003d parser.parseEventTime(info);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new Event(description, time);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 100,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    DukeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 11
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Event(String description, String time) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Event(String description, String time, boolean isDone) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Event complete() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new Event(description, time, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.toString(), time);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 25
    }
  },
  {
    "path": "src/main/java/duke/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 7
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Command parseCommand(String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String[] parsedInput \u003d input.strip().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        switch (parsedInput[0]) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (parsedInput.length \u003c 2) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Oops! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Command.TODO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (parsedInput.length \u003c 2) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Oops! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Command.DEADLINE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (parsedInput.length \u003c 2) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Oops! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Command.EVENT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (parsedInput.length \u003c 2) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Oh no! The task number is missing.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Command.DONE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (parsedInput.length \u003c 2) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Oh no! The task number is missing.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Command.DELETE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (parsedInput.length \u003e 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Hmm... I don\u0027t understand. Try \\\"list\\\" instead.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Command.LIST;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (parsedInput.length \u003e 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Hmm... I don\u0027t understand. Try \\\"bye\\\" instead.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Command.BYE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new InvalidCommandException(\"Hmm... I don\u0027t know what that means :(\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String parseTaskInfo(String input) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return input.strip().split(\"\\\\s+\", 2)[1];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String parseDeadlineDescription(String info) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return info.split(\"\\\\s*/by\\\\s*\", 2)[0];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    LocalDate parseDeadlineDate(String info) throws InvalidCommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return LocalDate.parse(info.split(\"\\\\s*/by\\\\s*\", 2)[1]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new InvalidCommandException(\"Oh no! The deadline of the task is missing.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new InvalidCommandException(\"I don\u0027t understand the deadline. Please provide it yyyy-mm-dd format.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String parseEventDescription(String info) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return info.split(\"\\\\s*/at\\\\s*\", 2)[0];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String parseEventTime(String info) throws InvalidCommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return info.split(\"\\\\s*/at\\\\s*\", 2)[1];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new InvalidCommandException(\"Oh no! The time of the event is missing.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    int parseTaskNumber(String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String[] parsedInput \u003d input.strip().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(parsedInput[1]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return taskNumber;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new InvalidCommandException(\"Hmm... I don\u0027t know which task you mean :(\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 98
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path file;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Storage(String filepath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        file \u003d Paths.get(filepath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    static Storage empty() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new EmptyStorage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    TaskList load() throws StorageException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new TaskList(Files.readAllLines(file)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .flatMap(x -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                Task task;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                char taskType \u003d x.charAt(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                boolean isDone \u003d (x.charAt(4) \u003d\u003d \u0027\\u2713\u0027);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                x \u003d x.substring(7);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                String[] info;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                switch(taskType) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                case \u0027T\u0027:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                    task \u003d new Todo(x);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                case \u0027D\u0027:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                    x \u003d x.substring(0, x.length() - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                    info \u003d x.split(\" \\\\(by: \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                    task \u003d new Deadline(info[0],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                            LocalDate.parse(info[1], DateTimeFormatter.ofPattern(\"d MMM yyyy\")));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                case \u0027E\u0027:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                    x \u003d x.substring(0, x.length() - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                    info \u003d x.split(\" \\\\(at: \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                    task \u003d new Event(info[0], info[1]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                    return Stream.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                if (isDone) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                    task \u003d task.complete();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                return Stream.of(task);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            } catch (StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                return Stream.empty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                        })"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new StorageException(\"Unable to load tasks from \" + file, e);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void save(TaskList tasks) throws StorageException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Files.createDirectories(file.getParent());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Files.write(file, tasks.asList().stream().map(Task::toString).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new StorageException(\"Unable to save tasks to \" + file, e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static class EmptyStorage extends Storage {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        EmptyStorage() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            super(\"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        TaskList load() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        void save(TaskList tasks) {}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 90
    }
  },
  {
    "path": "src/main/java/duke/StorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class StorageException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    StorageException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 7
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    protected Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public abstract Task complete();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return String.format(\"[%s] %s\", isDone ? \"\\u2713\" : \"\\u2718\", description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 23
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    TaskList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    TaskList add(Task task) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Task complete(int taskNumber) throws TaskNumberOutOfBoundsException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            int taskIndex \u003d taskNumber - 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Task completedTask \u003d tasks.get(taskIndex).complete();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            tasks.set(taskIndex, completedTask);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return completedTask;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new TaskNumberOutOfBoundsException(taskNumber);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Task delete(int taskNumber) throws TaskNumberOutOfBoundsException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            int taskIndex \u003d taskNumber - 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Task deletedTask \u003d tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return deletedTask;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new TaskNumberOutOfBoundsException(taskNumber);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String list() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return \"There are no tasks now.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            StringBuilder list \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                if (i \u003e 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    list.append(\"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                list.append((i + 1) + \". \" + tasks.get(i));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return list.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    int size() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    List\u003cTask\u003e asList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 65
    }
  },
  {
    "path": "src/main/java/duke/TaskNumberOutOfBoundsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class TaskNumberOutOfBoundsException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    TaskNumberOutOfBoundsException(int taskNumber) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(\"Oops! \" + taskNumber + \" doesn\u0027t correspond to any task.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 7
    }
  },
  {
    "path": "src/main/java/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Todo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Todo complete() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new Todo(description, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 21
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Scanner sc;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Ui(Scanner sc) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.sc \u003d sc;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String getInput() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void greet() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        print(\"Hello, I\u0027m Duke!\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void exit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        print(\"Goodbye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void print(String message) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        System.out.println(style(message));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void printTask(Task task, int numberOfTasks) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String status;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (numberOfTasks \u003d\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            status \u003d \"There is now 1 task in the list.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            status \u003d \"There are now \" + numberOfTasks + \" tasks in the list.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        print(String.format(\"Got it. I\u0027ve added this task:\\n  %s\\n%s\", task, status));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void printException(Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        print(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private String style(String message) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String horizontalLine \u003d new String(new char[76]).replace(\"\\0\", \"-\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        message \u003d horizontalLine + \"\\n\" + message + \"\\n\" + horizontalLine;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return message.lines()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            .map(x -\u003e \"    \" + x + \"\\n\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            .reduce(\"\", (x, y) -\u003e x + y);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 55
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "hi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "todo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "deadline return book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "deadline return book /by tmr"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "deadline return book /by 2020-01-30"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "event"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "event project meeting"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "event project meeting /at Monday 2-3pm"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "delete"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "delete -1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "gohkh": 26
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "java -classpath ../bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "gohkh": 34
    }
  }
]
