[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "test {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 33,
      "-": 17
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Duke is a personal assistant chatbot that helps to keep track of various tasks. This user guide provides detailed instructions and examples on how you can use Duke to manage your tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "### Feature 1 "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Description of feature."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "### `Keyword` - Describe action"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Describe action and its outcome."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "`keyword (optional arguments)`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "`outcome`"
      }
    ],
    "authorContributionMap": {
      "gohkh": 4,
      "-": 20
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int DIALOG_POSITION \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private DialogBox(String text, Image image) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        dialog.setAlignment(Pos.BOTTOM_RIGHT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        displayPicture.setImage(image);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        setAlignment(Pos.BOTTOM_RIGHT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image image) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new DialogBox(text, image);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image image) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, image);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        dialog.setAlignment(Pos.BOTTOM_LEFT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        tmp.set(DIALOG_POSITION, dialog);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        setAlignment(Pos.BOTTOM_LEFT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 67
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    enum Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        TODO {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String execute(Duke duke, String input) throws StorageException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                String info \u003d duke.parser.parseTaskInfo(input);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Todo todo \u003d new Todo(info);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                duke.tasks.add(todo);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                duke.storage.save(duke.tasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                return duke.ui.outputTask(todo, duke.tasks.size());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        },"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        DEADLINE {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String execute(Duke duke, String input) throws InvalidCommandException, StorageException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                String info \u003d duke.parser.parseTaskInfo(input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                String description \u003d duke.parser.parseDeadlineDescription(info);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                LocalDate date \u003d duke.parser.parseDeadlineDate(info);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Deadline deadline \u003d new Deadline(description, date);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                duke.tasks.add(deadline);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                duke.storage.save(duke.tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                return duke.ui.outputTask(deadline, duke.tasks.size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        },"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        EVENT {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String execute(Duke duke, String input) throws InvalidCommandException, StorageException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                String info \u003d duke.parser.parseTaskInfo(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                String description \u003d duke.parser.parseEventDescription(info);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                String time \u003d duke.parser.parseEventTime(info);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Event event \u003d new Event(description, time);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                duke.tasks.add(event);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                duke.storage.save(duke.tasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                return duke.ui.outputTask(event, duke.tasks.size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        },"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        LIST {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String execute(Duke duke, String input) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                if (duke.tasks.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    return \"There are no tasks now.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    return duke.tasks.list();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        },"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        FIND {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String execute(Duke duke, String input) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                String searchTerm \u003d duke.parser.parseSearchTerm(input);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                TaskList matchingTasks \u003d duke.tasks.find(searchTerm);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                if (matchingTasks.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    return \"I didn\u0027t manage to find any matching tasks in your list :(\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    return \"Here are the matching tasks in your list:\\n\" + matchingTasks.list();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        },"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        DONE {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String execute(Duke duke, String input) throws InvalidCommandException, TaskNumberOutOfBoundsException, StorageException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                int taskNumber \u003d duke.parser.parseTaskNumber(input);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Task completedTask \u003d duke.tasks.complete(taskNumber);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                duke.storage.save(duke.tasks);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                return \"Nice! I\u0027ve marked this task as done:\\n  \" + completedTask;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        },"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        DELETE {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String execute(Duke duke, String input) throws InvalidCommandException, TaskNumberOutOfBoundsException, StorageException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                int taskNumber \u003d duke.parser.parseTaskNumber(input);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Task deletedTask \u003d duke.tasks.delete(taskNumber);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                duke.storage.save(duke.tasks);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                return \"Noted. I\u0027ve removed this task:\\n  \" + deletedTask;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        },"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        BYE {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String execute(Duke duke, String input) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        };"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        abstract String execute(Duke duke, String input) throws DukeException;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert input !\u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Command command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return command.execute(this, input);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return ui.outputException(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        storage \u003d Storage.empty();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Duke(String filepath) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            tasks \u003d storage.load();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            ui.outputException(e);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        new Duke(\"./data/duke.txt\").run();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String input \u003d ui.getInput(sc);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            getResponse(input);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 151,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    DukeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 11
    }
  },
  {
    "path": "src/main/java/duke/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 7
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Duke duke \u003d new Duke(\"./data/duke.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            AnchorPane mainWindow \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Scene scene \u003d new Scene(mainWindow);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            stage.sizeToScene();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 34
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setDuke(Duke duke) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 52
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int COMMAND_POSITION \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int ARGUMENT_POSITION \u003d 1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int DESCRIPTION_POSITION \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int TIME_POSITION \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int MIN_NUMBER_OF_COMMAND_SECTIONS \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int MAX_NUMBER_OF_COMMAND_SECTIONS \u003d 2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int NUMBER_OF_DEADLINE_COMMAND_ARGUMENTS \u003d 2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int NUMBER_OF_EVENT_COMMAND_ARGUMENTS \u003d 2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Duke.Command parseCommand(String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert input !\u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Duke.Command command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String[] parsedInput \u003d input.strip().split(\"\\\\s+\", MAX_NUMBER_OF_COMMAND_SECTIONS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        switch (parsedInput[COMMAND_POSITION]) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (parsedInput.length \u003c MAX_NUMBER_OF_COMMAND_SECTIONS) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Oops! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Duke.Command.TODO;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (parsedInput.length \u003c MAX_NUMBER_OF_COMMAND_SECTIONS) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Oops! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Duke.Command.DEADLINE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (parsedInput.length \u003c MAX_NUMBER_OF_COMMAND_SECTIONS) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Oops! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Duke.Command.EVENT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (parsedInput.length \u003e MIN_NUMBER_OF_COMMAND_SECTIONS) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Hmm... I don\u0027t understand. Try \\\"list\\\" instead.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Duke.Command.LIST;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (parsedInput.length \u003c MAX_NUMBER_OF_COMMAND_SECTIONS) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Hmm... I\u0027m not sure what you\u0027re looking for.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Duke.Command.FIND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (parsedInput.length \u003c MAX_NUMBER_OF_COMMAND_SECTIONS) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Oh no! The task number is missing.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Duke.Command.DONE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (parsedInput.length \u003c MAX_NUMBER_OF_COMMAND_SECTIONS) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Oh no! The task number is missing.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Duke.Command.DELETE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (parsedInput.length \u003e MIN_NUMBER_OF_COMMAND_SECTIONS) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new InvalidCommandException(\"Hmm... I don\u0027t understand. Try \\\"bye\\\" instead.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            command \u003d Duke.Command.BYE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new InvalidCommandException(\"Hmm... I don\u0027t know what that means :(\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String parseTaskInfo(String input) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert input !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return input.strip().split(\"\\\\s+\", MAX_NUMBER_OF_COMMAND_SECTIONS)[ARGUMENT_POSITION];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String parseDeadlineDescription(String info) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert info !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return info.split(\"\\\\s*/by\\\\s*\", NUMBER_OF_DEADLINE_COMMAND_ARGUMENTS)[DESCRIPTION_POSITION];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    LocalDate parseDeadlineDate(String info) throws InvalidCommandException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert info !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return LocalDate.parse(info.split(\"\\\\s*/by\\\\s*\", NUMBER_OF_DEADLINE_COMMAND_ARGUMENTS)[TIME_POSITION]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new InvalidCommandException(\"Oh no! The deadline of the task is missing.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new InvalidCommandException(\"I don\u0027t understand the deadline. Please provide it yyyy-mm-dd format.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String parseEventDescription(String info) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert info !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return info.split(\"\\\\s*/at\\\\s*\", NUMBER_OF_EVENT_COMMAND_ARGUMENTS)[DESCRIPTION_POSITION];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String parseEventTime(String info) throws InvalidCommandException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert info !\u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return info.split(\"\\\\s*/at\\\\s*\", NUMBER_OF_EVENT_COMMAND_ARGUMENTS)[TIME_POSITION];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new InvalidCommandException(\"Oh no! The time of the event is missing.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String parseSearchTerm(String input) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert input !\u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return input.strip().split(\"\\\\s+\", MAX_NUMBER_OF_COMMAND_SECTIONS)[ARGUMENT_POSITION];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    int parseTaskNumber(String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert input !\u003d null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String[] parsedInput \u003d input.strip().split(\"\\\\s+\", MAX_NUMBER_OF_COMMAND_SECTIONS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(parsedInput[ARGUMENT_POSITION]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return taskNumber;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new InvalidCommandException(\"Hmm... I don\u0027t know which task you mean :(\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 125
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int TASK_TYPE_POSITION \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int COMPLETION_STATUS_POSITION \u003d 4;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int INFO_START_POSITION \u003d 7;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int DESCRIPTION_POSITION \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int TIME_POSITION \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path file;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Storage(String filepath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert filepath !\u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        file \u003d Paths.get(filepath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    static Storage empty() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new EmptyStorage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    TaskList load() throws StorageException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new TaskList(Files.readAllLines(file)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .flatMap(x -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                Task task;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                char taskType \u003d x.charAt(TASK_TYPE_POSITION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                boolean isDone \u003d (x.charAt(COMPLETION_STATUS_POSITION) \u003d\u003d \u0027\\u2713\u0027);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                x \u003d x.substring(INFO_START_POSITION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                String[] info;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                switch(taskType) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                case \u0027T\u0027:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                    task \u003d new Todo(x);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                case \u0027D\u0027:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                    info \u003d x.substring(0, x.length() - 1).split(\" \\\\(by: \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                    task \u003d new Deadline(info[DESCRIPTION_POSITION],"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                            LocalDate.parse(info[TIME_POSITION],"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                                DateTimeFormatter.ofPattern(\"d MMM yyyy\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                case \u0027E\u0027:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                    info \u003d x.substring(0, x.length() - 1).split(\" \\\\(at: \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                    task \u003d new Event(info[DESCRIPTION_POSITION], info[TIME_POSITION]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                    return Stream.empty();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                if (isDone) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                    task \u003d task.complete();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                return Stream.of(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            } catch (StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                return Stream.empty();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                        })"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new StorageException(\"Unable to load tasks from \" + file, e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void save(TaskList tasks) throws StorageException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Files.createDirectories(file.getParent());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Files.write(file, tasks.asList().stream().map(Task::toString).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            assert Files.exists(file);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new StorageException(\"Unable to save tasks to \" + file, e);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static class EmptyStorage extends Storage {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        EmptyStorage() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            super(\"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        TaskList load() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        void save(TaskList tasks) {}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 100
    }
  },
  {
    "path": "src/main/java/duke/StorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class StorageException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    StorageException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 7
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    TaskList() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    TaskList add(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert !tasks.isEmpty();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Task complete(int taskNumber) throws TaskNumberOutOfBoundsException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            int taskIndex \u003d taskNumber - 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Task completedTask \u003d tasks.get(taskIndex).complete();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            tasks.set(taskIndex, completedTask);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            assert tasks.get(taskIndex).isCompleted();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return completedTask;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new TaskNumberOutOfBoundsException(taskNumber);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Task delete(int taskNumber) throws TaskNumberOutOfBoundsException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            int taskIndex \u003d taskNumber - 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Task deletedTask \u003d tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return deletedTask;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new TaskNumberOutOfBoundsException(taskNumber);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String list() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        StringBuilder list \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (i \u003e 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                list.append(\"\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            list.append((i + 1) + \". \" + tasks.get(i));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return list.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    TaskList find(String searchTerm) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        TaskList matchingTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (task.getDescription().contains(searchTerm)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                matchingTasks.add(task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return matchingTasks;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    int size() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    boolean isEmpty() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    List\u003cTask\u003e asList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 79
    }
  },
  {
    "path": "src/main/java/duke/TaskNumberOutOfBoundsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class TaskNumberOutOfBoundsException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    TaskNumberOutOfBoundsException(int taskNumber) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(\"Oops! \" + taskNumber + \" doesn\u0027t correspond to any task.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 7
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int HORIZONTAL_LINE_LENGTH \u003d 76;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String getInput(Scanner sc) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String greet() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return(logo + \"\\nHello, I\u0027m Duke!\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String exit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return \"Goodbye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String outputTask(Task task, int numberOfTasks) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String status;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (numberOfTasks \u003d\u003d 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            status \u003d \"There is now 1 task in the list.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            status \u003d \"There are now \" + numberOfTasks + \" tasks in the list.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return String.format(\"Got it. I\u0027ve added this task:\\n  %s\\n%s\", task, status);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String outputException(Exception e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return e.getMessage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    String format(String message) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String horizontalLine \u003d new String(new char[HORIZONTAL_LINE_LENGTH]).replace(\"\\0\", \"-\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        message \u003d horizontalLine + \"\\n\" + message + \"\\n\" + horizontalLine;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return message.lines()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            .map(x -\u003e \"    \" + x + \"\\n\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            .reduce(\"\", (x, y) -\u003e x + y);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 48
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    protected final LocalDate deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Deadline(String description, LocalDate deadline) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(description, false);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Deadline(String description, LocalDate deadline, boolean isCompleted) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Deadline complete() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new Deadline(description, deadline, true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                super.toString(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                deadline.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 30
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    protected final String time;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Event(String description, String time) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(description, false);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Event(String description, String time, boolean isCompleted) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Event complete() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new Event(description, time, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.toString(), time);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 25
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    protected final boolean isCompleted;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    protected Task(String description, boolean isCompleted) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert description !\u003d null;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return isCompleted;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public abstract Task complete();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return String.format(\"[%s] %s\", isCompleted ? \"\\u2713\" : \"\\u2718\", description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 27
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(description, false);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Todo(String description, boolean isCompleted) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Todo complete() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new Todo(description, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 21
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003cfx:root maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "      \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "      \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "      \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "gohkh": 24
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"565.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"35.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"2.0\" AnchorPane.leftAnchor\u003d\"2.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "      \u003c/font\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    \u003c/TextField\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"325.0\" layoutY\u003d\"565.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"35.0\" prefWidth\u003d\"70.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"2.0\" AnchorPane.rightAnchor\u003d\"2.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "      \u003c/font\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    \u003c/Button\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"561.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"561.0\" prefWidth\u003d\"380.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "gohkh": 28
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void getDescription_event_returnsDescription() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"duke\", new Event(\"duke\", \"today\").getDescription());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void isCompleted_incompleteEvent_returnsFalse() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(new Event(\"duke\", \"today\", false).isCompleted());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void isCompleted_completedEvent_returnsTrue() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(new Event(\"duke\", \"today\", true).isCompleted());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void complete_incompleteEvent_completesTodo() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(new Event(\"duke\", \"today\", false).complete().isCompleted());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void complete_completedEvent_remainsComplete() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(new Event(\"duke\", \"today\", false).complete().isCompleted());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toString_event_returnsStringRepresentation() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"[E][\\u2718] duke (at: today)\", new Event(\"duke\", \"today\").toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 39
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void getDescription_todo_returnsDescription() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"duke\", new Todo(\"duke\").getDescription());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void isCompleted_incompleteTodo_returnsFalse() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(new Todo(\"duke\", false).isCompleted());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void isCompleted_completedTodo_returnsTrue() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(new Todo(\"duke\", true).isCompleted());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void complete_incompleteTodo_completesTodo() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(new Todo(\"duke\", false).complete().isCompleted());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void complete_completedTodo_remainsComplete() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(new Todo(\"duke\", false).complete().isCompleted());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toString_todo_returnsStringRepresentation() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"[T][\\u2718] duke\", new Todo(\"duke\").toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 39
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "hi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "todo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "deadline return book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "deadline return book /by tmr"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "deadline return book /by 2020-01-30"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "event"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "event project meeting"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "event project meeting /at Monday 2-3pm"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "delete"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "delete -1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "gohkh": 26
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "java -classpath ../bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "gohkh": 34
    }
  }
]
