[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "YingxuH": 42
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//package java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import parser.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.IllegalDateTimeFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.InvalidStorageFilePathException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.NoCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.StorageOperationException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.NoDescriptionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import model.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * An application capable of recording the tasks and events to help the users"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * manage the schedule."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    protected String userName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    protected Parser parser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Load the storage from file into internal task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Initiate other components."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Duke(String userName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static boolean isExitKey(String input) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Parser.isExitKey(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void start() throws"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            InvalidStorageFilePathException, IllegalDateTimeFormatException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            NoDescriptionException, StorageOperationException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        taskList \u003d storage.load();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Listen to the user input and take actions."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String getResponse(String input) throws RuntimeException{"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            command.setTaskList(taskList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            String commandResult \u003d command.execute();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            storage.save(taskList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (NoDescriptionException | NoCommandException | IllegalDateTimeFormatException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "YingxuH": 66
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            //getController returns MainWindow class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 30
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.IllegalDateTimeFormatException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.InvalidStorageFilePathException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.NoDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.StorageOperationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke_waving.svg.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            duke \u003d d;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            duke.start();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (InvalidStorageFilePathException | IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (StorageOperationException | NoDescriptionException | IllegalDateTimeFormatException err) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            dukeSpeak(err.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void dukeSpeak(String input) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                DialogBox.getDukeDialog(input, dukeImage)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void userSpeak(String input) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                DialogBox.getUserDialog(input, userImage)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * exit with status 0."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void halt(int numSeconds) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            TimeUnit.SECONDS.sleep(numSeconds);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            dukeSpeak(e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String input \u003d userInput.getText().trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        userSpeak(input);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        dukeSpeak(response);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (Duke.isExitKey(input)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            halt(1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            exit();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 94
    }
  },
  {
    "path": "src/main/java/exceptions/IllegalDateTimeFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class IllegalDateTimeFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public IllegalDateTimeFormatException(String cause) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 7
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidStorageFilePathException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class InvalidStorageFilePathException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public InvalidStorageFilePathException(String cause) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 7
    }
  },
  {
    "path": "src/main/java/exceptions/NoCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class NoCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public NoCommandException(String cause) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 7
    }
  },
  {
    "path": "src/main/java/exceptions/NoDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class NoDescriptionException extends Exception  {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public NoDescriptionException(String cause) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 7
    }
  },
  {
    "path": "src/main/java/exceptions/StorageOperationException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class StorageOperationException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public StorageOperationException(String cause) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 7
    }
  },
  {
    "path": "src/main/java/model/DeadLineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.NoDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Presents the deadline task in the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class DeadLineTask extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String TASK_TYPE_CHA \u003d \"D\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String TASK_TYPE_STRING \u003d \"deadline task\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private LocalDateTime by;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DeadLineTask() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs an {@code DeadLineTask}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param description a not empty description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param by a valid date time object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws NoDescriptionException if the description is empty."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DeadLineTask(String description, LocalDateTime by) throws NoDescriptionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(description, TASK_TYPE_STRING);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs an {@code DeadLineTask}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param description a not empty description."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param by a valid date time object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param isDone A boolean indicating whether the task is done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws NoDescriptionException if the description is empty."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DeadLineTask(String description, LocalDateTime by, boolean isDone) throws NoDescriptionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(description, TASK_TYPE_STRING, isDone);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * get and return the single-character task type. E.g. \"E\", \"T\", or \"D\"."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return TASK_TYPE_CHA single-character task type."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return TASK_TYPE_CHA;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Convert the details of the task, such as description, deadline to one arraylist."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * for encoder to encode in a string."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return ArrayList object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ArrayList\u003cString\u003e getDetails() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new ArrayList\u003cString\u003e(Arrays.asList("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                this.description,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                this.by.format(DATE_TIME_FORMAT)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isOnDate(LocalDate targetDate) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return by.toLocalDate().equals(targetDate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Convert task into a string such that the user can view the details from UI."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return String."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return \"[\" + TASK_TYPE_CHA + \"]\" + super.toString() + \" (by: \" + by.format(DATE_TIME_FORMAT) + \")\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 81
    }
  },
  {
    "path": "src/main/java/model/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.NoDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Represents an event task in the inner-task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String TASK_TYPE_CHA \u003d \"E\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String TASK_TYPE_STRING \u003d \"event task\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private LocalDateTime at;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public EventTask() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs an {@code EventTask}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param description A not empty description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param at A valid datetime object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws NoDescriptionException if the description is empty."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public EventTask(String description, LocalDateTime at) throws NoDescriptionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(description, TASK_TYPE_STRING);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs an {@code EventTask} with description, dateTime, and isDone status."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param description A not empty description."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param at A valid datetime object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param isDone A boolean indicating whether the task is done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws NoDescriptionException if the description is empty."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public EventTask(String description, LocalDateTime at, boolean isDone) throws NoDescriptionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(description, TASK_TYPE_STRING, isDone);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * get and return the single-character task type. E.g. \"E\", \"T\", or \"D\"."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return TASK_TYPE_CHA single-character task type."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ArrayList\u003cString\u003e getDetails() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new ArrayList\u003cString\u003e(Arrays.asList("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                this.description,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                this.at.format(DATE_TIME_FORMAT)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Convert the details of the task, such as description, deadline to one arraylist"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * for encoder to encode in a string."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return ArrayList object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return TASK_TYPE_CHA;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isOnDate(LocalDate targetDate) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return at.toLocalDate().equals(targetDate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Convert task into a string such that the user can view the details from UI."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return String."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return \"[\" + TASK_TYPE_CHA + \"]\"  + super.toString() + \" (at: \" + at.format(DATE_TIME_FORMAT) + \")\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 81
    }
  },
  {
    "path": "src/main/java/model/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.NoDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * An abstract class implements some common methods for task objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private String taskTypeString;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    static final DateTimeFormatter DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String DEFAULT_TASK_TYPE_STRING \u003d \"task\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final boolean DEFAULT_TASK_IS_DONE \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs a {@code Task} with the default task type string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param description A not empty description."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws NoDescriptionException If the description is empty."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Task(String description) throws NoDescriptionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this(description, DEFAULT_TASK_TYPE_STRING, DEFAULT_TASK_IS_DONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs a {@code Task} with the input task type string."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param description A not empty description."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param taskTypeString A not empty task type string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws NoDescriptionException If the description is empty."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Task(String description, String taskTypeString) throws NoDescriptionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this(description, taskTypeString, DEFAULT_TASK_IS_DONE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs a {@code Task} with the input description, task type string, and task status."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param description A not empty description."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param taskTypeString A not empty task type string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param taskIsDone A boolean object indicating whether the task is done."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws NoDescriptionException If the description is empty."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Task(String description, String taskTypeString, boolean taskIsDone) throws NoDescriptionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.taskTypeString \u003d taskTypeString;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (\"\".equals(description)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new NoDescriptionException(\"OOPS!!! The description of a \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    + this.taskTypeString"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    + \" cannot be empty.\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.isDone \u003d taskIsDone;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Set the description of the task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param description A not empty description."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws NoDescriptionException If the description is empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void setDescription(String description) throws NoDescriptionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (\"\".equals(description)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new NoDescriptionException(\"OOPS!!! The description of a \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    + taskTypeString"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    + \" cannot be empty.\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean hasKeyWord(String keyWord) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return description.toLowerCase().contains(keyWord.toLowerCase());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public abstract boolean isOnDate(LocalDate targetDate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * An abstract method returning an single-character task type."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public abstract String getTaskType();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Return the status of whether the task is done."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return tick if the task is done, cross if not done."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Get the description of the task."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return description of the task."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Return the details of the task as an array list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return an arraylist including the description."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ArrayList\u003cString\u003e getDetails() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new ArrayList\u003cString\u003e(Collections.singletonList(this.description));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Return boolean object about whether the task is done."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return boolean object."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Mark the task as done."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Convert task into a string such that the user can view the details from UI."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return String."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"]\" + \" \" + this.getDescription();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 137
    }
  },
  {
    "path": "src/main/java/model/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Implements an iterable containing a list of tasks object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class TaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    protected final List\u003cTask\u003e internalList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String ECHO_ADD_TASK \u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String ECHO_DELETE_TASK \u003d \"Noted. I have removed this task:\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String ECHO_VIEW_TASK_LIST \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String ECHO_COMPLETE_TASK \u003d \"Nice! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String ECHO_FIND_TASK \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String ECHO_VIEW_SCHEDULE \u003d \"Here are the tasks on Date:\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs a {@code Task} with multiple input tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param tasks multiple valid tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TaskList(Task... tasks) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        final List\u003cTask\u003e initials \u003d Arrays.asList(tasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        internalList.addAll(initials);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs a {@code Task} with a collection of tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param tasks a collection of tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TaskList(Collection\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        internalList.addAll(tasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Adds a task to the inner-list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param task A valid task to add."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return response of the add action."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String add(Task task) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.internalList.add(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        StringBuilder addTaskEnd \u003d new StringBuilder(\"Now you have  tasks in the list.\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String addTaskEndStr \u003d addTaskEnd.insert(13, this.internalList.size()).toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return ECHO_ADD_TASK"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + task.toString()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + addTaskEndStr;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Remove the task at the specific index from the inner-list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param position A position within the bound of the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return response of the remove action."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String remove(int position) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Task deletedTask \u003d internalList.get(position);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        internalList.remove(position);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return ECHO_DELETE_TASK"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + deletedTask.toString()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + \"Now you have \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + Integer.toString(this.internalList.size())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Mark a task at the specific index from the inner-list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param position A position within the bound of the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return response of the mark action."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String markTaskAsDone(Integer position) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Task finishedTask \u003d this.internalList.get(position);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        finishedTask.markAsDone();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return ECHO_COMPLETE_TASK"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + finishedTask.toString()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String findByKeyWord(String keyWord) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        StringBuilder matchedTasks \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        matchedTasks.append(ECHO_FIND_TASK);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        for (int i \u003d 0; i \u003c this.internalList.size(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (this.internalList.get(i) \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Task currentTask \u003d this.internalList.get(i);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (currentTask.hasKeyWord(keyWord)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                matchedTasks.append(Integer.toString(i + 1));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                matchedTasks.append(\".\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                matchedTasks.append(currentTask.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                matchedTasks.append(\"\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return matchedTasks.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String findTasksOnDate(LocalDate targetDate) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        StringBuilder tasksOnDate \u003d new StringBuilder();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        tasksOnDate.append(ECHO_VIEW_SCHEDULE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        tasksOnDate.append(\" \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        tasksOnDate.append(targetDate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        tasksOnDate.append(\":\\n\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        for (int i \u003d 0; i \u003c this.internalList.size(); i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (this.internalList.get(i) \u003d\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Task currentTask \u003d this.internalList.get(i);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (currentTask.isOnDate(targetDate)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                tasksOnDate.append(Integer.toString(i + 1));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                tasksOnDate.append(\".\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                tasksOnDate.append(currentTask.toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                tasksOnDate.append(\"\\n\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return tasksOnDate.toString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Converts the task list to a string by looping through the tasks and concatenate"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * all the string representation of tasks."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return string representation of the task list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        StringBuilder listOverView \u003d new StringBuilder(ECHO_VIEW_TASK_LIST);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        for (int i \u003d 0; i \u003c this.internalList.size(); i++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (this.internalList.get(i) \u003d\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            listOverView.append(Integer.toString(i + 1));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            listOverView.append(\".\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            listOverView.append(this.internalList.get(i).toString());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            listOverView.append(\"\\n\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return listOverView.toString();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Iterate through the task list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this.internalList.iterator();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 163
    }
  },
  {
    "path": "src/main/java/model/ToDoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.NoDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Represents an todo task in the inner-task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ToDoTask extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String TASK_TYPE_CHA \u003d \"T\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String TASK_TYPE_STRING \u003d \"todo task\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ToDoTask() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs an {@code ToDoTask}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param description A not empty description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws NoDescriptionException if the description is empty."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ToDoTask(String description) throws NoDescriptionException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(description, TASK_TYPE_STRING);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs an {@code ToDoTask} with input description and isDone status."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param description A not empty description."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param isDone A boolean indicating whether the task is done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws NoDescriptionException if the description is empty."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ToDoTask(String description, boolean isDone) throws NoDescriptionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(description, TASK_TYPE_STRING, isDone);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Convert the details of the task, such as description, deadline to one arraylist"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * for encoder to encode in a string."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return ArrayList object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return TASK_TYPE_CHA;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isOnDate(LocalDate targetDate) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Convert task into a string such that the user can view the details from UI."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return String."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return \"[\" + TASK_TYPE_CHA + \"]\"  + super.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 61
    }
  },
  {
    "path": "src/main/java/parser/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.NoDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import model.DeadLineTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import model.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Presents a command to add deadline task into inner-task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private LocalDateTime at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs an {@code AddDeadlineCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param description A valid description for a event task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    AddDeadlineCommand(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Create a deadline task with the inputted description and add it to inner-tasklist."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return response from the TaskList class as a string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws NoDescriptionException If the description is empty."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String execute() throws NoDescriptionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Task taskToAdd \u003d new DeadLineTask(description, at);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this.taskList.add(taskToAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 35
    }
  },
  {
    "path": "src/main/java/parser/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.NoDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import model.EventTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import model.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Presents a command to add event task into inner-task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private LocalDateTime at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs an {@code AddEventCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param description A valid description for a event task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    AddEventCommand(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Create a event task with the inputted description and add it to inner-tasklist."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return response from the TaskList class as a string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws NoDescriptionException If the description is empty."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String execute() throws NoDescriptionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Task taskToAdd \u003d new EventTask(description, at);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this.taskList.add(taskToAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 35
    }
  },
  {
    "path": "src/main/java/parser/AddToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.NoDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import model.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import model.ToDoTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Presents a command to add todotask into inner-task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class AddToDoCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs an {@code AddToDoCommand}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param description A valid description for a todotask."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    AddToDoCommand(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Create a todotask with the inputted description and add it to inner-tasklist."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return response from the TaskList class as a string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws NoDescriptionException If the description is empty."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String execute() throws NoDescriptionException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Task taskToAdd \u003d new ToDoTask(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this.taskList.add(taskToAdd);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 31
    }
  },
  {
    "path": "src/main/java/parser/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.NoDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import model.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Abstract class implementing part of the command object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Command(TaskList taskList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void setTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public abstract String execute() throws NoDescriptionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 25
    }
  },
  {
    "path": "src/main/java/parser/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Presents a command to delete a task from inner-task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Integer position;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs a {@code DeleteCommand}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param position A valid position within the bound of the task list indicating the task to remove."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    DeleteCommand(Integer position) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.position \u003d position;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Remove a task from the task list by calling TaskList class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return response from the TaskList class as a string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this.taskList.remove(this.position);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 25
    }
  },
  {
    "path": "src/main/java/parser/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Presents a command to terminate the program and exit from the system."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String EXIT_GREETING \u003d \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Static method to verify whether a command is an ExitCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param command Command to verify."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return boolean, True if the command is an ExitCommand, False otherwise."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static boolean isExit(Command command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return command instanceof ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return farewell response as a string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return EXIT_GREETING;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 28
    }
  },
  {
    "path": "src/main/java/parser/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class FindCommand extends Command{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private String keyWord;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    FindCommand(String keyWord) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.keyWord \u003d keyWord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this.taskList.findByKeyWord(keyWord);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 13
    }
  },
  {
    "path": "src/main/java/parser/FinishCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Presents a command to mark a task from task list as done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class FinishCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Integer position;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs a {@code FinishCommand} with a position indicating the task to mark."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param position indicating the task to mark as done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    FinishCommand(Integer position) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.position \u003d position;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Mark a task at the inputted position as done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return response from the TaskList class as a string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this.taskList.markTaskAsDone(position);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 24
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.IllegalDateTimeFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.NoCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Implements methods to parse the input command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String DATE_TIME_KEY \u003d \"(\\\\d{4}-\\\\d{2}-\\\\d{2})?\\\\s*(\\\\d{2}:\\\\d{2})?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String DEFAULT_TIME \u003d \"23:59\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String EXIT_KEY \u003d \"bye\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String VIEW_LIST_KEY \u003d \"list\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String DELETE_KEY \u003d \"(delete)\\\\s*(\\\\d+)\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String FINISH_KEY \u003d \"(done)\\\\s*(\\\\d+)\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String TODO_KEY \u003d \"(todo)(.*)\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String DEADLINE_KEY \u003d \"(deadline)\\\\s*(\\\\S*)\\\\s*/by\\\\s*\" + DATE_TIME_KEY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String EVENT_KEY \u003d \"(event)\\\\s*(\\\\S*)\\\\s*/at\\\\s*\" + DATE_TIME_KEY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String FIND_KEY \u003d \"(find)\\\\s*(\\\\S+)\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String VIEW_SCHEDULE_KEY \u003d \"(view schedule)\\\\s*\" + DATE_TIME_KEY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final int POSITION_TARGET_INDEX \u003d 2;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final int POSITION_DESCRIPTION \u003d 2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final int POSITION_KEYWORD \u003d 2;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final int POSITION_VIEW_SCHEDULE_DATE \u003d 2;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final int POSITION_DATE \u003d 3;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final int POSITION_TIME \u003d 4;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final Pattern DELETE_PATTERN \u003d Pattern.compile(DELETE_KEY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final Pattern FINISH_PATTERN \u003d Pattern.compile(FINISH_KEY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final Pattern TODO_PATTERN \u003d Pattern.compile(TODO_KEY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final Pattern DEADLINE_PATTERN \u003d Pattern.compile(DEADLINE_KEY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final Pattern EVENT_PATTERN \u003d Pattern.compile(EVENT_KEY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final Pattern FIND_PATTERN \u003d Pattern.compile(FIND_KEY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final Pattern VIEW_SCHEDULE_PATTERN \u003d Pattern.compile(VIEW_SCHEDULE_KEY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /*Handle the difference that java list start from index 0 will human readable list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "      starts from 1.*/"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final int DIFFERENCE_IN_START_INDEX \u003d 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * static method converts string to date time object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param dateString A valid string representing the date."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param timeString A valid string representing the time."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return LocalDateTime object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws IllegalDateTimeFormatException if the string is invalid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static LocalDateTime parseDateTime(String dateString, String timeString) throws"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            IllegalDateTimeFormatException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            LocalTime time \u003d LocalTime.parse(timeString \u003d\u003d null ? DEFAULT_TIME : timeString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return date.atTime(time);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (DateTimeParseException dte) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalDateTimeFormatException(dte.getMessage() + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalDateTimeFormatException(\"Oops!!! The date string is missing!\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static LocalDate parseDate(String dateString) throws"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            IllegalDateTimeFormatException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (DateTimeParseException dte) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalDateTimeFormatException(dte.getMessage() + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalDateTimeFormatException(\"Oops!!! The date string is missing!\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parse the indicated position from the input command."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param pattern Java regular expression pattern."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param input String input."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return parsed position as integer."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private int findIndex(Pattern pattern, String input) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(input);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        matcher.find();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String index \u003d matcher.group(POSITION_TARGET_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Integer.parseInt(index) - DIFFERENCE_IN_START_INDEX;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parse the description from the input command."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param pattern Java regular expression pattern."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param input String input."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return parsed description as string."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private String findDescription(Pattern pattern, String input) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(input);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        matcher.find();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return matcher.group(POSITION_DESCRIPTION).trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parse the date time from the command to LocalDateTime object."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param pattern Java regular expression pattern."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param input String user input."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return LocalDateTime object."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws IllegalDateTimeFormatException If the string in invalid format."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private LocalDateTime findDateTime(Pattern pattern, String input) throws IllegalDateTimeFormatException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(input);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        matcher.find();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String dateString \u003d matcher.group(POSITION_DATE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String timeString \u003d matcher.group(POSITION_TIME);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return parseDateTime(dateString, timeString);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private LocalDate findDate(Pattern pattern, String input) throws IllegalDateTimeFormatException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(input);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        matcher.find();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String dateString \u003d matcher.group(POSITION_VIEW_SCHEDULE_DATE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return parseDate(dateString);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private String findKeyword(Pattern pattern, String input) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(input);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        matcher.find();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return matcher.group(POSITION_KEYWORD);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static boolean isExitKey(String input) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return EXIT_KEY.equals(input);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean isViewListKey(String input) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return VIEW_LIST_KEY.equals(input);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean isDeleteKey(String input) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Matcher deleteMatcher \u003d DELETE_PATTERN.matcher(input);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return deleteMatcher.find();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean isFinishKey(String input) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Matcher finishMatcher \u003d FINISH_PATTERN.matcher(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return finishMatcher.find();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean isTodoKey(String input) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Matcher todoMatcher \u003d TODO_PATTERN.matcher(input);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return todoMatcher.find();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean isDeadLineKey(String input) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Matcher deadlineMatcher \u003d DEADLINE_PATTERN.matcher(input);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return deadlineMatcher.find();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean isEventKey(String input) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Matcher eventMatcher \u003d EVENT_PATTERN.matcher(input);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return eventMatcher.find();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean isFindKey(String input) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Matcher findMatcher \u003d FIND_PATTERN.matcher(input);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return findMatcher.find();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean isViewScheduleKey(String input) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Matcher viewScheduleMatcher \u003d VIEW_SCHEDULE_PATTERN.matcher(input);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return viewScheduleMatcher.find();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns corresponding command with the parsed parameters."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param userInput String user input."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return parsed command."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws NoCommandException If the user input can not be recognized as any command."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws IllegalDateTimeFormatException If the date time string is in invalid format."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Command parseCommand(String userInput) throws"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            NoCommandException, IllegalDateTimeFormatException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (Parser.isExitKey(userInput)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else if (Parser.isViewListKey(userInput)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new ViewListCommand();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else if (Parser.isDeleteKey(userInput)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            int deletedTaskIndex \u003d this.findIndex(DELETE_PATTERN, userInput);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new DeleteCommand(deletedTaskIndex);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else if (Parser.isFinishKey(userInput)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            int finishedTaskIndex \u003d this.findIndex(FINISH_PATTERN, userInput);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new FinishCommand(finishedTaskIndex);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else if (Parser.isTodoKey(userInput)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            String description \u003d this.findDescription(TODO_PATTERN, userInput);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new AddToDoCommand(description);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else if (Parser.isDeadLineKey(userInput)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            String description \u003d this.findDescription(DEADLINE_PATTERN, userInput);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            LocalDateTime by \u003d this.findDateTime(DEADLINE_PATTERN, userInput);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new AddDeadlineCommand(description, by);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else if (Parser.isEventKey(userInput)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            String description \u003d this.findDescription(EVENT_PATTERN, userInput);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            LocalDateTime at \u003d this.findDateTime(EVENT_PATTERN, userInput);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new AddEventCommand(description, at);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else if (Parser.isFindKey(userInput)) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            String keyWord \u003d this.findKeyword(FIND_PATTERN, userInput);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new FindCommand(keyWord);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else if (Parser.isViewScheduleKey(userInput)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            LocalDate targetDate \u003d this.findDate(VIEW_SCHEDULE_PATTERN, userInput);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new ViewScheduleCommand(targetDate);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new NoCommandException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 222
    }
  },
  {
    "path": "src/main/java/parser/ViewListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Presents a command to view all the tasks from task lists."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ViewListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ViewListCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Convert the task list to string representation."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return the string representation of the task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this.taskList.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YingxuH": 21
    }
  },
  {
    "path": "src/main/java/parser/ViewScheduleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ViewScheduleCommand extends Command{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private LocalDate targetDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    ViewScheduleCommand(LocalDate targetDate) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.targetDate \u003d targetDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this.taskList.findTasksOnDate(targetDate);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 15
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.IllegalDateTimeFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.InvalidStorageFilePathException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.NoDescriptionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.StorageOperationException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import model.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * This class interacts with text files in the local directory"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * such that the program can load data from local disk or save data to files."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final static String DEFAULT_STORAGE_PATH \u003d \"tasks.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Default constructor with the default path of local data file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws InvalidStorageFilePathException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Storage() throws InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this(DEFAULT_STORAGE_PATH);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Set the path of the data file to the customized path."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Throws exception if the path is not valid. E.g. Doesn\u0027t end with \".txt\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param filePath customized file path."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws InvalidStorageFilePathException"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Storage(String filePath) throws InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!isValidPath(path)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new InvalidStorageFilePathException(\"Storage file should end with \u0027.txt\u0027\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if the inputted path ends with \".txt\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean isValidPath(Path filePath) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return filePath.toString().endsWith(\".txt\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Encode the tasklist to a list of string by calling the TaskListEncoder then"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * write the list to a local file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param taskList inner-list of the program."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void save(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cString\u003e encodedTaskList \u003d TaskListEncoder.encodeTask(taskList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Files.write(path, encodedTaskList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Reads the data from local file. Returns empty task list if the path doesn\u0027t exist or"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * the path doesn\u0027t point to a regular file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return tasklist"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws StorageOperationException If there is encoded task list is in invalid format."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws IOException If there is error while reading or writing the file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws NoDescriptionException If the loaded description for any task is empty."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws IllegalDateTimeFormatException If any loaded date time string is empty."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public TaskList load() throws"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            StorageOperationException, IOException, NoDescriptionException, IllegalDateTimeFormatException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //TODO: throw new exception"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!Files.exists(path) || !Files.isRegularFile(path)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return TaskListDecoder.decodeTaskList(Files.readAllLines(path));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 83
    }
  },
  {
    "path": "src/main/java/storage/TaskListDecoder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static parser.Parser.parseDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static storage.TaskListEncoder.FINISHED_STATUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static parser.Parser.DATE_TIME_KEY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.IllegalDateTimeFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.NoDescriptionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.StorageOperationException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import model.DeadLineTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import model.EventTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import model.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import model.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import model.ToDoTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.awt.event.MouseAdapter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * This class contains method to decode a list of string representing tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * to real task objects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class TaskListDecoder {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String PERSON_DATA_ARGS \u003d \"\\\\s\\\\|\\\\s(T|E|D)\\\\s\\\\|\\\\s(1|0)\\\\s\\\\|\\\\s(\\\\S+)\\\\s?\\\\|?\\\\s?\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + DATE_TIME_KEY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final Pattern PERSON_DATA_ARGS_FORMAT \u003d Pattern.compile(PERSON_DATA_ARGS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final int POSITION_TASK_TYPE \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final int POSITION_TASK_IS_DONE \u003d 2;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final int POSITION_TASK_DESCRIPTION \u003d 3;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final int POSITION_DATE \u003d 4;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final int POSITION_TIME \u003d 5;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Decode task from a list of string to TaskList object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param encodedTaskList A list of string representing tasks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return TaskList object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws StorageOperationException If encoded task in invalid format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws NoDescriptionException If there is no description for any task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws IllegalDateTimeFormatException If date time string is in incorrect format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    static TaskList decodeTaskList(List\u003cString\u003e encodedTaskList) throws"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            StorageOperationException, NoDescriptionException, IllegalDateTimeFormatException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        final ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        for (String t : encodedTaskList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            tasks.add(decodeTask(t));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new TaskList(tasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Decode a string to task object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param encodedTask task to be decode."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return Task object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws StorageOperationException If encoded task string is in invalid format."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws NoDescriptionException If there is no description for any task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws IllegalDateTimeFormatException If the date time string is in invalid format."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static Task decodeTask(String encodedTask) throws"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            StorageOperationException, NoDescriptionException, IllegalDateTimeFormatException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        final Matcher matcher \u003d PERSON_DATA_ARGS_FORMAT.matcher(encodedTask);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new StorageOperationException(\"Encoded task in invalid format. Unable to decode\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String taskType \u003d decodeTaskType(matcher);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        boolean isFinished \u003d decodeTaskIsDone(matcher);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String description \u003d decodeTaskDescription(matcher);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (ToDoTask.TASK_TYPE_CHA.equals(taskType)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new ToDoTask(description, isFinished);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else if (EventTask.TASK_TYPE_CHA.equals(taskType)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new EventTask(description, decodeTaskDateTime(matcher), isFinished);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else if (DeadLineTask.TASK_TYPE_CHA.equals(taskType)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new DeadLineTask(description, decodeTaskDateTime(matcher), isFinished);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new StorageOperationException(\"Encoded task in invalid format. Unable to decode\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static String decodeTaskType(Matcher matcher) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return matcher.group(POSITION_TASK_TYPE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean decodeTaskIsDone(Matcher matcher) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String taskIsDone \u003d matcher.group(POSITION_TASK_IS_DONE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return FINISHED_STATUS.equals(taskIsDone);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static String decodeTaskDescription(Matcher matcher) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return matcher.group(POSITION_TASK_DESCRIPTION);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static LocalDateTime decodeTaskDateTime(Matcher matcher) throws"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            IllegalDateTimeFormatException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String dateString \u003d matcher.group(POSITION_DATE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String timeString \u003d matcher.group(POSITION_TIME);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return parseDateTime(dateString, timeString);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 105
    }
  },
  {
    "path": "src/main/java/storage/TaskListEncoder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import model.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import model.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * This class implements methods to encode tasks from the inner-tasklist to a list of string."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class TaskListEncoder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String FINISHED_STATUS \u003d \"1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String SEPARATOR \u003d \" | \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String UNFINISHED_STATUS \u003d \"0\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Encode tasks from inner-tasklist to a list of strings."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param taskList to be encoded."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return A list of strings with each string representing one task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static List\u003cString\u003e encodeTask(TaskList taskList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        final ArrayList\u003cString\u003e encodedTasks \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        taskList.forEach((task) -\u003e encodedTasks.add("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                encodeTaskToString(task)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return encodedTasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static String encodeTaskToString(Task task) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        StringBuilder taskStringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        taskStringBuilder.append(SEPARATOR);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        taskStringBuilder.append(task.getTaskType());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        taskStringBuilder.append(SEPARATOR);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        taskStringBuilder.append(task.isDone() ? FINISHED_STATUS : UNFINISHED_STATUS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        taskStringBuilder.append(SEPARATOR);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        taskStringBuilder.append(String.join(SEPARATOR, task.getDetails()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return taskStringBuilder.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 44
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"316.0\" promptText\u003d\"Type your input here...\" AnchorPane.leftAnchor\u003d\"4.0\" AnchorPane.rightAnchor\u003d\"80.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"72.0\" text\u003d\"Send\" AnchorPane.rightAnchor\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import model.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import model.ToDoTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import exceptions.NoDescriptionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void noDescription_ToDoTask_ExceptionThrown() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Task newTask \u003d new ToDoTask(\"\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (NoDescriptionException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            assertEquals(e.getMessage(),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \"OOPS!!! The description of a todo task cannot be empty.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            );"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 24
    }
  },
  {
    "path": "src/test/java/TestUtils/DeadlineTaskStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package TestUtils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import model.DeadLineTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class DeadLineTaskStub extends DeadLineTask {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String DEFAULT_DESCRIPTION \u003d \"form a project group\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String DEFAULT_DEADLINE \u003d \"week 3 tutorial\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //set the at as a string as the LocalDateTime object is only tested in task object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DeadLineTaskStub() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        by \u003d DEFAULT_DEADLINE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DeadLineTaskStub withDescription(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DeadLineTaskStub withTime(String by) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return description + \" by \" + by;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 37
    }
  },
  {
    "path": "src/test/java/TestUtils/EventTaskStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package TestUtils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import model.EventTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class EventTaskStub extends EventTask {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String DEFAULT_DESCRIPTION \u003d \"cs2103 lecture\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String DEFAULT_TIME \u003d \"week 3 tutorial\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //set the at as a string as the LocalDateTime object is only tested in task object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private String at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public EventTaskStub() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        at \u003d DEFAULT_TIME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public EventTaskStub withDescription(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public EventTaskStub withTime(String time) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.at \u003d time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return description + \" at \" + at;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 38
    }
  },
  {
    "path": "src/test/java/TestUtils/ToDoTaskStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package TestUtils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import model.ToDoTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ToDoTaskStub extends ToDoTask {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"complete ip increments\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ToDoTaskStub() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ToDoTaskStub withDescription(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 30
    }
  },
  {
    "path": "src/test/java/TestUtils/TypicalTasks.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package TestUtils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final ToDoTaskStub TODO_TOPICS \u003d new ToDoTaskStub().withDescription(\"go through topics for this week\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final ToDoTaskStub TODO_IP \u003d new ToDoTaskStub().withDescription(\"submit week 2 ip\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final EventTaskStub EVENT_W3LECTURE \u003d new EventTaskStub().withDescription(\"week 3 lecture\")"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .withTime(\"week 3 Friday\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final EventTaskStub EVENT_W4LECTURE \u003d new EventTaskStub().withDescription(\"week 4 lecture\")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .withTime(\"week 4 Friday\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final DeadLineTaskStub DL_ASSIGNMENT_1 \u003d new DeadLineTaskStub().withDescription(\"assignment 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .withTime(\"week 4\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final DeadLineTaskStub DL_ASSIGNMENT_2 \u003d new DeadLineTaskStub().withDescription(\"assignment 2\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            .withTime(\"week 5\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 18
    }
  },
  {
    "path": "src/test/java/model/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static TestUtils.TypicalTasks.TODO_TOPICS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static TestUtils.TypicalTasks.TODO_IP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static TestUtils.TypicalTasks.EVENT_W3LECTURE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static TestUtils.TypicalTasks.EVENT_W4LECTURE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static TestUtils.TypicalTasks.DL_ASSIGNMENT_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static TestUtils.TypicalTasks.DL_ASSIGNMENT_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void testAddTask() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        testTaskList.add(TODO_TOPICS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        testTaskList.add(TODO_IP);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String lastResult \u003d testTaskList.add(EVENT_W3LECTURE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(lastResult, \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + \"week 3 lecture at week 3 Friday\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + \"Now you have 3 tasks in the list.\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(testTaskList.internalList.size(), 3);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void testRemoveTask() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        testTaskList.add(TODO_TOPICS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        testTaskList.add(TODO_IP);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        testTaskList.add(EVENT_W3LECTURE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        testTaskList.add(EVENT_W4LECTURE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        testTaskList.add(DL_ASSIGNMENT_1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        testTaskList.add(DL_ASSIGNMENT_2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String deleteResult \u003d testTaskList.remove(5);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(deleteResult, \"Noted. I have removed this task:\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + \" assignment 2 by week 5\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                + \"Now you have 5 tasks in the list.\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(testTaskList.internalList.size(), 5);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 46
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Please input user name."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Hello yingxu! I\u0027m Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " What can I do for you?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[T][?] submit pr"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[D][?] submit ip (by: tonight)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[E][?] lecture (at: tmr)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "1.[T][?] submit pr"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "2.[D][?] submit ip (by: tonight)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "3.[E][?] lecture (at: tmr)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "OOPS!!! The description of a todo task cannot be empty."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " [T][?] submit pr"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " [D][?] submit ip (by: tonight)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "1.[T][?] submit pr"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "2.[D][?] submit ip (by: tonight)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "3.[E][?] lecture (at: tmr)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YingxuH": 63
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "yingxu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "todo submit pr"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "deadline submit ip /by tonight"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "event lecture /at tmr"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "blah"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "todo"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "java -classpath ..\\bin main.java.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 21
    }
  }
]
