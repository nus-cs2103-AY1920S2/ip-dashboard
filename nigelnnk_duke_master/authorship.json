[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "test {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 35,
      "-": 20
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "T|asdf|0"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "E|a|2020-02-02T00:00|1"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 2
    }
  },
  {
    "path": "src/main/java/AutoResponder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Main driver class of AutoResponder chat."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class AutoResponder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private StringBuilder toPrint;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    static Pattern PATTERN_DEADLINE \u003d Pattern.compile(\"^deadline (.+) /by (.+)\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    static Pattern PATTERN_EVENT \u003d Pattern.compile(\"^event (.+) /at (.+)\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    static Pattern PATTERN_TODO \u003d Pattern.compile(\"^todo (.+)\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    static Pattern PATTERN_DONE \u003d Pattern.compile(\"^done (\\\\d+)\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    static Pattern PATTERN_DELETE \u003d Pattern.compile(\"^delete (\\\\d+)\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    static Pattern PATTERN_EMPTY_COMMAND \u003d Pattern.compile(\"^(todo|event|deadline|find|done|delete)\\\\s*$\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    static Pattern PATTERN_LIST \u003d Pattern.compile(\"^list\\\\s*$\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    static Pattern PATTERN_SAVE \u003d Pattern.compile(\"^save\\\\s*$\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    static Pattern PATTERN_FIND \u003d Pattern.compile(\"^find (.+)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    static Pattern PATTERN_BYE \u003d Pattern.compile(\"^bye\\\\s*$\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Initialiser for empty AutoResponder object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public AutoResponder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.toPrint \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private String printToConsole() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        String output \u003d toPrint.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.toPrint \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Reads input from UI, and processes commands accordingly."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param input String to be processed from System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @return new AutoResponder object with corresponding command to be processed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String readInput(String input) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        String lowerInput \u003d input.toLowerCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (PATTERN_LIST.matcher(lowerInput).find()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return this.processList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        } else if (PATTERN_DONE.matcher(lowerInput).find()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            Matcher m \u003d PATTERN_DONE.matcher(lowerInput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            m.find();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            int index \u003d Integer.parseInt(m.group(1)) - 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return this.markTaskDone(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        } else if (PATTERN_DELETE.matcher(lowerInput).find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            Matcher m \u003d PATTERN_DELETE.matcher(lowerInput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            m.find();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            int index \u003d Integer.parseInt(m.group(1)) - 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return this.deleteTask(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        } else if (PATTERN_SAVE.matcher(lowerInput).find()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return this.saveList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        } else if (PATTERN_EMPTY_COMMAND.matcher(lowerInput).find()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            Matcher m \u003d PATTERN_EMPTY_COMMAND.matcher(lowerInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            m.find();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new IllegalArgumentException(\"OOPS!!! The description of a \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                    + m.group(1) + \" cannot be empty.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        } else if (PATTERN_FIND.matcher(input).find()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            Matcher m \u003d PATTERN_FIND.matcher(input);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            m.find();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return this.findTask(m.group(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        } else if (PATTERN_DEADLINE.matcher(input).find()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            Matcher m \u003d PATTERN_DEADLINE.matcher(input);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            m.find();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return this.addDeadline(m.group(1), m.group(2));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        } else if (PATTERN_EVENT.matcher(input).find()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            Matcher m \u003d PATTERN_EVENT.matcher(input);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            m.find();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return this.addEvent(m.group(1), m.group(2));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        } else if (PATTERN_TODO.matcher(input).find()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            Matcher m \u003d PATTERN_TODO.matcher(input);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            m.find();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return this.addTodo(m.group(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        } else if (PATTERN_BYE.matcher(input).find()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new IllegalArgumentException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private String processList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d taskList.size(); ++i) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            toPrint.append(i).append(\". \").append(taskList.get(i - 1)).append(\"\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return printToConsole();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private String saveList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            storage.saveList(taskList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            toPrint.append(\"Tasks saved successfully.\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            toPrint.append(\"Tasks not loaded\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return this.printToConsole();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Loads list from default storage location. Public to ensure initialisation step occurs."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @return String with error/success message"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String loadList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            taskList \u003d storage.loadList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            toPrint.append(\"Task file loaded successfully!\\n\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            toPrint.append(\"Task file not loaded. Check if file exists or is corrupted.\\n\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return this.printToConsole();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private String markTaskDone(int index) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d taskList.size()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new IndexOutOfBoundsException(\"Index of \" + (index + 1)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                    + \" does not correspond to task list of size \" + taskList.size());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            taskList.get(index).makeCompleted();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            toPrint.append(\"Nice! I\u0027ve marked this task as done:\\n\\t\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            toPrint.append(taskList.get(index)).append(\"\\n\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return printToConsole();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private String deleteTask(int index) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d taskList.size()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            throw new IndexOutOfBoundsException(\"Index of \" + (index + 1)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                    + \" does not correspond to task list of size \" + taskList.size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            toPrint.append(\"Noted! I\u0027ve removed this task:\\n\\t\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            toPrint.append(taskList.get(index)).append(\"\\n\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            taskList.remove(index);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return printToConsole();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private String findTask(String description) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        String s \u003d taskList.stream().map(Object::toString)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                .filter(string -\u003e string.contains(description))"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                .collect(Collectors.joining());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (s.length() \u003e 0) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            toPrint.append(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            toPrint.append(s);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            toPrint.append(\"\\n\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            toPrint.append(\"There are no matching tasks in your list.\\n\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return printToConsole();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private String addDeadline(String name, String date) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        taskList.add(new Deadline(name, Parser.parseDateTime(date)));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return taskAdded();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private String addEvent(String name, String date) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        taskList.add(new Event(name, Parser.parseDateTime(date)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return taskAdded();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private String addTodo(String name) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        taskList.add(new Todo(name));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return taskAdded();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private String taskAdded() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        toPrint.append(\"Got it. I\u0027ve added this task:\\n\\t\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        toPrint.append(taskList.get(taskList.size() - 1));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        toPrint.append(\"\\nNow you have \").append(taskList.size()).append(\" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return printToConsole();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 183
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class Deadline implements Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private boolean isCompleted;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final LocalDateTime deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy HHmm\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Creates a Deadline object with a name as its description and a LocalDateTime. Assumes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * that Deadline is incomplete by definition."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param name Name of Deadline"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param deadline LocalDateTime object of Deadline"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Deadline(String name, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Constructor for Deadline with all three inputs - name, deadline and isCompleted."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param name Name of Deadline"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param deadline LocalDateTime object of Deadline"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param isCompleted Boolean value if Deadline is completed or not."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Deadline(String name, LocalDateTime deadline, boolean isCompleted) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Takes in another Deadline object and modifies its isCompleted value."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param deadline reference deadline object whose name and deadline is cloned over"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param isCompleted Boolean value if Deadline is completed or not."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Deadline(Deadline deadline, boolean isCompleted) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.name \u003d deadline.getName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.deadline \u003d deadline.getDeadline();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void makeCompleted() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.isCompleted \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean getCompletion() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return this.isCompleted;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public LocalDateTime getDeadline() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return this.deadline;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String writeFormat() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return \"D|\" + name + \"|\" + deadline + \"|\" + (isCompleted ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Reads string formatted to store info regarding a Deadline object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param input input string to be parsed"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @return Deadline object parsed from string information"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static Deadline readFormat(String input) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // assert here such that first token is D"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        List\u003cString\u003e list \u003d Collections.list(new StringTokenizer(input, \"|\")).stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                .map(token -\u003e (String) token)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return new Deadline(list.get(1), LocalDateTime.parse(list.get(2)), Boolean.parseBoolean(list.get(3)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return \"[D][\" + (isCompleted ? \"\\u2713\" : \"\\u2717\") + \"] \" + name + \" (by: \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                + deadline.format(formatter) + \")\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 87
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Returns Dialog for AutoResponder, but flipped to look different from user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param text test to display"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param img image to display"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @return DialogBox object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 65
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class Event implements Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private boolean isCompleted;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final LocalDateTime deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy HHmm\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Creates an Event object with a name as its description and a LocalDateTime. Assumes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * that Event is incomplete by definition."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param name Name of Event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param deadline LocalDateTime object of Event"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Event(String name, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Takes in another Event object and modifies its isCompleted value."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param event reference Event object whose name and deadline is cloned over"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param isCompleted Boolean value if Event is completed or not."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Event(Event event, boolean isCompleted) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.name \u003d event.getName();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.deadline \u003d event.getDeadline();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Constructor for Event with all three inputs - name, deadline and isCompleted."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param name Name of Event"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param deadline LocalDateTime object of Event"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param isCompleted Boolean value if Event is completed or not."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Event(String name, LocalDateTime deadline, boolean isCompleted) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void makeCompleted() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.isCompleted \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean getCompletion() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return this.isCompleted;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public LocalDateTime getDeadline() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return this.deadline;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String writeFormat() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return \"E|\" + name + \"|\" + deadline + \"|\" + (isCompleted ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Reads string formatted to store info regarding an Event object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param input input string to be parsed"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @return Event object parsed from string information"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static Event readFormat(String input) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // assert here such that first token is D"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        List\u003cString\u003e list \u003d Collections.list(new StringTokenizer(input, \"|\")).stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                .map(token -\u003e (String) token)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return new Event(list.get(1), LocalDateTime.parse(list.get(2)), Boolean.parseBoolean(list.get(3)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return \"[E][\" + (isCompleted ? \"\\u2713\" : \"\\u2717\") + \"] \" + name + \" (at: \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                + deadline.format(formatter) + \")\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 87
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private AutoResponder ar \u003d new AutoResponder();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setAR(ar);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private AutoResponder ar;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void setAR(AutoResponder ar) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.ar \u003d ar;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.ar.loadList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            response \u003d ar.readInput(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            response \u003d e.getMessage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 56
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " * Deals with the parsing of LocalDateTime objects to and from strings."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Parses LocalDateTime to or from text file into proper format."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param input Input string to be parsed"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @return LocalDateTime object from parsed string"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static LocalDateTime parseDateTime(String input) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Pattern patternDateTime \u003d Pattern.compile(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\\\\s+\\\\d{4}\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Pattern patternDate \u003d Pattern.compile(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (patternDateTime.matcher(input).find()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return LocalDateTime.parse(input, formatter);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        } else if (patternDate.matcher(input).find()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"uuuu-MM-dd\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            return LocalDate.parse(input, formatter).atStartOfDay();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        throw new UnsupportedOperationException(\"Supplied string is not of proper format.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 28
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private File textFile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Creates Storage object to read and write data from File object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        if (!Files.exists(Paths.get(\"./data\"))) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            boolean ok \u003d new File(\"./data\").mkdir();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            if (!ok) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                System.err.println(\"Error in creating directory.\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        textFile \u003d new File(\"./data/duke.txt\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Saves current task list into text file, stored in ./data/duke.txt."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param taskList list of tasks to store"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @throws IOException Exception if file in default location is not found"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void saveList(List\u003cTask\u003e taskList) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        StringBuilder writeContents \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        for (Task v : taskList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            writeContents.append(v.writeFormat());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            writeContents.append(\"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        String path \u003d textFile.getAbsolutePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        FileWriter fw \u003d new FileWriter(path);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        fw.write(writeContents.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Loads list of tasks from text file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @return List of Tasks parsed from text file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @throws IllegalArgumentException if text file contains invalid line"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @throws FileNotFoundException if file cannot be found in default location"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public List\u003cTask\u003e loadList() throws IllegalArgumentException, FileNotFoundException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Scanner sc \u003d new Scanner(textFile);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            String s \u003d sc.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            switch (s.charAt(0)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            case \u0027T\u0027:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                taskList.add(Todo.readFormat(s));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            case \u0027D\u0027:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                taskList.add(Deadline.readFormat(s));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            case \u0027E\u0027:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                taskList.add(Event.readFormat(s));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                throw new IllegalArgumentException(\"No corresponding command found\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 72
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public interface Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    String getName();"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    boolean getCompletion();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    void makeCompleted();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    String writeFormat();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 9
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class Todo implements Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    private boolean isCompleted;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Todo(String name) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Todo(String name, boolean isCompleted) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public Todo(Todo t, boolean isCompleted) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.name \u003d t.getName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public boolean getCompletion() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return this.isCompleted;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void makeCompleted() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        this.isCompleted \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String writeFormat() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return \"T|\" + name + \"|\" + (isCompleted ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * Reads string formatted to store info regarding todotask."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @param input input string to be parsed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     * @return todotask object parsed from string information"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public static Todo readFormat(String input) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        // assert here such that first token is T"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        List\u003cString\u003e list \u003d Collections.list(new StringTokenizer(input, \"|\")).stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                .map(token -\u003e (String) token)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return new Todo(list.get(1), Boolean.parseBoolean(list.get(2)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        return \"[T][\" + (isCompleted ? \"\\u2713\" : \"\\u2717\") + \"] \" + name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 58
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 15
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 18
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Event test \u003d new Event(\"Event Test\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                LocalDateTime.of(2020, 1, 1, 0, 0));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        assertEquals(\"[E][✗] Event Test (at: Jan 1 2020 0000)\", test.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void testWriteFormatConversion() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Event test \u003d new Event(\"Event Test\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                LocalDateTime.of(2020, 1, 1, 0, 0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        assertEquals(\"E|Event Test|2020-01-01T00:00|0\", test.writeFormat());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void checkCompletion_incompleteEvent_makeComplete() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Event test \u003d new Event(\"Event Test\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "                LocalDateTime.of(2020, 1, 1, 0, 0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        assertEquals(\"E|Event Test|2020-01-01T00:00|1\", test.makeCompleted().writeFormat());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 29
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Todo test \u003d new Todo(\"Test AR\", false);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        assertEquals(\"[T][✗] Test AR\", test.toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void testWriteFormatConversion() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Todo test \u003d new Todo(\"Test AR\", false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        assertEquals(\"T|Test AR|0\", test.writeFormat());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void markCompleted_incompleteTodo_successfulChangeInCompleted() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Todo test \u003d new Todo(\"Test AR\", false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        assertEquals(\"T|Test AR|1\", test.makeCompleted().writeFormat());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    public void markCompleted_completeTodo_noChange() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        Todo test \u003d new Todo(\"Test AR\", true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "        assertEquals(test.writeFormat(), test.makeCompleted().writeFormat());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 29
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "--------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "No matching command found"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "--------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "--------------------------------------------"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "[T][✗] hi"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "--------------------------------------------"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "--------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "[T][✗] hey"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "--------------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "--------------------------------------------"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "[E][✗] 1 (at: 1)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "--------------------------------------------"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "--------------------------------------------"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "[D][✗] 2 (by: 2)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "--------------------------------------------"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "--------------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "1. [T][✗] hi"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "2. [T][✗] hey"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "3. [E][✗] 1 (at: 1)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "4. [D][✗] 2 (by: 2)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "--------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "--------------------------------------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "[E][✓] 1 (at: 1)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "--------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "--------------------------------------------"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "1. [T][✗] hi"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "2. [T][✗] hey"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "3. [E][✓] 1 (at: 1)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "4. [D][✗] 2 (by: 2)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "--------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "--------------------------------------------"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "Farewell. Thank you for using AutoResponder."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "--------------------------------------------"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 38
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "hi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "todo hi"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "todo hey"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "event 1 /at 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "deadline 2 /by 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 9
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "java -classpath ..\\bin AutoResponder \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigelnnk"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "nigelnnk": 22
    }
  }
]
