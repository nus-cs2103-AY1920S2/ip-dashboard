[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "test {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 27,
      "-": 20
    }
  },
  {
    "path": "list.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "T/0/readbook"
      }
    ],
    "authorContributionMap": {
      "hans555": 1
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Represent a task with deadline."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Extends the Task class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Constructor for Deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param description of the task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param date to be completed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public Deadline(String description, LocalDate date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Get the type of task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * D for Deadline"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * T for To-do"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * E for Event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @return the type of task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Get the task\u0027s date to be completed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @return date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return this.date.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Formats the date of string from YYYY-MM-DD to D MMM YYYY."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Eg: 2009-12-03 to 3 DEC 2009"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @return String of formatted date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public String formatDate() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        DateTimeFormatter myformat \u003d DateTimeFormatter.ofPattern(\"d MMM uuuu\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String converted \u003d this.date.format(myformat);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return converted;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String myword \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "        myword \u003d myword + \"[\" + this.getTaskType() + \"]\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "                + \" [\" + super.getStatusIcon() + \"] \" + super.description"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "                + \" (\" + this.formatDate() + \")\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return myword;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 60
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 46
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Represent the main driving class Duke."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "    protected Tasklist tasklist;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Constructor of Duke."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Initialise Ui, Storage and Tasklist"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.storage \u003d new Storage(\"./list.txt\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.tasklist \u003d new Tasklist(storage.readFile());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * The main logic of the chatbot."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.ui.printIntro();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Scanner myScanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "            String word \u003d myScanner.nextLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "                String[] parsed \u003d TextParser.myFirstParser(word);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "                String keyword \u003d parsed[0];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "                if (keyword.equals(\"bye\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    this.storage.writeFile(this.tasklist.mylist);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    this.ui.printMessage(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "                } else if (keyword.equals(\"list\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    this.ui.printMessage(\"Here are the task in your list\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    this.tasklist.printList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "                } else if (keyword.equals(\"done\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    int taskNumber \u003d Integer.valueOf(parsed[1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    this.tasklist.markDone(taskNumber);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    this.ui.printMessage(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    this.ui.printMessage(\"\" + taskNumber + \". \" + this.tasklist.getTask(taskNumber));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": "                } else if (keyword.equals(\"delete\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    int taskNumber \u003d Integer.valueOf(parsed[1]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    this.ui.printMessage(\"Noted. I\u0027ve removed this task\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    this.ui.printMessage(\"\" + this.tasklist.getTask(taskNumber));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    this.tasklist.removeTask(taskNumber);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    this.ui.printMessage(\"Now you have \" + this.tasklist.getSize() + \" in the list.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hans555"
        },
        "content": "                } else if (keyword.equals(\"find\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    this.tasklist.findKeyword(parsed[1]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hans555"
        },
        "content": "                } else if (keyword.equals(\"todo\") || keyword.equals(\"deadline\") || keyword.equals(\"event\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    if (parsed.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hans555"
        },
        "content": "                        throw new DukeException(\"I think u need more arguments\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hans555"
        },
        "content": "                        String word2 \u003d parsed[1];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hans555"
        },
        "content": "                        String[] parsed2 \u003d TextParser.mySecondParser(word2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hans555"
        },
        "content": "                        if (keyword.equals(\"todo\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hans555"
        },
        "content": "                            this.tasklist.addTask(new Todo(parsed2[0]));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hans555"
        },
        "content": "                        } else if (keyword.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hans555"
        },
        "content": "                            this.tasklist.addTask(new Deadline(parsed2[0], LocalDate.parse(parsed2[1])));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hans555"
        },
        "content": "                        } else if (keyword.equals(\"event\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hans555"
        },
        "content": "                            this.tasklist.addTask(new Event(parsed2[0], LocalDate.parse(parsed2[1])));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hans555"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hans555"
        },
        "content": "                        this.ui.printMessage(\"Got it. I \u0027ve added this task:\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hans555"
        },
        "content": "                        this.ui.printMessage(\"\" + this.tasklist.getTask(this.tasklist.getSize()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hans555"
        },
        "content": "                        this.ui.printMessage(\"Now you have \" + this.tasklist.getSize() + \" in the list.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hans555"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    throw new DukeException(\"I DK how to process this -\u003e \" + word);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hans555"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hans555"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hans555"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hans555"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hans555"
        },
        "content": "                this.ui.printLine();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hans555"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hans555"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hans555"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hans555"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hans555"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hans555"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hans555"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hans555"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hans555"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hans555"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hans555"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hans555"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hans555"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hans555"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hans555"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hans555"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hans555"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hans555"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hans555"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hans555"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hans555"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hans555"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hans555"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hans555"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hans555"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hans555"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hans555"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hans555"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hans555"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hans555"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hans555"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hans555"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hans555"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hans555"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hans555"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hans555"
        },
        "content": "     /*  //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hans555"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hans555"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hans555"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hans555"
        },
        "content": "        });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hans555"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hans555"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hans555"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hans555"
        },
        "content": "        });"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hans555"
        },
        "content": "    */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hans555"
        },
        "content": "        //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hans555"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hans555"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hans555"
        },
        "content": "        });"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hans555"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hans555"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hans555"
        },
        "content": "        });"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hans555"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hans555"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hans555"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hans555"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hans555"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hans555"
        },
        "content": "        );"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hans555"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private String getResponse(String input) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * The main method."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param args argument"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hans555"
        },
        "content": "  /* public static void main(String[] args) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hans555"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hans555"
        },
        "content": "  */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 226,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Represent a custom exception object."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Constructor for DukeException."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param message for the exception"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 14
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Represent a task with event."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Extends the Task class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Constructor for Event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param description of the event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param date to be completed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public Event(String description, LocalDate date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Get the type of task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * D for Deadline"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * T for To-do"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * E for Event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @return the type of task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Get the task\u0027s date to be completed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @return date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return this.date.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Formats the date of string from YYYY-MM-DD to D MMM YYYY."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Eg: 2009-12-03 to 3 DEC 2009"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @return String of formatted date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public String formatDate() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        DateTimeFormatter myformat \u003d DateTimeFormatter.ofPattern(\"d MMM uuuu\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String converted \u003d this.date.format(myformat);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return converted;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String myword \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "        myword \u003d myword + \"[\" + this.getTaskType() + \"]\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "                + \" [\" + super.getStatusIcon() + \"] \" + super.description"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "                + \" (\" + this.formatDate() + \")\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return myword;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 61
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hans555": 11
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Represent a storage object to handle storing of the list into files."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "    protected String filepath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Constructor for storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param filepath of the file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Read the file and convert into a arraylist of tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @return ArrayList\u003c/Task\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public ArrayList\u003cTask\u003e readFile() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "            File f \u003d new File(filepath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "                String word \u003d s.nextLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "                String[] parsed \u003d TextParser.myThirdParser(word);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "                Task currentTask \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "                switch (parsed[0]) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    case \"T\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "                        currentTask \u003d new Todo(parsed[2]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    case \"D\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "                        currentTask \u003d new Deadline(parsed[2], LocalDate.parse(parsed[3]));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    case \"E\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "                        currentTask \u003d new Event(parsed[2], LocalDate.parse(parsed[3]));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "                if (parsed[1].equals(\"1\")) { // 1 means done"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    currentTask.markAsDone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "                list.add(currentTask);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Writes the arraylist of task into the file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param taskList ArrayList\u003c/Task\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void writeFile(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hans555"
        },
        "content": "        FileWriter writer \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hans555"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hans555"
        },
        "content": "            writer \u003d new FileWriter(filepath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hans555"
        },
        "content": "            for (Task current : taskList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hans555"
        },
        "content": "                if (current instanceof Todo) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    writer.write(\"T\" + \"/\" + current.checkDone() + \"/\" + current.getTask()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hans555"
        },
        "content": "                            + System.lineSeparator());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hans555"
        },
        "content": "                } else if (current instanceof Deadline) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    writer.write(\"D\" + \"/\" + current.checkDone() + \"/\" + current.getTask() + \"/\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hans555"
        },
        "content": "                            + ((Deadline) current).getDate() + System.lineSeparator());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hans555"
        },
        "content": "                } else if (current instanceof Event) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    writer.write(\"E\" + \"/\" + current.checkDone() + \"/\" + current.getTask() + \"/\" +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hans555"
        },
        "content": "                            ((Event) current).getDate() + System.lineSeparator());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hans555"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hans555"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hans555"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hans555"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hans555": 92
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Represent a task to do."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Constructor for Task to do."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param description of the activity"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Returns a tick or cross icon depending on the task completion status."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @return String representing a tick or cross"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Returns a description of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @return String of the task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Returns the completion status of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @return 1 for true 0 for false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public String checkDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return (this.isDone ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 48
    }
  },
  {
    "path": "src/main/java/Tasklist.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Represent an Tasklist containing a list of Task objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class Tasklist {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "    protected ArrayList\u003cTask\u003e mylist;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Constructor for Tasklist."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param list An arraylist of Task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public Tasklist(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.mylist \u003d list;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Add a task into the tail of the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param task a task to do"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "        mylist.add(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Remove the task positioned in the index from the arraylist."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param index the position"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void removeTask(int index) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        mylist.remove(index - 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Mark the task positioned in the index as done from the arraylist."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param index the position"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void markDone(int index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Task current \u003d mylist.get(index - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "        current.markAsDone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Returns the task positioned in the index from the arraylist."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param index the position"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @return the selected task from the list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return mylist.get(index - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Returns the size of arraylist."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @return int"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return mylist.size();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Returns the arraylist."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @return arraylist"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return mylist;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Prints the arraylist of task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void printList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hans555"
        },
        "content": "        for (int i \u003d 0; i \u003c mylist.size(); i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hans555"
        },
        "content": "            System.out.println(i + 1 + \". \" + mylist.get(i));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Print the list of tasks with the keyword inside."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param keyword String"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void findKeyword(String keyword) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hans555"
        },
        "content": "        int j \u003d 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hans555"
        },
        "content": "        for (int i \u003d 0; i \u003c mylist.size(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hans555"
        },
        "content": "            if (mylist.get(i).description.contains(keyword)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hans555"
        },
        "content": "                System.out.println(j + \". \" + mylist.get(i));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hans555"
        },
        "content": "                j++;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hans555"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 90
    }
  },
  {
    "path": "src/main/java/TextParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Represent a class to handle the parsing of the text for processing of commands."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class TextParser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parse a string into array using String.split(\" \", 2)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param line to be parsed"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @return String[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static String[] myFirstParser(String line) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String[] arrSplit \u003d line.split(\" \", 2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return arrSplit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parse a string into array using String.split(\"/\", 2)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param line to be parsed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @return String[]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static String[] mySecondParser(String line) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String[] arrSplit \u003d line.split(\"/\", 2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return arrSplit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parse a string into array using String.split(\"/\")."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * no limits"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param line to be parsed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @return String[]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static String[] myThirdParser(String line) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String[] arrSplit \u003d line.split(\"/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return arrSplit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 36
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Represent a to-do task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Extends the Task class"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Constructor for to-do task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param description of the task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Get the type of task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * D for Deadline"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * T for To-do"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * E for Event"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @return the type of task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String myword \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "        myword \u003d myword + \"[\" + this.getTaskType() + \"]\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "                + \" [\" + super.getStatusIcon() + \"] \" + super.description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return myword;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hans555": 33
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Prints the introduction welcome message when duke runs."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void printIntro() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "        System.out.println(\"Hello! I \u0027m Duke\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "        System.out.println(\"________________________________________\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Prints the introduction exit message when duke exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void printEnding() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "        System.out.println(\"Bye. Hope not to see you again soon!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Prints any message by duke."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param message of duke"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void printMessage(String message) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Prints a line in the terminal."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "        System.out.println(\"________________________________________\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 40
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void taskTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Task myEvent \u003d new Event(\"borrow book\", LocalDate.parse(\"2009-12-03\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Task myDeadline \u003d new Deadline(\"swimming\", LocalDate.parse(\"2011-12-03\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Task myTodo \u003d new Todo(\"borrow myself\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "        myEvent.markAsDone();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertTrue(myEvent.isDone);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void textParserTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String test1 \u003d \"Hi i am a guy\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String test23 \u003d \"a/b/c/d/e/f\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String[] myresult \u003d { \"Hi\", \"i am a guy\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String[] myresult2 \u003d {\"a\", \"b/c/d/e/f\"};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String[] myresult3 \u003d {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String[] mytest1 \u003d TextParser.myFirstParser(test1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String[] mytest2 \u003d TextParser.mySecondParser(test23);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String[] mytest3 \u003d TextParser.myThirdParser(test23);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertArrayEquals(myresult, mytest1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertArrayEquals(myresult2, mytest2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertArrayEquals(myresult3, mytest3);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 37
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "Hello from"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "Hello! I \u0027m Duke"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "________________________________________"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "Got it. I \u0027ve added this task:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "[T] [✘] borrow book"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "Now you have 1 in the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "________________________________________"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "Here are the task in your list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "1. [T] [✘] borrow book"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "________________________________________"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "________________________________________"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "Got it. I \u0027ve added this task:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "[D] [✘] return book  (by Sunday)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "Now you have 2 in the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "________________________________________"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "Got it. I \u0027ve added this task:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "[E] [✘] project meeting  (at Mon 2-4pm)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "Now you have 3 in the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "________________________________________"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "Here are the task in your list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "1. [T] [✘] borrow book"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "2. [D] [✘] return book  (by Sunday)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "3. [E] [✘] project meeting  (at Mon 2-4pm)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "________________________________________"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "________________________________________"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "✓ borrow book"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "________________________________________"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "________________________________________"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "Here are the task in your list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "1. [T] [✓] borrow book"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "2. [D] [✘] return book  (by Sunday)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "3. [E] [✘] project meeting  (at Mon 2-4pm)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "________________________________________"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "________________________________________"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "✓ return book "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "________________________________________"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "________________________________________"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "✓ project meeting "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "________________________________________"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "________________________________________"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "Here are the task in your list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "1. [T] [✓] borrow book"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "2. [D] [✓] return book  (by Sunday)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "3. [E] [✓] project meeting  (at Mon 2-4pm)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "________________________________________"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "________________________________________"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "________________________________________"
      }
    ],
    "authorContributionMap": {
      "hans555": 62
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "hans555": 11
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d c../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "java -classpath /Users/onghansheng/Desktop/duke/src/main/java Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "then"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "else"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "hans555": 35
    }
  }
]
