[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "test {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    archiveVersion \u003d \"0.3.3\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 36,
      "-": 20
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "Duke is a Personal Assistant Chatbot that helps you keep track of various tasks."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "### Feature 1 - Tasks"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "Allows the user to add, update and delete tasks which are stored in a list. User can also mark a task as done. There are 3 types of tasks: `todo`, `deadline` and `event`."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "### Feature 2 - Search"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "Allows the user to find tasks with a keyword."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "### Feature 3 - Undo"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "Allows the user to undo an operation on a task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "### Feature 4 - Helpful error messages"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "Displays helpful error messages when the user uses a command incorrectly."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "Words in `UPPER_CASE` are the parameters to be supplied by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "E.g. in `todo TASK_DESCRIPTION`, `TASK_DESCRIPTION` is a parameter which can be used as `todo Homework`."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "### 1. `todo` - Add a todo task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "Adds a todo task to Duke\u0027s list of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Format:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    todo TASK_DESCRIPTION"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Example of usage:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    todo Buy a new wallet"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Expected Outcome:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        [T][✘] Buy a new wallet"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "### 2. `deadline` - Add a task with a deadline"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "Adds a task with a deadline which consists of the date and time."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Format:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    deadline TASK_DESCRIPTION /by DATE_AND_TIME"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "`DATE AND TIME` is in the format of `dd/MM/yyyy HH:mm`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Example of usage:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    deadline CS3230 Assignment 1 /by 20/02/2020 23:59"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Expected Outcome:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        [D][✘] CS3230 Assignment 1 (by: 20 Feb 2019 11:59PM)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "### 3. `event` - Add an event happening at a certain time"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "Adds an event which consists of the date and time that it is happening."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Format:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    event TASK_DESCRIPTION /at DATE_AND_TIME"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "`DATE AND TIME` is in the format of `dd/MM/yyyy HH:mm`."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Example of usage:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    event CS2106 Midterm /at 07/03/2020 13:00"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Expected Outcome:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        [E][✘] CS2106 Midterm (at: 07 Mar 2020 01:00PM)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "### 4. `list` - View all tasks"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "Shows the list of all the tasks stored."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Format:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    list"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Example of usage:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Expected Outcome:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    Here are the tasks in your list:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    1.[T][✘] Buy a new wallet"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    2.[D][✘] CS3230 Assignment 1 (by: 20 Feb 2019 11:59PM)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    3.[E][✘] CS2106 Midterm (at: 07 Mar 2020 01:00PM)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "### 5. `done` - Mark a task as completed"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "Marks a task as completed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Format:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    done TASK_INDEX"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "`TASK_INDEX` refers to the index number shown in the displayed list of tasks after using the `list` command."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Example of usage:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    done 1"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Expected Outcome:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        [T][✔] Buy a new wallet"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "### 6. `delete` - Delete a task"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "Deletes a task."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Format:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    delete TASK_INDEX"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "`TASK_INDEX` refers to the index number shown in the displayed list of tasks after using the `list` command."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Example of usage:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    delete 1"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Expected Outcome:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        [T][✔] Buy a new wallet"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "### 7. `find` - Find tasks"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "Finds tasks which contain the specified keyword."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Format:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    find KEYWORD"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Example of usage:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    find CS"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Expected Outcome:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    1.[D][✘] CS3230 Assignment 1 (by: 20 Feb 2019 11:59PM)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    2.[E][✘] CS2106 Midterm (at: 07 Mar 2020 01:00PM)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "### 8. `undo` - Undo a task operation"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "Undo a task operation. Only the following commands can be undone: `todo`, `deadline`, `event`, `done` and `delete`."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Format:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    undo"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Example of usage:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    done 1"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    undo"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Expected Outcome:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        [D][✔] CS3230 Assignment 1 (by: 20 Feb 2019 11:59PM)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    Noted! I\u0027ve reverted your mark as done command:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    You have the following files in this folder."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        [D][✘] CS3230 Assignment 1 (by: 20 Feb 2019 11:59PM)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "### 13. `bye` - Exit Duke"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "Quits the application."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Format:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    bye"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Example of usage:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    bye"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "#### Expected Outcome:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003e Duke exits"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 186,
      "-": 13
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.command.CommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.command.CommandResponse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.exception.IncorrectCommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.exception.StorageOperationException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.ui.UiManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.INVALID_ENCODING_ERROR_MSG;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Initializes the application and starts the interaction with the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final UiManager ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final LinkedList\u003cCommand\u003e commandHistory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private boolean hasFileStorageError;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Constructs a new Duke instance ."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        // Set up the UI."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        ui \u003d new UiManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        commandHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        hasFileStorageError \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        ui.start(primaryStage, this);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Executes a single input command from the user and return the response messages."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param input The input command from the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The response messages."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public String parseAndExecuteSingleCommand(String input) throws IncorrectCommandException,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            StorageOperationException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            command \u003d CommandParser.parse(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            // Handles ExitCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            if (command.isExitCommand()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                exit();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            // Handles file storage error"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            if (hasFileStorageError) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                throw new StorageOperationException(INVALID_ENCODING_ERROR_MSG);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            // Handles UndoCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            if (command.isUndoCommand()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                CommandResponse commandResponse \u003d commandHistory.pop().undo(taskList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                storage.saveTaskListToStorage(taskList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                return commandResponse.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            // All other commands"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            CommandResponse commandResponse \u003d command.execute(taskList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            if (command.canBeUndone()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                commandHistory.push(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            storage.saveTaskListToStorage(taskList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return commandResponse.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new IncorrectCommandException(\"Nothing to undo\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (IncorrectCommandException | StorageOperationException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            // Handles file storage error"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            if (hasFileStorageError) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                throw new StorageOperationException(INVALID_ENCODING_ERROR_MSG);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Initializes the storage for the application."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void initStorage() throws StorageOperationException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        taskList \u003d storage.loadTaskListFromStorage();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Enters storage error mode."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Used when a StorageOperationException prevents the normal operation of the application."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Only the ExitCommand will be able to run."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void enterStorageErrorMode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        hasFileStorageError \u003d true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Exits the application."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 117
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static javafx.application.Application.launch;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        launch(Duke.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 12
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.exception.TaskIndexOutOfBoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.generateAddSuccessMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.generateDeleteSuccessMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "class AddCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    static final int TYPE_TODO \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    static final int TYPE_DEADLINE \u003d 2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    static final int TYPE_EVENT \u003d 3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final Task taskToAdd;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private boolean isExecuted;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private int addedTaskIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    AddCommand(int type, String description, LocalDateTime time) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        addedTaskIndex \u003d -1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        isExecuted \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        case TYPE_TODO:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            taskToAdd \u003d new Todo(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        case TYPE_DEADLINE:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            taskToAdd \u003d new Deadline(description, time);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        case TYPE_EVENT:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            taskToAdd \u003d new Event(description, time);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new AssertionError(\"CommandParser will ensure the correct type is passed into the constructor.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean isExitCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean isUndoCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean canBeUndone() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public CommandResponse execute(TaskList taskList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assert !isExecuted : \"Executing already executed command.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        addedTaskIndex \u003d taskList.size();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        taskList.add(taskToAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        isExecuted \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return new CommandResponse(generateAddSuccessMessage(taskToAdd.toString(), taskList.size()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public CommandResponse undo(TaskList taskList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assert isExecuted : \"Undoing not executed command.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            taskList.remove(addedTaskIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (TaskIndexOutOfBoundException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            assert false : e; // will not reach here"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        addedTaskIndex \u003d -1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        isExecuted \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return new CommandResponse(generateDeleteSuccessMessage(taskToAdd.toString(), taskList.size()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 78
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.exception.IncorrectCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * An interface for the commands of this application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true of this command is an ExitCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Otherwise, returns false."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return True only if this command is an ExitCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    boolean isExitCommand();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true of this command is an UndoCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Otherwise, returns false."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return True only if this command is an UndoCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    boolean isUndoCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true of this command is can be undone."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Otherwise, returns false."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return True only if this command can be undone."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    boolean canBeUndone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Executes this command and returns the CommandResponse."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param taskList The TaskList that this command should operate on."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The CommandResponse after executing this command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @throws IncorrectCommandException If an error occurs when executing the command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    CommandResponse execute(TaskList taskList) throws IncorrectCommandException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Undo this command and returns the CommandResponse."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param taskList The TaskList that this command should operate on."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The CommandResponse after undoing this command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    CommandResponse undo(TaskList taskList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 49
    }
  },
  {
    "path": "src/main/java/duke/command/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.exception.IncorrectCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.DateTimeFormat.INPUT_DATE_TIME_FORMAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.EMPTY_DESCRIPTION_ERROR_MSG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.EMPTY_TIME_ERROR_MSG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.INVALID_COMMAND_ERROR_MSG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.INVALID_INDEX_ERROR_MSG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.generateAddDeadlineErrorMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.generateAddEventErrorMessage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.generateAddTodoErrorMessage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.generateDeleteErrorMessage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.generateDoneErrorMessage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.generateFindErrorMessage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.generateTimeFormatErrorMessage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Handles the parsing of the user\u0027s input command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns the corresponding Command to be executed after parsing the specified user input command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param userInputCommand The specified user input command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The corresponding Command to be executed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @throws IncorrectCommandException If the user inputs an invalid or incomplete command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static Command parse(String userInputCommand) throws IncorrectCommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        String[] tokens \u003d userInputCommand.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        String commandWord \u003d tokens[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (commandWord.equals(\"done\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            // Mark as done command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            if (tokens.length !\u003d 2) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                // Command is invalid if the number of arguments not exactly 1."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                throw new IncorrectCommandException(generateDoneErrorMessage(INVALID_INDEX_ERROR_MSG));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                int taskIndex \u003d Integer.parseInt(tokens[1]) - 1; // May throw NumberFormatException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                return new MarkAsDoneCommand(taskIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                // Command is invalid if the argument is not a valid integer."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                throw new IncorrectCommandException(generateDoneErrorMessage(INVALID_INDEX_ERROR_MSG));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } else if (commandWord.equals(\"delete\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            // Delete command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            if (tokens.length !\u003d 2) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                // Command is invalid if the number of arguments not exactly 1."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                throw new IncorrectCommandException(generateDeleteErrorMessage(INVALID_INDEX_ERROR_MSG));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                int taskIndex \u003d Integer.parseInt(tokens[1]) - 1; // May throw NumberFormatException"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                return new DeleteCommand(taskIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                // Command is invalid if the argument is not a valid integer."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                throw new IncorrectCommandException(generateDeleteErrorMessage(INVALID_INDEX_ERROR_MSG));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } else if (commandWord.equals(\"find\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            // Find command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            if (tokens.length !\u003d 2) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                // Command is invalid if the number of arguments not exactly 1."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                throw new IncorrectCommandException(generateFindErrorMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return new FindCommand(tokens[1]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } else if (commandWord.equals(\"todo\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                || commandWord.equals(\"deadline\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                || commandWord.equals(\"event\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            // Add command"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return parseAddCommandFromTokens(tokens);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } else if (userInputCommand.equals(\"list\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            // List command"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } else if (userInputCommand.equals(\"undo\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            // Undo command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } else if (userInputCommand.equals(\"bye\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            // Exit command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            // Invalid commands"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new IncorrectCommandException(INVALID_COMMAND_ERROR_MSG);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private static AddCommand parseAddCommandFromTokens(String[] tokens) throws IncorrectCommandException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        String keyword \u003d tokens[0];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        StringBuilder descriptionBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        StringBuilder timeBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        boolean isDescDone \u003d false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        String delimiter;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            delimiter \u003d \"/by\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            delimiter \u003d \"/at\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            delimiter \u003d \"\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        for (int i \u003d 1; i \u003c tokens.length; i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            if (tokens[i].equals(delimiter)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                isDescDone \u003d true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            } else if (isDescDone) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                timeBuilder.append(tokens[i]).append(\u0027 \u0027);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                descriptionBuilder.append(tokens[i]).append(\u0027 \u0027);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        String description \u003d descriptionBuilder.toString().stripTrailing();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        String timeString \u003d timeBuilder.toString().stripTrailing();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            if (description.isBlank()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                throw new IncorrectCommandException(generateAddTodoErrorMessage(EMPTY_DESCRIPTION_ERROR_MSG));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return new AddCommand(AddCommand.TYPE_TODO, description, null);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            if (description.isBlank()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                throw new IncorrectCommandException(generateAddDeadlineErrorMessage(EMPTY_DESCRIPTION_ERROR_MSG));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            } else if (timeString.isBlank()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                throw new IncorrectCommandException(generateAddDeadlineErrorMessage(EMPTY_TIME_ERROR_MSG));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                LocalDateTime time \u003d LocalDateTime.parse(timeString, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                return new AddCommand(AddCommand.TYPE_DEADLINE, description, time);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                throw new IncorrectCommandException(generateTimeFormatErrorMessage());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            if (description.isBlank()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                throw new IncorrectCommandException(generateAddEventErrorMessage(EMPTY_DESCRIPTION_ERROR_MSG));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            } else if (timeString.isBlank()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                throw new IncorrectCommandException(generateAddEventErrorMessage(EMPTY_TIME_ERROR_MSG));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                LocalDateTime time \u003d LocalDateTime.parse(timeString, INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                return new AddCommand(AddCommand.TYPE_EVENT, description, time);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                throw new IncorrectCommandException(generateTimeFormatErrorMessage());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        default: // Never reached"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new AssertionError(\"Invalid commands have already been accounted for.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 157
    }
  },
  {
    "path": "src/main/java/duke/command/CommandResponse.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents the response given to the user after executing a command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class CommandResponse {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final String response;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    CommandResponse() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this(\"\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    CommandResponse(String response) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.response \u003d response;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns the string representation of this CommandResponse."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The string representation of this CommandResponse."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 26
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.exception.IncorrectCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.exception.TaskIndexOutOfBoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.generateAddSuccessMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.generateDeleteSuccessMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final int taskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private boolean isExecuted;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private Task deletedTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    DeleteCommand(int taskIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        isExecuted \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        deletedTask \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean isExitCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean isUndoCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean canBeUndone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public CommandResponse execute(TaskList taskList) throws IncorrectCommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assert !isExecuted : \"Executing already executed command.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            deletedTask \u003d taskList.remove(taskIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (TaskIndexOutOfBoundException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new IncorrectCommandException(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        isExecuted \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return new CommandResponse(generateDeleteSuccessMessage(deletedTask.toString(), taskList.size()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public CommandResponse undo(TaskList taskList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assert isExecuted : \"Undoing not executed command.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        taskList.add(taskIndex, deletedTask);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        CommandResponse response \u003d new CommandResponse("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                generateAddSuccessMessage(deletedTask.toString(), taskList.size()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        deletedTask \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        isExecuted \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 60
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "class ExitCommand implements Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean isExitCommand() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean isUndoCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean canBeUndone() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public CommandResponse execute(TaskList taskList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return new CommandResponse();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public CommandResponse undo(TaskList taskList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        throw new AssertionError(\"Undo for exit command will not be called.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 30
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.exception.TaskIndexOutOfBoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.EMPTY_FIND_RESULT_MSG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "class FindCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    FindCommand(String keyword) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean isExitCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean isUndoCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean canBeUndone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public CommandResponse execute(TaskList taskList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        int listSize \u003d taskList.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        StringBuilder responseBuilder \u003d new StringBuilder(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        for (int i \u003d 0; i \u003c listSize; i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                Task currentTask \u003d taskList.get(i);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                if (currentTask.descriptionContains(keyword)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    responseBuilder.append(i + 1).append(\u0027.\u0027).append(currentTask).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            } catch (TaskIndexOutOfBoundException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                assert false : e;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return new CommandResponse(EMPTY_FIND_RESULT_MSG);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return new CommandResponse(responseBuilder.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public CommandResponse undo(TaskList taskList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        throw new AssertionError(\"Undo for find command will not be called.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 58
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.exception.TaskIndexOutOfBoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.EMPTY_TASK_LIST_MSG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "class ListCommand implements Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean isExitCommand() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean isUndoCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean canBeUndone() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public CommandResponse execute(TaskList taskList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        int listSize \u003d taskList.size();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (listSize \u003d\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return new CommandResponse(EMPTY_TASK_LIST_MSG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            StringBuilder responseBuilder \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            for (int i \u003d 0; i \u003c listSize; i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    responseBuilder.append(i + 1).append(\u0027.\u0027).append(taskList.get(i)).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                } catch (TaskIndexOutOfBoundException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    assert false : e; // will not reach here"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return new CommandResponse(responseBuilder.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public CommandResponse undo(TaskList taskList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        throw new AssertionError(\"Undo for list command will not be called.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 46
    }
  },
  {
    "path": "src/main/java/duke/command/MarkAsDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.exception.IncorrectCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.exception.TaskIndexOutOfBoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.generateDoneSuccessMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.generateNotDoneSuccessMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "class MarkAsDoneCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final int taskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private boolean isExecuted;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    MarkAsDoneCommand(int taskIndex) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        isExecuted \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean isExitCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean isUndoCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean canBeUndone() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public CommandResponse execute(TaskList taskList) throws IncorrectCommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assert !isExecuted : \"Executing already executed command.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            Task task \u003d taskList.get(taskIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            isExecuted \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return new CommandResponse(generateDoneSuccessMessage(task.toString()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (TaskIndexOutOfBoundException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new IncorrectCommandException(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public CommandResponse undo(TaskList taskList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assert isExecuted : \"Undoing not executed command.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            Task task \u003d taskList.get(taskIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            task.markAsNotDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            isExecuted \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return new CommandResponse(generateNotDoneSuccessMessage(task.toString()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (TaskIndexOutOfBoundException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new AssertionError(e); // will not reach here"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 61
    }
  },
  {
    "path": "src/main/java/duke/command/UndoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "class UndoCommand implements Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean isExitCommand() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean isUndoCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean canBeUndone() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public CommandResponse execute(TaskList taskList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        throw new AssertionError(\"execute for undo command will not be called.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public CommandResponse undo(TaskList taskList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        throw new AssertionError(\"Undo for undo command will not be called.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 30
    }
  },
  {
    "path": "src/main/java/duke/common/DateTimeFormat.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Container for Date and Time format using java.time.format.DateTimeFormatter."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class DateTimeFormat {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final DateTimeFormatter INPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy H:m\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final DateTimeFormatter OUTPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy, hh:mma\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 11
    }
  },
  {
    "path": "src/main/java/duke/common/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Container and generator for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * The welcome message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String WELCOME_MSG \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            \"Hello! I\u0027m Duke.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    + \"What can I do for you?\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * The message displayed when this list of task is empty."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String EMPTY_TASK_LIST_MSG \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            \"There are currently no tasks in your list.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    + \"Add a task by using one of the following commands:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    + \"\\ttodo [description]\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    + \"\\tdeadline [description] /by [time]\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    + \"\\tevent [description] /at [time]\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    + \"Time should be in the format of \u0027dd/MM/yyyy HH:mm\u0027\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * The message displayed when find command returns no result."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String EMPTY_FIND_RESULT_MSG \u003d \"There are no matching tasks in your list.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * The message displayed when the description of a task to be added is not specified."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String EMPTY_DESCRIPTION_ERROR_MSG \u003d \"You forgot to include a description.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * The message displayed when the time of a task to be added is not specified."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String EMPTY_TIME_ERROR_MSG \u003d \"You forgot to include a time.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * The message displayed when the index specified in the user\u0027s input command is invalid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String INVALID_INDEX_ERROR_MSG \u003d \"This command should only have a valid task index as the \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \"argument.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * The message displayed when the application is unable to decode the storage file data."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String INVALID_ENCODING_ERROR_MSG \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            \"Encoded task in your storage file has an invalid format.\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    + \"I am unable to decode.\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    + \"Please exit Duke and delete the corrupted file \u0027data/duke.txt\u0027\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * The message displayed when a wrong command is entered by the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String INVALID_COMMAND_ERROR_MSG \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            \"I\u0027m sorry, but I don\u0027t know what that means.\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    + \"Perhaps you can try typing these commands:\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    + \"\\ttodo [description]\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    + \"\\tdeadline [description] /by [time]\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    + \"\\tevent [description] /at [time]\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    + \"\\tlist\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    + \"\\tdone [task_index]\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    + \"\\tdelete [task_index]\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    + \"\\tfind [keyword]\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    + \"\\tundo\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Generates and returns the error message when the application is unable to write to the storage file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param filePath The path of the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static String generateWriteToFileErrorMessage(String filePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return \"Unable to write to file: \\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + String.format(\"\\t%s\", filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Generates and returns the error message when the application is unable to read from the storage file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param filePath The path of the storage file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static String generateReadFromFileErrorMessage(String filePath) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return \"Error reading data from file: \\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + String.format(\"\\t%s\", filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Generates and returns the success message upon adding a new task to the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param task The Task added."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param size The current size of the TaskList."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The success message."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static String generateAddSuccessMessage(String task, int size) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return \"Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + String.format(\"\\t%s\\n\", task)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + String.format(\"Now you have %d tasks in the list.\", size);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Generates and returns the error message upon failure to add a Todo task."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param message The detail message."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static String generateAddTodoErrorMessage(String message) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return message + \"\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \"To add a todo, tell me in this format:\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \"\\ttodo [description]\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Generates and returns the error message upon failure to add a Deadline task."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param message The detail message."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static String generateAddDeadlineErrorMessage(String message) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return message + \"\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \"To add a deadline, tell me in this format:\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \"\\ttodo [description] /by [time]\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \"\\tTime should be in the format of \u0027dd/MM/yyyy HH:mm\u0027\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Generates and returns the error message upon failure to add a Event task."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param message The detail message."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static String generateAddEventErrorMessage(String message) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return message + \"\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \"To add an event, tell me in this format: \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \"\\ttodo [description] /at [time]\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \"\\tTime should be in the format of \u0027dd/MM/yyyy HH:mm\u0027\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Generates and returns the success message upon marking a task as done."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param task The task that is marked as done."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The success message."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static String generateDoneSuccessMessage(String task) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + String.format(\"\\t%s\", task);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Generates and returns the success message upon undoing a mark as as done command."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param task The task that is reverted to not done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The success message."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static String generateNotDoneSuccessMessage(String task) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return \"Noted! I\u0027ve reverted your mark as done command:\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + String.format(\"\\t%s\", task);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Generates and returns the error message upon failure to mark a task as done."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param message The detail message."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static String generateDoneErrorMessage(String message) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return message + \"\\n\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \"To mark a task as done, tell me in this format:\\n\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \"\\tdone [task_index]\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Generates and returns the error message upon failure to parse the user\u0027s input time."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static String generateTimeFormatErrorMessage() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return \"I don\u0027t understand the time entered.\\n\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \"Time should be in the format of \u0027dd/MM/yyyy HH:mm\u0027\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Generates and returns the success message upon deleting a task."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param task The task that is deleted."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param size The current size of the TaskList."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The success message."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static String generateDeleteSuccessMessage(String task, int size) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + String.format(\"\\t%s\\n\", task)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + String.format(\"Now you have %d tasks in the list.\", size);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Generates and returns the error message upon failure to delete a task."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param message The detail message."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static String generateDeleteErrorMessage(String message) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return message + \"\\n\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \"To delete a task, tell me in this format:\\n\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \"\\tdelete [task_index]\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Generates and returns the error message when the user input more or less than one argument for the find command."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static String generateFindErrorMessage() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return \"Only one keyword is allowed for this command.\\n\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \"To find a task, tell me in this format:\\n\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \"\\tfind [keyword]\\n\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \"Only one keyword is allowed at a time.\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Generates and returns the error message when the user\u0027s input task index is not found in the list."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param taskIndex The user\u0027s input task index that is invalid."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static String generateTaskIndexNotFoundMessage(int taskIndex) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return String.format(\"The task of index %d cannot be found in your list.\", taskIndex);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 233
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Signals that an error has occurred in the application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/IncorrectCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Signals that there is an error in the user\u0027s input command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class IncorrectCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Constructs a new IncorrectCommandException with the specified error message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param message The detail error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public IncorrectCommandException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/StorageOperationException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Signals that an error has occurred while performing a storage operation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class StorageOperationException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Constructs a new StorageOperationException with the specified error message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param message The detail error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public StorageOperationException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/TaskIndexOutOfBoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Signals that the task index specified is out of bound for that TaskList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class TaskIndexOutOfBoundException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Constructs a new TaskIndexOutOfBoundException with the specified error message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param message The detail error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public TaskIndexOutOfBoundException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 15
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.exception.StorageOperationException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.generateReadFromFileErrorMessage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.generateWriteToFileErrorMessage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents the storage operation handler of the application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private static final String DEFAULT_STORAGE_FILEPATH \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final File file;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Constructs a new Storage instance with the default storage file path of \"data/duke.txt\"."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        file \u003d new File(DEFAULT_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Saves the specified TaskList to the storage file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param taskList The TaskList to be saved."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @throws StorageOperationException If there are errors converting and/or storing data to the storage file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void saveTaskListToStorage(TaskList taskList) throws StorageOperationException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            fileWriter.write(TaskEncoder.encodeTasksList(taskList));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new StorageOperationException(generateWriteToFileErrorMessage(file.getAbsolutePath()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns the loaded TaskList from the storage file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns an empty TaskList if the storage file does not exist."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The TaskList that is loaded from the storage file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @throws StorageOperationException If there are errors reading and/or converting data from the storage file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public TaskList loadTaskListFromStorage() throws StorageOperationException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            List\u003cString\u003e taskListInString \u003d bufferedReader"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    .lines()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return TaskDecoder.decodeTasksList(taskListInString);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new AssertionError(\"A non-existent file scenario is already handled earlier.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new StorageOperationException(generateReadFromFileErrorMessage(file.getAbsolutePath()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 76
    }
  },
  {
    "path": "src/main/java/duke/storage/TaskDecoder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.exception.StorageOperationException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.INVALID_ENCODING_ERROR_MSG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Decodes the storage file data into a TaskList object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "class TaskDecoder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Decodes the specified list of strings from the storage file into a decoded TaskList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param taskListInString The list of strings from the storage file to be decoded into a TaskList object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The decoded TaskList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @throws StorageOperationException If the list of strings received is in an invalid format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    static TaskList decodeTasksList(List\u003cString\u003e taskListInString) throws StorageOperationException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        List\u003cTask\u003e decodedTasksList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        for (String taskInString : taskListInString) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            decodedTasksList.add(parseTaskFromString(taskInString));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return new TaskList(decodedTasksList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private static Task parseTaskFromString(String encodedTask) throws StorageOperationException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        String[] tokens \u003d encodedTask.split(\",\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            String taskType \u003d tokens[0];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            String description \u003d tokens[2];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            // Create task accordingly."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                task \u003d new Todo(description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                task \u003d new Deadline(description, LocalDateTime.parse(tokens[3]));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                task \u003d new Event(description, LocalDateTime.parse(tokens[3]));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                // Wrong format"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                throw new StorageOperationException(INVALID_ENCODING_ERROR_MSG);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            // Check if task is marked as done (only allow the value of 0 and 1)."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            int doneValue \u003d Integer.parseInt(tokens[1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            if (doneValue \u003d\u003d 1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                task.markAsDone();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            } else if (doneValue !\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                // Wrong format"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                throw new StorageOperationException(INVALID_ENCODING_ERROR_MSG);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (IndexOutOfBoundsException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            // Wrong format"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new StorageOperationException(INVALID_ENCODING_ERROR_MSG);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 74
    }
  },
  {
    "path": "src/main/java/duke/storage/TaskEncoder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Encodes the TaskList object into a string of data to be saved in the storage file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "class TaskEncoder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Encodes the specified TaskList into a string of data that is readable and can be decoded."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param taskList The TaskList to be encoded."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The string of data that represents the encoded TaskList object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    static String encodeTasksList(TaskList taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return taskList.stream()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                .map(Task::serialize)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                .collect(Collectors.joining(\"\\n\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 23
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.DateTimeFormat.OUTPUT_DATE_TIME_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents a Deadline task in the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * A Deadline task consist of a description and a time by which the task should be completed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final LocalDateTime by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Constructs a new Deadline task with the specified description and deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param description The description of the Deadline task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param by          The time by which the Deadline task should be completed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns the serialized form of this Deadline task in the form of a string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return A string that is the serialized form of this Deadline task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public String serialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return String.format(\"D,%d,%s,%s\", isDone ? 1 : 0, description, by);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns the string representation of this Deadline task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The string representation of this Deadline task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(), by.format(OUTPUT_DATE_TIME_FORMAT));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 44
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.DateTimeFormat.OUTPUT_DATE_TIME_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents an Event in the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * An Event is a type of Task which consist of a description and a time at which the Event is taking place."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final LocalDateTime at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Constructs a new Event task with the specified description and time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param description The description of the Event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param at          The time at which the Event is taking place."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Event(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns the serialized form of this Event in the form of a string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return A string that is the serialized form of this Event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public String serialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return String.format(\"E,%d,%s,%s\", isDone ? 1 : 0, description, at);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns the serialized form of this Event in the form of a string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return A string that is the serialized form of this Event."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.toString(), at.format(OUTPUT_DATE_TIME_FORMAT));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 44
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents a Task in the application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * There are 3 types of tasks: Todo, Deadline and Event."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns the status icon of this task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * A tick icon is returned if this task is marked as done. Otherwise, a cross icon is returned."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The status icon of this task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return isDone ? \"\\u2714\" : \"\\u2718\"; // \"return ✔ or ✘ symbols;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Mark this task as done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Mark this task as not done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void markAsNotDone() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns the serialized form of this task in the form of a string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return A string that is the serialized form of this task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public abstract String serialize();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if the description of this task contains the specified keyword."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Otherwise, returns false."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param keyword The keyword to check."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return True if the description of this task contains the specified keyword and false otherwise."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean descriptionContains(String keyword) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return description.contains(keyword);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns the string representation of this task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The string representation of this task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 67
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.common.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.exception.TaskIndexOutOfBoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents the list of Task in the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Constructs an empty TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Constructs a TaskList with the specified list of task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param taskList The list of task to be included in this TaskList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns the current size of this TaskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The current size of this TaskList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns the Task in this TaskList with the specified task index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param taskIndex The index of the Task to be returned."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The Task in the list with the specified index."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @throws TaskIndexOutOfBoundException If the specified task index is not within bound of this TaskList."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Task get(int taskIndex) throws TaskIndexOutOfBoundException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return taskList.get(taskIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new TaskIndexOutOfBoundException(Messages.generateTaskIndexNotFoundMessage(taskIndex + 1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Adds the specified Task into this TaskList."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param task The Task to be added."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Inserts the specified Task into this TaskList at the specified index."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * their indices)."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param index The index at which the specified Task is to be inserted."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param task  The Task to be inserted."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void add(int index, Task task) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        taskList.add(index, task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Removes the Task in this TaskList with the specified task index and then returns it."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param taskIndex The index of the Task to be removed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The Task that is removed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @throws TaskIndexOutOfBoundException If the specified task index is not within bound of this TaskList."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Task remove(int taskIndex) throws TaskIndexOutOfBoundException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return taskList.remove(taskIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new TaskIndexOutOfBoundException(Messages.generateTaskIndexNotFoundMessage(taskIndex + 1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns a Stream object containing Tasks in this TaskList."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return a Stream object containing Tasks in this TaskList."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Stream\u003cTask\u003e stream() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return taskList.stream();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 100
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents a Todo task in the application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * A Todo task consist of a description."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Constructs a new Todo task with the specified description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param description The description of the Todo task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns the serialized form of this Todo task in the form of a string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return A string that is the serialized form of this Todo task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public String serialize() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return String.format(\"T,%d,%s,\", isDone ? 1 : 0, description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns the string representation of this Todo task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return The string representation of this Todo task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return String.format(\"[T]%s\", super.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 36
    }
  },
  {
    "path": "src/main/java/duke/ui/DukeDialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the duke and a label containing text"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * from the speaker."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "class DukeDialogBox extends HBox {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private Circle avatar;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Initialise the dialog box of duke with the specified text to be displayed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param text The text to be displayed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    DukeDialogBox(String text) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DukeDialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        avatar.setFill("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                new ImagePattern(new Image(getClass().getResourceAsStream(\"/images/DukeAvatar.png\"))));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 42
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.exception.IncorrectCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.exception.StorageOperationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static duke.common.Messages.WELCOME_MSG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Set the duke application instance and the window instance of this application."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param d The duke instance."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        showMessagesToUser(WELCOME_MSG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            duke.initStorage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (StorageOperationException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            showMessagesToUser(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            d.enterStorageErrorMode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void showMessagesToUser(String message) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        dialogContainer.getChildren().add(new DukeDialogBox(message));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        dialogContainer.getChildren().add(new UserDialogBox(input));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        showMessagesToUser(getResponse(input));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private String getResponse(String input) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return duke.parseAndExecuteSingleCommand(input);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (StorageOperationException | IncorrectCommandException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 72
    }
  },
  {
    "path": "src/main/java/duke/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class UiManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Sets up and starts the GUI for the Duke application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param primaryStage The primary stage of the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param duke The Duke instance to run."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void start(Stage primaryStage, Duke duke) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(getClass().getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            primaryStage.getIcons().add(new Image(getClass().getResourceAsStream(\"/images/icon.png\")));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            primaryStage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            primaryStage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            scene.getStylesheets().add(getClass().getResource(\"/style/index.css\").toExternalForm());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            primaryStage.setResizable(false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            primaryStage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 34
    }
  },
  {
    "path": "src/main/java/duke/ui/UserDialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * This control represents a user dialog box consisting of a label containing text from the speaker."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "class UserDialogBox extends HBox {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Initialise the dialog box of duke with the specified text and image to be displayed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param text The text to be displayed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    UserDialogBox(String text) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/UserDialogBox.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 34
    }
  },
  {
    "path": "src/main/resources/view/DukeDialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003cfx:root fx:id\u003d\"dukeDialogBox\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "         type\u003d\"HBox\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    \u003cStackPane\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        \u003cCircle fx:id\u003d\"avatar\" fill\u003d\"#c4e0f9\" radius\u003d\"50.0\" stroke\u003d\"#475672\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"3.0\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 18
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"30.0\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "               AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"550.0\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"385.0\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    \u003cLabel fx:id\u003d\"helpText\" layoutX\u003d\"14.0\" layoutY\u003d\"549.0\" prefHeight\u003d\"20.0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "           text\u003d\"Type your command below and press enter...\" AnchorPane.bottomAnchor\u003d\"31.0\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "           AnchorPane.leftAnchor\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 20
    }
  },
  {
    "path": "src/main/resources/view/UserDialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.paint.RadialGradient?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.paint.Stop?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003cfx:root fx:id\u003d\"userDialogBox\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "         maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "         type\u003d\"HBox\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    \u003cStackPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        \u003cCircle radius\u003d\"6.0\" stroke\u003d\"#ffffff00\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            \u003cfill\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u003cRadialGradient centerX\u003d\"0.5\" centerY\u003d\"0.5\" radius\u003d\"0.5\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    \u003cstops\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                        \u003cStop color\u003d\"#f40076\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                        \u003cStop color\u003d\"#ffffff00\" offset\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    \u003c/stops\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u003c/RadialGradient\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            \u003c/fill\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        \u003c/Circle\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 30
    }
  },
  {
    "path": "src/test/java/duke/task/TestDeadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class TestDeadline {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void testSerialize() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(\"D,0,homework,2020-02-06T23:59\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                new Deadline(\"homework\", LocalDateTime.parse(\"2020-02-06T23:59\")).serialize());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"group assignment\", LocalDateTime.parse(\"2020-02-23T23:59\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        deadline.markAsDone();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(\"D,1,group assignment,2020-02-23T23:59\", deadline.serialize());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(\"[D][✘] homework (by: 06 Feb 2020, 11:59PM)\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                new Deadline(\"homework\", LocalDateTime.parse(\"2020-02-06T23:59\")).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"group assignment\", LocalDateTime.parse(\"2020-02-23T23:59\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        deadline.markAsDone();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(\"[D][✔] group assignment (by: 23 Feb 2020, 11:59PM)\", deadline.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 29
    }
  },
  {
    "path": "src/test/java/duke/task/TestEvent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class TestEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void testSerialize() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(\"E,0,project meeting,2020-06-06T17:00\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                new Event(\"project meeting\", LocalDateTime.parse(\"2020-06-06T17:00\")).serialize());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Event event \u003d new Event(\"interview\", LocalDateTime.parse(\"2020-08-08T15:00\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        event.markAsDone();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(\"E,1,interview,2020-08-08T15:00\", event.serialize());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(\"[E][✘] project meeting (at: 06 Jun 2020, 05:00PM)\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                new Event(\"project meeting\", LocalDateTime.parse(\"2020-06-06T17:00\")).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Event event \u003d new Event(\"interview\", LocalDateTime.parse(\"2020-08-08T15:00\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        event.markAsDone();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(\"[E][✔] interview (at: 08 Aug 2020, 03:00PM)\", event.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 29
    }
  },
  {
    "path": "src/test/java/duke/task/TestTaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class TestTaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void testSize() throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(0, taskList.size());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        taskList.add(new Todo(\"dummy todo\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(1, taskList.size());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        taskList \u003d new TaskList(IntStream.range(0, 20)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                .mapToObj(x -\u003e new Todo(\"dummy todo\"))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(20, taskList.size());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        taskList.remove(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(19, taskList.size());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void testGet_validIndex_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Todo todo1 \u003d new Todo(\"todo 1\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Todo todo2 \u003d new Todo(\"todo 2\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Todo todo3 \u003d new Todo(\"todo 3\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        taskList.add(todo1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        taskList.add(todo2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        taskList.add(todo3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(todo1, taskList.get(0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(todo2, taskList.get(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(todo3, taskList.get(2));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void testGet_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Todo todo1 \u003d new Todo(\"todo 1\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Todo todo2 \u003d new Todo(\"todo 2\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        taskList.add(todo1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        taskList.add(todo2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            assertNull(taskList.get(2));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            assertEquals(\"The task of index 3 cannot be found in your list.\", e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void testRemove_validIndex_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Todo todo1 \u003d new Todo(\"todo 1\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Todo todo2 \u003d new Todo(\"todo 2\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Todo todo3 \u003d new Todo(\"todo 3\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        taskList.add(todo1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        taskList.add(todo2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        taskList.add(todo3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(todo2, taskList.remove(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(todo3, taskList.remove(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void testRemove_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Todo todo1 \u003d new Todo(\"todo 1\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Todo todo2 \u003d new Todo(\"todo 2\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        taskList.add(todo1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        taskList.add(todo2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            assertNull(taskList.remove(2));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            assertEquals(\"The task of index 3 cannot be found in your list.\", e.getMessage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void testStream() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        List\u003cTask\u003e tasks \u003d  IntStream.range(0, 4)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                .mapToObj(x -\u003e new Todo(\"dummy todo\"))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertArrayEquals(tasks.toArray(), new TaskList(tasks).stream().toArray());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 96
    }
  },
  {
    "path": "src/test/java/duke/task/TestTodo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class TestTodo {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void testSerialize() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(\"T,0,read books,\", new Todo(\"read books\").serialize());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Todo todo \u003d new Todo(\"borrow books\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(\"T,1,borrow books,\", todo.serialize());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(\"[T][✘] read books\", new Todo(\"read books\").toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Todo todo \u003d new Todo(\"borrow books\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(\"[T][✔] borrow books\", todo.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 25
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t  ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Hello! I\u0027m Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t What can I do for you?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t There are currently no tasks in your list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Add a task by using one of the following commands: "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   todo [description]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   deadline [description] /by [time]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   event [description] /at [time]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Time should be in the format of \u0027dd/MM/yyyy HH:mm\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   [T][✘] read book"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   [D][✘] return book (by: 06 Jun 2020, 05:00PM)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   [E][✘] project meeting (at: 06 Aug 2020, 02:00PM)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   [T][✘] exercise"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Here are the tasks in your list: "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t 1.[T][✘] read book"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t 2.[D][✘] return book (by: 06 Jun 2020, 05:00PM)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t 3.[E][✘] project meeting (at: 06 Aug 2020, 02:00PM)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t 4.[T][✘] exercise"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Nice! I\u0027ve marked this task as done: "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   [T][✓] read book"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Here are the tasks in your list: "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t 1.[T][✓] read book"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t 2.[D][✘] return book (by: 06 Jun 2020, 05:00PM)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t 3.[E][✘] project meeting (at: 06 Aug 2020, 02:00PM)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t 4.[T][✘] exercise"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Noted. I\u0027ve removed this task: "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   [T][✘] exercise"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Here are the tasks in your list: "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t 1.[T][✓] read book"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t 2.[D][✘] return book (by: 06 Jun 2020, 05:00PM)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t 3.[E][✘] project meeting (at: 06 Aug 2020, 02:00PM)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   [T][✘] join sports club"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Nice! I\u0027ve marked this task as done: "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   [D][✓] return book (by: 06 Jun 2020, 05:00PM)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Noted. I\u0027ve removed this task: "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   [E][✘] project meeting (at: 06 Aug 2020, 02:00PM)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Here are the tasks in your list: "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t 1.[T][✓] read book"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t 2.[D][✓] return book (by: 06 Jun 2020, 05:00PM)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t 3.[T][✘] join sports club"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t ☹ OOPS!!!"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t I\u0027m sorry, but I don\u0027t know what that means."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t ☹ OOPS!!!"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t I\u0027m sorry, but I don\u0027t know what that means."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t ☹ OOPS!!!"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t I\u0027m sorry, but I don\u0027t know what that means."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t ☹ OOPS!!!"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t You forgot to include a description."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t To add a todo, tell me in this format: "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   todo [description]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t ☹ OOPS!!!"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t You forgot to include a description."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t To add a deadline, tell me in this format: "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   todo [description] /by [time]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   Time should be in the format of \u0027dd/MM/yyyy HH:mm\u0027"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t ☹ OOPS!!!"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t You forgot to include a description."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t To add a deadline, tell me in this format: "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   todo [description] /by [time]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   Time should be in the format of \u0027dd/MM/yyyy HH:mm\u0027"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t ☹ OOPS!!!"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t You forgot to include a time."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t To add a deadline, tell me in this format: "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   todo [description] /by [time]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   Time should be in the format of \u0027dd/MM/yyyy HH:mm\u0027"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t ☹ OOPS!!!"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t You forgot to include a time."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t To add a deadline, tell me in this format: "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   todo [description] /by [time]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   Time should be in the format of \u0027dd/MM/yyyy HH:mm\u0027"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t ☹ OOPS!!!"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t You forgot to include a description."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t To add an event, tell me in this format: "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   todo [description] /at [time]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   Time should be in the format of \u0027dd/MM/yyyy HH:mm\u0027"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t ☹ OOPS!!!"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t You forgot to include a description."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t To add an event, tell me in this format: "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   todo [description] /at [time]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   Time should be in the format of \u0027dd/MM/yyyy HH:mm\u0027"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t ☹ OOPS!!!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t You forgot to include a time."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t To add an event, tell me in this format: "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   todo [description] /at [time]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   Time should be in the format of \u0027dd/MM/yyyy HH:mm\u0027"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t ☹ OOPS!!!"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t You forgot to include a time."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t To add an event, tell me in this format: "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   todo [description] /at [time]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   Time should be in the format of \u0027dd/MM/yyyy HH:mm\u0027"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t ☹ OOPS!!!"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t I don\u0027t understand the time entered."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Time should be in the format of \u0027dd/MM/yyyy HH:mm\u0027"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t ☹ OOPS!!!"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t The task of index -1 cannot be found in your list."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t ☹ OOPS!!!"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t The task of index 1000 cannot be found in your list."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t ☹ OOPS!!!"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t This command should only have a valid task index as the argument."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t To mark a task as done, tell me in this format: "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   done [task_index]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t ☹ OOPS!!!"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t This command should only have a valid task index as the argument."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t To mark a task as done, tell me in this format: "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   done [task_index]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t ☹ OOPS!!!"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t This command should only have a valid task index as the argument."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t To mark a task as done, tell me in this format: "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   done [task_index]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t ☹ OOPS!!!"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t The task of index -1 cannot be found in your list."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t ☹ OOPS!!!"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t The task of index 1000 cannot be found in your list."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t ☹ OOPS!!!"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t This command should only have a valid task index as the argument."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t To delete a task, tell me in this format: "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   delete [task_index]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t ☹ OOPS!!!"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t This command should only have a valid task index as the argument."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t To delete a task, tell me in this format: "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   delete [task_index]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t ☹ OOPS!!!"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t This command should only have a valid task index as the argument."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t To delete a task, tell me in this format: "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t   delete [task_index]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Here are the tasks in your list: "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t 1.[T][✓] read book"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t 2.[D][✓] return book (by: 06 Jun 2020, 05:00PM)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t 3.[T][✘] join sports club"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zenatrick": 267
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "deadline return book /by 6/6/2020 17:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "event project meeting /at 6/8/2020 14:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "todo exercise"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "blah"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "list all"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "bye bye"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "todo"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "deadline /by 3/8/2020 21:30"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "deadline project"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "deadline project /at 3/8/2020 21:30"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "event"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "event /at 23/5/2020 17:00"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "event interview"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "event interview /by 23 Aug 2020 5pm"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "event interview /at 23 Aug 2020 5pm"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "done 1000"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "done 0.1"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "done 1 2 3"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "done one"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "delete -1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "delete 1000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "delete 0.1"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "delete 1 2 3"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "delete one"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 39
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "del data\\duke.txt"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "del ACTUAL.txt"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Duke.java ..\\src\\main\\java\\duke\\command\\*.java ..\\src\\main\\java\\duke\\common\\*.java ..\\src\\main\\java\\duke\\exception\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\storage\\*.java ..\\src\\main\\java\\duke\\ui\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin duke/Duke \u003c input.txt \u003e ACTUAL.txt"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "FC ACTUAL.txt EXPECTED.txt"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 22
    }
  }
]
