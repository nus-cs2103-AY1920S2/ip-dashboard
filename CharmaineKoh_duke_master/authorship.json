[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "test {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 29,
      "-": 19
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "# Duke User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "### Friendlier Syntax"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Create shortcuts for commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "### Help"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Fetch the command list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "### Tagging"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Tag tasks using the command tag."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "### `Alias` - Create shortcut for commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "[alias] [command]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "alias b bye"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Alias added."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "### `Bye` - Exits programme."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Programme closes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "bye"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Programme closes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "### `Clear` - Deletes all tasks in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "clear"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "List cleared."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "### `Deadline` - Creates task with a deadline."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "[description] [date] [tags]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "deadline iP /2020-02-19"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "[D] IP (by Feb 19 2020)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "### `Delete` - deletes task with task number"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "[task number]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Noted. I\u0027ve removed this task"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "### `Done` - marks task with task number as done."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "[task number]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Noted. I\u0027ve marked this task as done."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "  "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "### `Event` - Creates task that is an event."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "[description] [date] [tags]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "event CS2103T tutorial /2020-02-20"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "[E] CS2103T tutorial (at Feb 20 2020)    "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "      "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "### `Find` - Returns list of tasks with keyword in name."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "[keyword]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "keyword cs2103t"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "[E] CS2103T tutorial (at Feb 20 2020)               "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "           "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "### `Tag` - Returns list of tasks containing tag."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "[tag]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "tag cs2103T"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "[E] CS2103T tutorial (at Feb 20 2020)            "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "          "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "### `Todo` - Creates task."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " [description] [tags]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " Example of usage: "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " todo read notes"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " [T] read notes "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "           "
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 95,
      "-": 18
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.effect.DropShadow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            dialog.setMinHeight(Region.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 65
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Duke;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            duke.start();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 30
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Messages;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.LogicManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private LogicManager logicManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        scrollPane.setFitToHeight(true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        logicManager \u003d d.getLogicManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setLogicManager(LogicManager logicManager) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.logicManager \u003d logicManager;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                DialogBox.getDukeDialog(Messages.START, dukeImage)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void handleExit() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        duke.end();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        dialogContainer.getChildren().clear();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void help() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                DialogBox.getDukeDialog(Messages.HELP, dukeImage)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String response \u003d getResponse(input, duke);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (response.equals(ExitCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            handleExit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private String getResponse(String input, Duke duke) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            CommandResult result \u003d logicManager.execute(input);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (result.isExit()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return result.getFeedbackToUser();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 105
    }
  },
  {
    "path": "src/main/java/commons/AppUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 40
    }
  },
  {
    "path": "src/main/java/commons/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.LogicManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * The project is a product named Duke, a Personal Assistant Chatbot"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * that helps a person to keep track of various things."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private LogicManager logicManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Starts the chat bot by first retrieving saved file from hard disk then"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * obtaining input from the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        taskList \u003d storage.readTaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        logicManager \u003d new LogicManager(this, storage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Saves the task list into the storage file when user terminates the programme."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void end() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        storage.saveTaskList(taskList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        storage.saveFile(logicManager.getCommandSyntax());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return the task list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the controller."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return the controller."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public LogicManager getLogicManager() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return logicManager;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 57
    }
  },
  {
    "path": "src/main/java/commons/Index.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 46
    }
  },
  {
    "path": "src/main/java/commons/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Stores magic strings as constants to be returned as output."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_TASK_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String LOGO \u003d \" ___           _\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"|  _  \\\\ _    _| |  _  __\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"| |  |  | |  | | |/ /   _ \\\\\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"| |_|  | |_| |   \u003c    __/\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"|____/ \\\\__,|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String START \u003d \"Hello from\\n\" + LOGO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String HELP \u003d \"alias: creates shortcut\\n\\t[alias] [command]\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"bye: exits the programme\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"clear: clears list\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"deadline: creates task with a deadline \\n\\t[description] [date] [tags]\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"delete: deletes task with task number\\n\\t[task number\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"done: marks task with task number as done\\n\\t[task number]\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"event: creates task that is an event \\n\\t[description] [date] [tags]\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"find: returns list of tasks with keyword in name\\n\\t[keyword]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"tag: returns list of tasks containing tag\\n\\t [tag]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"todo: creates task \\n\\t[description] [tags]\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns information on the number of tasks in the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return the string of the total number of tasks in the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static String printTotalTasks(int totalTasks) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (totalTasks \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return \"\\nNow you have no tasks in the list.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } else if (totalTasks \u003d\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return String.format(\"\\nNow you have %d task in the list.\", totalTasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return String.format(\"\\nNow you have %d tasks in the list.\", totalTasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 44
    }
  },
  {
    "path": "src/main/java/commons/StringUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static commons.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String[] wordsInPreppedSentence \u003d sentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 69
    }
  },
  {
    "path": "src/main/java/commons/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class DukeException extends IllegalArgumentException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public DukeException(String s) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 12
    }
  },
  {
    "path": "src/main/java/commons/exceptions/IllegalValueException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param cause   of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 21
    }
  },
  {
    "path": "src/main/java/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException, ParserException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the Task List."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    //ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    //ObservableList\u003cTask\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    //Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    //GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    //void setGuiSettings(GuiSettings guiSettings)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 46
    }
  },
  {
    "path": "src/main/java/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.parser.CommandSyntax;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.parser.DukeParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    //private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Duke duke;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final DukeParser dukeParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private CommandSyntax commandSyntax;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Constructor for the logic manager object which controls commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public LogicManager(Duke duke, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        commandSyntax \u003d storage.readAlias();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        dukeParser \u003d new DukeParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandSyntax getCommandSyntax() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return commandSyntax;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setCommandSyntax(CommandSyntax commandSyntax) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.commandSyntax \u003d commandSyntax;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses user input and determine specified instructions to execute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param commandText input received from user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return output to be displayed to user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParserException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        //logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Command command \u003d dukeParser.parseCommand(commandText, commandSyntax);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        commandResult \u003d command.execute(duke);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        storage.saveTaskList(duke.getTaskList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    //try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        /*catch (IOException ioe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return taskList.getTaskList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return taskList.getFilteredPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return taskList.getTaskListFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return taskList.getGuiSettings();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        taskList.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 93
    }
  },
  {
    "path": "src/main/java/logic/command/AliasCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.parser.CommandSyntax;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.parser.FriendlierSyntax;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class AliasCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"alias\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Alias added.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an alias for command.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final FriendlierSyntax friendlierSyntax;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public AliasCommand(FriendlierSyntax friendlierSyntax) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.friendlierSyntax \u003d friendlierSyntax;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult execute(Duke duke) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(duke);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        CommandSyntax commandSyntax \u003d duke.getLogicManager().getCommandSyntax();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!commandSyntax.isAliasUnique(friendlierSyntax.getAlias())) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new CommandException(\"Alias already in used.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } else if (!commandSyntax.isDefaultCommand(friendlierSyntax.getCommand())) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new CommandException(\"No such command found!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        commandSyntax.addFriendlierSyntax(friendlierSyntax);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 33
    }
  },
  {
    "path": "src/main/java/logic/command/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ClearCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Task list has been cleared!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult execute(Duke duke) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(duke);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        duke.getTaskList().clearAll();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 17
    }
  },
  {
    "path": "src/main/java/logic/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    CommandResult execute(Duke duke) throws CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 7
    }
  },
  {
    "path": "src/main/java/logic/command/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 14
    }
  },
  {
    "path": "src/main/java/logic/command/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 49
    }
  },
  {
    "path": "src/main/java/logic/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class DeadlineCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the task list. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"deadline \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE]\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_NAME + \"iP\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_DATE + \"2020-03-02\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_TAG + \"CS2103T\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_TAG + \"Submission\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: \\n\\t%1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Task deadlineToAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Creates an DeadlineCommand to add the specified {@code Deadline}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public DeadlineCommand(Task task) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        deadlineToAdd \u003d task;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult execute(Duke duke) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(duke);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        TaskList taskList \u003d duke.getTaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        taskList.addTask(deadlineToAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        int totalTasks \u003d taskList.getTotalTasks();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, deadlineToAdd)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                + Messages.printTotalTasks(totalTasks));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 51
    }
  },
  {
    "path": "src/main/java/logic/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \": Deletes the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Noted. I\u0027ve removed this task:\" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \"\\n\\t\\t%1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult execute(Duke duke) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(duke);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        TaskList taskList \u003d duke.getTaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        taskList.deleteTask(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 42
    }
  },
  {
    "path": "src/main/java/logic/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \": Marks the task identified by the index number used in the displayed task list as done.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_DONE_TASK_SUCCESS \u003d \"\\\"Nice! I\u0027ve marked this task as done:\" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \"\\n\\tTask marked as done %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public DoneCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult execute(Duke duke) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(duke);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        TaskList taskList \u003d duke.getTaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Task taskMarkedAsDone \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        taskList.markAsDone(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DONE_TASK_SUCCESS, taskMarkedAsDone));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 43
    }
  },
  {
    "path": "src/main/java/logic/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class EventCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the task list. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE]\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_NAME + \"iP\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_DATE + \"2020-03-02\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_TAG + \"CS2103T\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_TAG + \"Submission\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: \\n\\t%1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Task eventToAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Creates an EventCommand to add the specified {@code Event}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public EventCommand(Task task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        eventToAdd \u003d task;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult execute(Duke duke) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(duke);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        TaskList taskList \u003d duke.getTaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        taskList.addTask(eventToAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        int totalTasks \u003d taskList.getTotalTasks();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, eventToAdd)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                + Messages.printTotalTasks(totalTasks));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 51
    }
  },
  {
    "path": "src/main/java/logic/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Bye. Hope to see you again soon!\\n\" +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \"Exiting duke as requested...\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult execute(Duke duke) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 16
    }
  },
  {
    "path": "src/main/java/logic/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.awt.event.KeyEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here are the tasks in your list containing %s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String NO_TASKS \u003d \"No tasks with this keyword found :o\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose name contain any of \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" cs2103t cs2101\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult execute(Duke duke) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(duke);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        TaskList taskList \u003d duke.getTaskList().findTaskContainingKeyword(keyword);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new CommandResult(NO_TASKS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, keyword) +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                taskList.printList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 37
    }
  },
  {
    "path": "src/main/java/logic/command/HelloCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class HelloCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"hello\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Hello! I\u0027m Duke\\n\\tWhat can I do for you?\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult execute(Duke duke) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(duke);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 16
    }
  },
  {
    "path": "src/main/java/logic/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "//to fix"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class HelpCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult execute(Duke duke) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(duke);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String help \u003d Messages.HELP;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 23
    }
  },
  {
    "path": "src/main/java/logic/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here are the tasks in your list\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String EMPTY_LIST \u003d \"List is empty.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult execute(Duke duke) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(duke);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (duke.getTaskList().isEmpty()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new CommandResult(EMPTY_LIST);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + duke.getTaskList().printList());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 21
    }
  },
  {
    "path": "src/main/java/logic/command/TagCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class TagCommand implements Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here are the tasks in your list containing %s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose name contain any of \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"the specified tag (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Parameters: TAGS [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" cs2103t cs2101\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String NO_TAGS \u003d \"No tasks with this tag found :o\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final String tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public TagCommand(String tag) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult execute(Duke duke) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        TaskList taskList \u003d duke.getTaskList().findTaskContainingTag(tag);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new CommandResult(NO_TAGS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, tag) +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                taskList.printList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 33
    }
  },
  {
    "path": "src/main/java/logic/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class TodoCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"todo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a todo task to the task list. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"todo \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_NAME + \"iP\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_TAG + \"CS2103T\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_TAG + \"Submission\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: \\n\\t%1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Todo todoToAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Creates an TodoCommand to add the specified {@code Todo}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public TodoCommand(Todo todo) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(todo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        todoToAdd \u003d todo;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult execute(Duke duke) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(duke);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        TaskList taskList \u003d duke.getTaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        taskList.addTask(todoToAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        int totalTasks \u003d taskList.getTotalTasks();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, todoToAdd)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                + Messages.printTotalTasks(totalTasks));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 48
    }
  },
  {
    "path": "src/main/java/logic/parser/AliasCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.AliasCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static commons.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static logic.parser.CliSyntax.PREFIX_ALIAS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static logic.parser.CliSyntax.PREFIX_COMMAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class AliasCommandParser implements Parser\u003cAliasCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AliasCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * and returns an AliasCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws ParserException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public AliasCommand parse(String args) throws ParserException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        //);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ALIAS, PREFIX_COMMAND);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ALIAS, PREFIX_COMMAND)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParserException(\"Pawdon me, I think you furgot to include the alias and command\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    + String.format(MESSAGE_INVALID_COMMAND_FORMAT, AliasCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String alias \u003d ParserUtil.parseAlias(argMultimap.getValue(PREFIX_ALIAS).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String command \u003d ParserUtil.parseCommand(argMultimap.getValue(PREFIX_COMMAND).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        FriendlierSyntax syntax \u003d new FriendlierSyntax(alias, command);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new AliasCommand(syntax);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 42
    }
  },
  {
    "path": "src/main/java/logic/parser/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 64
    }
  },
  {
    "path": "src/main/java/logic/parser/ArgumentTokenizer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 148
    }
  },
  {
    "path": "src/main/java/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final Prefix PREFIX_ALIAS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final Prefix PREFIX_COMMAND \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 14
    }
  },
  {
    "path": "src/main/java/logic/parser/CommandSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class CommandSyntax {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public HashMap\u003cString, String\u003e syntax \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public HashSet\u003cString\u003e defaultCommands \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Instantiates the list of friendlier syntax which includes shortcuts for each command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandSyntax() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String[] commandList \u003d {\"alias\", \"clear\", \"deadline\", \"delete\", \"done\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \"event\", \"bye\", \"find\", \"hello\", \"help\", \"list\", \"tag\", \"todo\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        };"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        defaultCommands.addAll(Arrays.asList(commandList));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        syntax.put(\"a\", \"alias\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        syntax.put(\"b\", \"bye\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        syntax.put(\"l\", \"list\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        syntax.put(\"dlt\", \"delete\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        syntax.put(\"dn\", \"done\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        syntax.put(\"c\", \"clear\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        syntax.put(\"f\", \"find\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        syntax.put(\"t\", \"todo\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        syntax.put(\"ddln\", \"deadline\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        syntax.put(\"e\", \"event\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the list of syntax mappings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return list of friendlier syntax."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public HashMap\u003cString, String\u003e getSyntax() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return this.syntax;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean isDefaultCommand(String command) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return defaultCommands.contains(command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Checks the hashmap for the command that the alias corresponds to."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param command alias input by the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return the command which the alias corresponds to."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String lookUpCommand(String command) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (isDefaultCommand(command)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } else if (syntax.get(command) !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return syntax.get(command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return \"error\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean isAliasUnique(String alias) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return !syntax.containsKey(alias);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Adds alias and corresponding command into mappings."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param friendlierSyntax friendlierSyntax."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void addFriendlierSyntax(FriendlierSyntax friendlierSyntax) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        syntax.put(friendlierSyntax.getAlias(), friendlierSyntax.getCommand());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 73
    }
  },
  {
    "path": "src/main/java/logic/parser/DeadlineCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.DeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static commons.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class DeadlineCommandParser implements Parser\u003cDeadlineCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeadlineCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * and returns an DeadlineCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws ParserException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public DeadlineCommand parse(String args) throws ParserException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DATE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParserException(String.format(\"Pawdon me, I think you furgot to include the description or date\" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    \" of the deadline.\" + MESSAGE_INVALID_COMMAND_FORMAT, DeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Deadline deadlineTask \u003d new Deadline(name, date, tagList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new DeadlineCommand(deadlineTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 52
    }
  },
  {
    "path": "src/main/java/logic/parser/DeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static commons.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws ParserException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public DeleteCommand parse(String args) throws ParserException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (ParserException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParserException(\"Pawdon me, I think you furgot to include the task number.\" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 30
    }
  },
  {
    "path": "src/main/java/logic/parser/DoneCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static commons.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * and returns a DoneCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws ParserException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public DoneCommand parse(String args) throws ParserException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (ParserException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParserException(\"Pawdon me, I think you furgot to include the task number.\" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        //\"☹ OOPS!!! There is no such task.\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 28
    }
  },
  {
    "path": "src/main/java/logic/parser/DukeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.AliasCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.ClearCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.DeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.EventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.HelloCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.TagCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.TodoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static commons.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static commons.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Parses user input and instruct corresponding classes to perform specified tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class DukeParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    //private FriendlierSyntax friendlierSyntax;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param userInput     full user input string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param commandSyntax to check for alias."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws ParserException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Command parseCommand(String userInput, CommandSyntax commandSyntax) throws ParserException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParserException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        switch (commandSyntax.lookUpCommand(commandWord.toLowerCase())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case DeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                return new DeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case EventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                return new EventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case TodoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                return new TodoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                return new ClearCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case TagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                return new TagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case AliasCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                return new AliasCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case HelloCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                return new HelloCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                throw new ParserException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 97
    }
  },
  {
    "path": "src/main/java/logic/parser/EventCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.EventCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static commons.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class EventCommandParser implements Parser\u003cEventCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EventCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * and returns an EventCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws ParserException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public EventCommand parse(String args) throws ParserException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DATE)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParserException(\"Pawdon me, I think you furgot to include the description or date of the event.\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    + String.format(MESSAGE_INVALID_COMMAND_FORMAT, EventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Event eventTask \u003d new Event(name, date, tagList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new EventCommand(eventTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 51
    }
  },
  {
    "path": "src/main/java/logic/parser/FindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.FindCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static commons.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws ParserException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public FindCommand parse(String args) throws ParserException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParserException("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    String.format(\"Pawdon me, I think you furgot to include the keyword.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            + MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        //String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new FindCommand(trimmedArgs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 25
    }
  },
  {
    "path": "src/main/java/logic/parser/FriendlierSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static commons.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Represents a Tasks\u0027s Alias in the taskList."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFriendlierSyntax(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class FriendlierSyntax {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \"Alias should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public final String alias;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public final String command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Constructs a {@code Alias}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param alias A valid Alias."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public FriendlierSyntax(String alias, String command) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(alias);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        checkArgument(isValidFriendlierSyntax(alias), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.alias \u003d alias;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String getAlias() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return alias;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static boolean isValidAlias(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static boolean isValidCommand(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns true if a given string is a valid Alias."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static boolean isValidFriendlierSyntax(String test) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return alias;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                || (other instanceof FriendlierSyntax // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u0026\u0026 alias.equals(((FriendlierSyntax) other).alias)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return alias.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 76
    }
  },
  {
    "path": "src/main/java/logic/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public interface Parser\u003cCommand\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Command parse(String userInput) throws ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 7
    }
  },
  {
    "path": "src/main/java/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.StringUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    //DukeException(\"Pawdon me, I think you furgot to include the task number.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws ParserException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParserException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParserException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws ParserException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static Name parseName(String name) throws ParserException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParserException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static String parseAlias(String alias) throws ParserException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(alias);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String trimmedAlias \u003d alias.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        boolean t \u003d FriendlierSyntax.isValidAlias(trimmedAlias);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!FriendlierSyntax.isValidAlias(trimmedAlias)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParserException(FriendlierSyntax.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return trimmedAlias;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static String parseCommand(String command) throws ParserException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String trimmedCommand \u003d command.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!FriendlierSyntax.isValidCommand(trimmedCommand)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParserException(FriendlierSyntax.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return trimmedCommand;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses a {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws ParserException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static Date parseDate(String date) throws ParserException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParserException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws ParserException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static Tag parseTag(String tag) throws ParserException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParserException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParserException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 119
    }
  },
  {
    "path": "src/main/java/logic/parser/Prefix.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 40
    }
  },
  {
    "path": "src/main/java/logic/parser/TagCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.FindCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.TagCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static commons.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Parses input arguments and creates a new TagCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class TagCommandParser implements Parser\u003cTagCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TagCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * and returns a TagCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws ParserException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public TagCommand parse(String args) throws ParserException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParserException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    String.format(\"Pawdon me, I think you furgot to include the tag.\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                                    + MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        //String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new TagCommand(trimmedArgs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 31
    }
  },
  {
    "path": "src/main/java/logic/parser/TodoCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.command.TodoCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static commons.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class TodoCommandParser implements Parser\u003cTodoCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TodoCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws ParserException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public TodoCommand parse(String args) throws ParserException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParserException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Todo todoTask \u003d new Todo(name, tagList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new TodoCommand(todoTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 46
    }
  },
  {
    "path": "src/main/java/logic/parser/exceptions/ParserException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ParserException extends IllegalValueException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ParserException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ParserException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 13
    }
  },
  {
    "path": "src/main/java/storage/RuntimeTypeAdapterFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.JsonParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.JsonPrimitive;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.TypeAdapter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.TypeAdapterFactory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.internal.Streams;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.stream.JsonWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Adapts values whose runtime type may differ from their declaration type. This"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * is necessary when a field\u0027s type is not the same type that GSON should create"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * when deserializing that field. For example, consider these types:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   abstract class Shape {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     int x;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     int y;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   class Circle extends Shape {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     int radius;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   class Rectangle extends Shape {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     int width;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     int height;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   class Diamond extends Shape {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     int width;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     int height;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   class Drawing {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     Shape bottomShape;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     Shape topShape;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * \u003cp\u003eWithout additional type information, the serialized JSON is ambiguous. Is"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * the bottom shape in this drawing a rectangle or a diamond? \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     \"bottomShape\": {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"width\": 10,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"height\": 5,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"x\": 0,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"y\": 0"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     },"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     \"topShape\": {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"radius\": 2,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"x\": 4,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"y\": 1"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   }}\u003c/pre\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * This class addresses this problem by adding type information to the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * serialized JSON and honoring that type information when the JSON is"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * deserialized: \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     \"bottomShape\": {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"type\": \"Diamond\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"width\": 10,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"height\": 5,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"x\": 0,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"y\": 0"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     },"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     \"topShape\": {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"type\": \"Circle\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"radius\": 2,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"x\": 4,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"y\": 1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   }}\u003c/pre\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Both the type field name ({@code \"type\"}) and the type labels ({@code"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * \"Rectangle\"}) are configurable."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * \u003ch3\u003eRegistering Types\u003c/h3\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Create a {@code RuntimeTypeAdapterFactory} by passing the base type and type field"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * name to the {@link #of} factory method. If you don\u0027t supply an explicit type"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * field name, {@code \"type\"} will be used. \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   RuntimeTypeAdapterFactory\u003cShape\u003e shapeAdapterFactory"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \u003d RuntimeTypeAdapterFactory.of(Shape.class, \"type\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Next register all of your subtypes. Every subtype must be explicitly"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * registered. This protects your application from injection attacks. If you"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * don\u0027t supply an explicit type label, the type\u0027s simple name will be used."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Rectangle.class, \"Rectangle\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Circle.class, \"Circle\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Diamond.class, \"Diamond\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Finally, register the type adapter factory in your application\u0027s GSON builder:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   Gson gson \u003d new GsonBuilder()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       .registerTypeAdapterFactory(shapeAdapterFactory)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       .create();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Like {@code GsonBuilder}, this API supports chaining: \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   RuntimeTypeAdapterFactory\u003cShape\u003e shapeAdapterFactory \u003d RuntimeTypeAdapterFactory.of(Shape.class)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       .registerSubtype(Rectangle.class)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       .registerSubtype(Circle.class)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       .registerSubtype(Diamond.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * \u003ch3\u003eSerialization and deserialization\u003c/h3\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * In order to serialize and deserialize a polymorphic object,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * you must specify the base type explicitly."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   Diamond diamond \u003d new Diamond();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   String json \u003d gson.toJson(diamond, Shape.class);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * And then:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   Shape shape \u003d gson.fromJson(json, Shape.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public final class RuntimeTypeAdapterFactory\u003cT\u003e implements TypeAdapterFactory {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Class\u003c?\u003e baseType;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final String typeFieldName;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Map\u003cString, Class\u003c?\u003e\u003e labelToSubtype \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Map\u003cClass\u003c?\u003e, String\u003e subtypeToLabel \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final boolean maintainType;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private RuntimeTypeAdapterFactory(Class\u003c?\u003e baseType, String typeFieldName, boolean maintainType) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (typeFieldName \u003d\u003d null || baseType \u003d\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.baseType \u003d baseType;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.typeFieldName \u003d typeFieldName;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.maintainType \u003d maintainType;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Creates a new runtime type adapter using for {@code baseType} using {@code"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * typeFieldName} as the type field name. Type field names are case sensitive."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * {@code maintainType} flag decide if the type will be stored in pojo or not."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType, String typeFieldName, boolean maintainType) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new RuntimeTypeAdapterFactory\u003c\u003e(baseType, typeFieldName, maintainType);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Creates a new runtime type adapter using for {@code baseType} using {@code"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * typeFieldName} as the type field name. Type field names are case sensitive."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType, String typeFieldName) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new RuntimeTypeAdapterFactory\u003c\u003e(baseType, typeFieldName, false);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Creates a new runtime type adapter for {@code baseType} using {@code \"type\"} as"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * the type field name."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new RuntimeTypeAdapterFactory\u003c\u003e(baseType, \"type\", false);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Registers {@code type} identified by {@code label}. Labels are case"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * sensitive."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws IllegalArgumentException if either {@code type} or {@code label}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *                                  have already been registered on this type adapter."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public RuntimeTypeAdapterFactory\u003cT\u003e registerSubtype(Class\u003c? extends T\u003e type, String label) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (type \u003d\u003d null || label \u003d\u003d null) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (subtypeToLabel.containsKey(type) || labelToSubtype.containsKey(label)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalArgumentException(\"types and labels must be unique\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        labelToSubtype.put(label, type);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        subtypeToLabel.put(type, label);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Registers {@code type} identified by its {@link Class#getSimpleName simple"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * name}. Labels are case sensitive."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws IllegalArgumentException if either {@code type} or its simple name"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *                                  have already been registered on this type adapter."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public RuntimeTypeAdapterFactory\u003cT\u003e registerSubtype(Class\u003c? extends T\u003e type) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return registerSubtype(type, type.getSimpleName());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public \u003cR\u003e TypeAdapter\u003cR\u003e create(Gson gson, TypeToken\u003cR\u003e type) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (type.getRawType() !\u003d baseType) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final Map\u003cString, TypeAdapter\u003c?\u003e\u003e labelToDelegate"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final Map\u003cClass\u003c?\u003e, TypeAdapter\u003c?\u003e\u003e subtypeToDelegate"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (Map.Entry\u003cString, Class\u003c?\u003e\u003e entry : labelToSubtype.entrySet()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            TypeAdapter\u003c?\u003e delegate \u003d gson.getDelegateAdapter(this, TypeToken.get(entry.getValue()));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            labelToDelegate.put(entry.getKey(), delegate);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            subtypeToDelegate.put(entry.getValue(), delegate);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new TypeAdapter\u003cR\u003e() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            public R read(JsonReader in) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                JsonElement jsonElement \u003d Streams.parse(in);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                JsonElement labelJsonElement;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                if (maintainType) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    labelJsonElement \u003d jsonElement.getAsJsonObject().get(typeFieldName);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    labelJsonElement \u003d jsonElement.getAsJsonObject().remove(typeFieldName);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                if (labelJsonElement \u003d\u003d null) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    throw new JsonParseException(\"cannot deserialize \" + baseType"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            + \" because it does not define a field named \" + typeFieldName);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                String label \u003d labelJsonElement.getAsString();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                @SuppressWarnings(\"unchecked\") // registration requires that subtype extends T"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        TypeAdapter\u003cR\u003e delegate \u003d (TypeAdapter\u003cR\u003e) labelToDelegate.get(label);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                if (delegate \u003d\u003d null) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    throw new JsonParseException(\"cannot deserialize \" + baseType + \" subtype named \""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            + label + \"; did you forget to register a subtype?\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                return delegate.fromJsonTree(jsonElement);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            public void write(JsonWriter out, R value) throws IOException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                Class\u003c?\u003e srcType \u003d value.getClass();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                String label \u003d subtypeToLabel.get(srcType);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                @SuppressWarnings(\"unchecked\") // registration requires that subtype extends T"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        TypeAdapter\u003cR\u003e delegate \u003d (TypeAdapter\u003cR\u003e) subtypeToDelegate.get(srcType);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                if (delegate \u003d\u003d null) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    throw new JsonParseException(\"cannot serialize \" + srcType.getName()"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            + \"; did you forget to register a subtype?\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                JsonObject jsonObject \u003d delegate.toJsonTree(value).getAsJsonObject();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                if (maintainType) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    Streams.write(jsonObject, out);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                JsonObject clone \u003d new JsonObject();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                if (jsonObject.has(typeFieldName)) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    throw new JsonParseException(\"cannot serialize \" + srcType.getName()"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            + \" because it already defines a field named \" + typeFieldName);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                clone.add(typeFieldName, new JsonPrimitive(label));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                for (Map.Entry\u003cString, JsonElement\u003e e : jsonObject.entrySet()) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    clone.add(e.getKey(), e.getValue());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                Streams.write(clone, out);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }.nullSafe();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 263
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import logic.parser.CommandSyntax;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Todo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Handles the loading and saving of task lists to the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Gson gson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private String userDirectory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    final RuntimeTypeAdapterFactory\u003cTask\u003e typeFactory \u003d RuntimeTypeAdapterFactory"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .of(Task.class, \"type\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .registerSubtype(Todo.class, \"todo\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .registerSubtype(Deadline.class, \"deadline\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .registerSubtype(Event.class, \"event\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Initialises a storage object with gson and user directory."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        gson \u003d new GsonBuilder().registerTypeAdapterFactory(typeFactory).create();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        userDirectory \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Searches for an existing file with a previous alias store."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * If no such file found, reinitialise alias."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandSyntax readAlias() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            FileReader fileReader \u003d new FileReader(userDirectory + \"/alias.json\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return gson.fromJson(fileReader, CommandSyntax.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new CommandSyntax();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Searches for an existing file with a previous task list store."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * If no such file found, reinitialise task list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public TaskList readTaskList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            FileReader task \u003d new FileReader(userDirectory + \"/data.json\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return gson.fromJson(task, TaskList.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void saveTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(userDirectory + \"/data.json\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            gson.toJson(taskList, fileWriter);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            fileWriter.flush();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (IOException io) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            System.err.println(io.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Writes alias into hard drive."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void saveFile(CommandSyntax alias) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            FileWriter aliasFile \u003d new FileWriter(userDirectory + \"/alias.json\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            gson.toJson(alias, aliasFile);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            aliasFile.flush();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            aliasFile.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (IOException io) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            System.err.println(io.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 91
    }
  },
  {
    "path": "src/main/java/tasks/Date.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static commons.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Represents a Tasks\u0027s name in the taskList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \"Dates should only be in the format YYYY-MM-DD, and it should not be blank\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public final LocalDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param date A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            LocalDate.parse(test);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u0026\u0026 date.equals(((Date) other).date)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 63
    }
  },
  {
    "path": "src/main/java/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Task that need to be done before a specific date/time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    protected Date dateBy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Creates a task with a deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param name   task with a deadline to be completed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param dateBy date the task needs to be completed by."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Deadline(Name name, Date dateBy, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(name, tags);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.dateBy \u003d dateBy;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the string of the task with a deadline indicating [D] for deadline followed by the name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * then do by date in MMM d yyyy."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return the string of the deadline task indicating [D] for deadline followed by the name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * then do by date in MMM d yyyy."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assert dateBy !\u003d null : \"Date should be stored for deadlines\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + dateBy + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 38
    }
  },
  {
    "path": "src/main/java/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Task that start at a specific time and ends at a specific time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    protected Date dateAt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Creates a task that is an event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param name   task that is an event to be completed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param dateAt date the event is at."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Event(Name name, Date dateAt, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(name, tags);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.dateAt \u003d dateAt;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the string of the task that is an event indicating [E] for event followed by the name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * then date of the event in MMM d yyyy."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return the string of the task that is an event indicating [E] for event followed by the name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * then date of the event in MMM d yyyy."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + dateAt + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 38
    }
  },
  {
    "path": "src/main/java/tasks/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static commons.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Represents a Tasks\u0027s name in the taskList."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 60
    }
  },
  {
    "path": "src/main/java/tasks/Tag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static commons.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 55
    }
  },
  {
    "path": "src/main/java/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Specifies main attributes and methods for tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    protected Name name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    protected Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Creates a task object with a name."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param name of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Task(Name name, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the name of the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return task name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns a tick for tasks marked as done and a cross for tasks not done."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return tick for tasks marked as done and a cross for tasks not done."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean checkTags(String tag) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return tags.contains(new Tag(tag));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Changes the status of the task to done."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 66
    }
  },
  {
    "path": "src/main/java/tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import commons.StringUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * TaskList stores a list of tasks and contains operations to add, retrieve"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * and delete tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Initializes the task list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        list \u003d taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Retrieves this task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return this task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Adds task to this task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param taskToAdd task to add to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void addTask(Task taskToAdd) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        list.add(taskToAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Deletes task with the specified task number from this task list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param taskNumber task to be deleted."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void deleteTask(int taskNumber) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        list.remove(taskNumber);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Clears all tasks from this task list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void clearAll() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        list.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Marks task with specified task number as done."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param taskNumber task to be marked as done."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void markAsDone(int taskNumber) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        list.get(taskNumber).setDone();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns specified task number."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param taskNumber of the task requested."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return task with the corresponding task number."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Task getTask(int taskNumber) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return list.get(taskNumber);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns total number of tasks in this task list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return total number of tasks in this task list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public int getTotalTasks() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Checks if this task list is empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return true if task list is empty and false otherwise."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return list.isEmpty();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Prints all tasks in this task list containing the keyword in a numbered order."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return the string of all tasks containing the keyword in this task list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public TaskList findTaskContainingKeyword(String keyword) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ArrayList\u003cTask\u003e filteredByKeyword \u003d (ArrayList\u003cTask\u003e) list.stream()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .filter(task -\u003e StringUtil.containsWordIgnoreCase(task.getName().toString(), keyword))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new TaskList(filteredByKeyword);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public TaskList findTaskContainingTag(String tag) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ArrayList\u003cTask\u003e filteredByTag \u003d (ArrayList\u003cTask\u003e) list.stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .filter(task -\u003e task.checkTags(tag))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new TaskList(filteredByTag);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Prints all tasks in this task list in a numbered order."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return the string of all tasks in this task list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String printList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String printedList \u003d \"\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        int taskNumber \u003d 1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            printedList \u003d printedList + \"\\n\\t\\t\" + taskNumber + \". \\t\" + task;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            taskNumber++;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return printedList;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setTaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.list \u003d taskList;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 131
    }
  },
  {
    "path": "src/main/java/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import tasks.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Task without any date/time attached to it."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Creates a task without any date/time attached to it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param name task to be completed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Todo(Name name, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(name, tags);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the string of the task containing the name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return the string of the task containing the name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 31
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.Priority?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cHBox.hgrow\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003cPriority fx:value\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003c/HBox.hgrow\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003cHBox.hgrow\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    \u003cPriority fx:value\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003c/HBox.hgrow\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003cInsets/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 33
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cMenuBar id\u003d\"menu-item\" blendMode\u003d\"OVERLAY\" prefHeight\u003d\"29.0\" prefWidth\u003d\"400.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                 AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cmenus\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    \u003citems\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Close\" onAction\u003d\"#handleExit\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    \u003c/items\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Edit\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    \u003citems\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Clear history\" onAction\u003d\"#clear\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    \u003c/items\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    \u003citems\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Command list\" onAction\u003d\"#help\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    \u003c/items\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003c/menus\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                   AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"76.0\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: grey;\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                text\u003d\"Send\" textFill\u003d\"WHITE\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003cFont name\u003d\"System Font\" size\u003d\"13.0\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutY\u003d\"28.0\" prefHeight\u003d\"529.0\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    prefWidth\u003d\"400.0\" snapToPixel\u003d\"false\" style\u003d\"-fx-background-color: black;\" vvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    AnchorPane.bottomAnchor\u003d\"43.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    AnchorPane.topAnchor\u003d\"28.0\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"523.0\" prefWidth\u003d\"388.0\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                      style\u003d\"-fx-background-color: black;\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        \u003cInsets/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 61
    }
  },
  {
    "path": "src/test/java/tasks/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"JUnit\", LocalDate.parse(\"2020-01-29\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(\"[D][✘] JUnit (by: Jan 29 2020)\", deadline.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 20
    }
  },
  {
    "path": "src/test/java/tasks/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Event event \u003d new Event(\"2103 lecture\", LocalDate.parse(\"2020-01-31\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(\"[E][✘] 2103 lecture (by: Jan 31 2020)\", event.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 15
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "Hello from"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " ____        _"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|  _ \\ _   _| | _____"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\tHello! I\u0027m Duke"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\tWhat can I do for you?"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\tGot it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t\t[T][✘] read notes"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\tNow you have 1 task in the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\tGot it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t\t[D][✘] 2103 project  (by: thursday 2359)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\tNow you have 2 tasks in the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\tGot it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t\t[E][✘] 2103 lecture  (at: friday 2pm)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\tNow you have 3 tasks in the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\tHere are the tasks in your list:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t1. [T][✘] read notes"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t2. [D][✘] 2103 project  (by: thursday 2359)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t3. [E][✘] 2103 lecture  (at: friday 2pm)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\tNice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t\t[E][✓] 2103 lecture  (at: friday 2pm)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\tHere are the tasks in your list:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t1. [T][✘] read notes"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t2. [D][✘] 2103 project  (by: thursday 2359)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t3. [E][✓] 2103 lecture  (at: friday 2pm)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\tNoted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t\t[E][✓] 2103 lecture  (at: friday 2pm)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\tNow you have 2 tasks in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\tHere are the tasks in your list:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t1. [T][✘] read notes"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t2. [D][✘] 2103 project  (by: thursday 2359)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\tBye. Hope to see you again soon!"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\t____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 55
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "todo read notes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "deadline 2103 project /thursday 2359"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "event 2103 lecture /friday 2pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 9
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 34
    }
  }
]
