[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.8\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    id \u0027org.beryx.jlink\u0027 version \u00272.12.0\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "group \u0027Duke\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    mainClassName \u003d \"duke.gui.Launcher\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        attributes("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                \u0027Main-Class\u0027: \u0027duke.gui.Launcher\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        )"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "jlink {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    launcher {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        name \u003d \u0027Duke\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "test {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    archiveVersion \u003d \"0.2\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 56,
      "-": 18
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": "## Introduction "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Welcome to Duke, a task management application. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "The application allows users to create, store, and mark done multiple tasks. Other functionalities are also included. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "### Quick Start"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "To launch the program: "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "1. Ensure that Java 11 or later version is installed on your computer."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "2. Download the latest `duke-0.2.jar` file from [this page](https://github.com/wardetu/duke/releases/tag/0.2)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "3. Move `duke-0.2.jar` to a folder you want to use as the home folder for the program. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "*Note: the first time Duke runs a new storage folder will be created. The program data is stored in a `data.csv` file. Do not modify it.*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "4. Double-click on the file icon to run. Alternatively, start up a Terminal program, navigate to the directory"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "that contains `duke-0.2.jar` and run the following command: `java -jar duke-0.2.jar`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "A user can create tasks whose type is one of the following: event, deadline, and todo. Events and "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "deadlines require a timestamp while todos do not. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Tasks can be stored and viewed. They can also be marked as completed or deleted from storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "By providing a keyword, a user can find tasks that contain such keyword in their description."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Duke also provides an undo option. Unfortunately, redo is not supported."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "The following commands are available:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "* `event`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "* `deadline`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "* `todo`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "* `done`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "* `delete`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "* `find`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "* `list`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "* `undo`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "* `bye`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "### `event` - Adding an event"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Adds a new event with description and date \u0026 time."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Format: `event \u003cdescription\u003e at \u003cyyyy-mm-dd hhmm\u003e`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "The keyword `at` is mandatory. Also do note that the time input should be in *24 Hour Time* format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "E.g: `event go to CO concert at 2020-03-03 1730`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    Added:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        EVENT    :go to CO concert at Mar 3 2020 05:30PM (Uncompleted)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "### `deadline` - Adding a deadline"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Adds a new deadline with description and date \u0026 time."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Format: `deadline \u003cdescription\u003e by \u003cyyyy-mm-dd hhmm\u003e`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "The keyword `by` is mandatory. The time input should be in *24 Hour Time* format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "E.g: `deadline buy milk by 2020-03-16 1430`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    Added:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        DEADLINE    :go to CO concert by Mar 16 2020 02:30PM (Uncompleted)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "### `todo` - Adding a todo"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Adds a new todo with description."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Format: `todo \u003cdescription\u003e`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "E.g: `todo buy pen`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    Added:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        TODO   :buy pen (Uncompleted)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "### `done` - Marking a task as completed"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Marks a specified task as completed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Format: `done \u003cindex\u003e`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "The `\u003cindex\u003e` field is mandatory and has to be a whole number. Indices are consistent with the indexing"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "shown when the command `list` is used."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "E.g: `done 2`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "A possible expected outcome:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    Task successfully completed:    "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        EVENT    :go to CO concert at Mar 3 2020 05:30PM (Completed)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "       "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "### `delete` - Deleting a task"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Deletes a specified task."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Format: `delete \u003cindex\u003e`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "The `\u003cindex\u003e` field is mandatory and has to be a whole number. Indices are consistent with the indexing"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": "shown when the command `list` is used. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Indices will be updated after the command is successfully executed. Be careful with successive deletion."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "E.g: `delete 3`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "A possible expected outcome:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    Your burden has been lifted, removed:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        TODO    : buy new detergent (Uncompleted)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wardetu"
        },
        "content": "### `find` - Finding tasks "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Finds all tasks that contain a specified keyword."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Format: `find \u003ckeyword\u003e`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wardetu"
        },
        "content": "The `\u003ckeyword\u003e` field is mandatory and has to be a single word (i.e. without spacing)."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wardetu"
        },
        "content": "This is not case sensitive does not require matching of whole word, so `find egg` will match "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wardetu"
        },
        "content": "both *\"buy more eggs\"* and *\"Throw rotten Egg away\"*."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wardetu"
        },
        "content": "E.g: `find get`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wardetu"
        },
        "content": "A possible expected outcome:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    Tasks that contain \"get\" in your list:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        1 - DEADLINE: get milk by Mar 16 2020 08:30AM (Completed)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        2 - DEADLINE: get stapler by Mar 03 2020 05:30AM (Uncompleted)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        3 - TODO    : Get new earphones (Completed)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wardetu"
        },
        "content": "### `list` - Listing all tasks"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Shows all tasks currently present in the list. Also shows their status and index which"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wardetu"
        },
        "content": "can be used for the purpose of `delete` and `done` command."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wardetu"
        },
        "content": "A possible expected outcome:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    Here are your tasks:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        1 - DEADLINE: get milk by Mar 16 2020 08:30AM (Completed)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        2 - DEADLINE: get stapler by Mar 03 2020 05:30AM (Uncompleted)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        3 - TODO    : Get new earphones (Completed)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        4 - EVENT   : go to ComicCon at Apr 14 2020 09:00AM (Uncompleted)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wardetu"
        },
        "content": "### `undo` - Undoing "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Undoes the previous command and restores the program state to before the command"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wardetu"
        },
        "content": "was executed. "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Do note that you can only undo up to the point when Duke is run. Thus, if the program"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wardetu"
        },
        "content": "is closed and then re-opened, any change made cannot be undone. "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Undoing a `done` command will revert a task to *uncompleted*, while undoing"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wardetu"
        },
        "content": "a `delete` command will maintain the status of the task when it was deleted."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wardetu"
        },
        "content": "There is also no option to redo your undone choices. Sorry, but you can only regret so often."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wardetu"
        },
        "content": "E.g: if an item is deleted as a result of `delete 2`, `undo` will bring it back to life."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wardetu"
        },
        "content": "### `exit` - Quitting"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Exits the program. Changes made will be saved."
      }
    ],
    "authorContributionMap": {
      "wardetu": 151,
      "-": 18
    }
  },
  {
    "path": "src/main/java/duke/Controller.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.state.StateController;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * The Controller class that facilitates execution of the Duke program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class Controller {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    protected Storage storageController;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private StateController stateController;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private boolean hasReachedExit \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static int getNumberOfDoneTasks(ArrayList\u003cTask\u003e storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return (int) storage.stream().filter(task -\u003e task.getStatus().equals(\"T\")).count();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs a Controller object with the specified Storage object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param storageController the Storage object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Controller(Storage storageController) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.storageController \u003d storageController;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.stateController \u003d new StateController(storageController.generateTaskList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static void raiseException(Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Ui.printError(e);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Executes the parametric Command object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param command a Command object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return a boolean value that is returned by the method call execute() to the Command object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean execute(Command command) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        hasReachedExit \u003d command.execute(stateController, storageController, storageController.generateTaskList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return hasReachedExit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Gets the status of the current run of Duke."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return true iff the latest successful command is an exit command, false otherwise."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return hasReachedExit;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 54
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.gui.components.DialogBox;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * The Duke program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private Controller controller;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/andrew.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/ricky.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs a Duke instance with file path set to src/data/data.csv. This is primarily for the sake of GUI."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this(\"data/data.csv\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs a Duke instance with the specified file path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param filePath a String value of the file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Storage storageController \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.controller \u003d new Controller(storageController);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Duke bot \u003d new Duke();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        bot.run();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * A driver method for the program Duke."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Scanner scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Ui.printGreet();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Ui.printTaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        while (scan.hasNext()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                Optional\u003cCommand\u003e parsed \u003d Parser.parse(scan.nextLine());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                if (parsed.isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    Command command \u003d parsed.get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    if (controller.execute(command)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Starts rendering process by JavaFX."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param stage a Stage object for JavaFX"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        ScrollPane scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        VBox dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        TextField userInput \u003d new TextField();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Button sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Scene scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        stage.setMinWidth(625.0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        mainLayout.setPrefSize(625.0, 535.0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        scrollPane.setPrefSize(610, 535);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        userInput.setPrefWidth(523.0);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        sendButton.setPrefWidth(85.0);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        String initialLine \u003d \"\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Ui.printGreet();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        initialLine +\u003d Ui.getContent() + \"\\n\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Ui.printTaskList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        initialLine +\u003d Ui.getContent();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                DialogBox.getDukeDialog(new Label(initialLine), new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e handleUserInput(userInput, dialogContainer));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        userInput.setOnAction((event) -\u003e handleUserInput(userInput, dialogContainer));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Handles user input."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param userInput       a TextField object containing a String user input."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param dialogContainer a VBox object that will contain the dialogue boxes for Duke and the user characters."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private void handleUserInput(TextField userInput, VBox dialogContainer) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        );"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (controller.getStatus()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                Controller.raiseException(e);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns a response for a text user input in the text field."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param text a String-form user input"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return a String response for the given user input"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private String getResponse(String text) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Optional\u003cCommand\u003e parsed \u003d Parser.parse(text);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            parsed.ifPresent(command -\u003e controller.execute(command));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return Ui.getContent();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 183,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "// Wildcard import is used because all classes in the package are imported"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.command.UndoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * The Parser class that parses user inputs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Parses a string input and returns a corresponding Command object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param input the user input with type String."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return a Command object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static Optional\u003cCommand\u003e parse(String input) throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        String[] arr \u003d input.split(\"\\\\s\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            switch (arr[0].toLowerCase()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                if (arr.length \u003e 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    Controller.raiseException(new Exception(\" A word of bye is enough.\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    return Optional.of(new ExitCommand());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                index \u003d Integer.parseInt(arr[1]) - 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                if (arr.length \u003e 2) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    Controller.raiseException(new Exception(\" More content than needed for delete task.\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    return Optional.of(new DeleteCommand(index));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                index \u003d Integer.parseInt(arr[1]) - 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                if (arr.length \u003e 2) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    Controller.raiseException(new Exception(\" More content than needed for done task.\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    return Optional.of(new DoneCommand(index));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                String keyword \u003d arr[1];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                if (arr.length \u003e 2) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    Controller.raiseException(new Exception(\" Sorry I can only handle one word at a time.\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    return Optional.of(new FindCommand(keyword));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                if (arr.length \u003e 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    Controller.raiseException(new Exception(\" A word of list is enough.\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    return Optional.of(new ListCommand());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            case \"undo\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                if (arr.length \u003e 1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    Controller.raiseException(new Exception(\" Too wordy for me.\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    return Optional.of(new UndoCommand());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    return Optional.of(new AddCommand(Task.generateTask(arr)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    Controller.raiseException(e);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (NumberFormatException e1) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new Exception(\" Nice try but index must be a whole number, alright?\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e2) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new Exception(\" A tad too few words, innit? \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 92
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * The Storage class that handles storage related businesses for the Duke program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs a Storage object with the specified file path."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param filePath the file path to the file that stores data for the Duke program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        File f \u003d new File(\"filePath\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                Path newPath \u003d Path.of(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                Files.createDirectory(newPath.getParent());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                Files.createFile(Path.of(filePath));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                Controller.raiseException(e);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Scans the file specified by the file path and output a list of Task objects."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return An ArrayList collection of Task objects."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public ArrayList\u003cTask\u003e generateTaskList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        ArrayList\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try (Scanner scan \u003d new Scanner(new File(filePath))) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            while (scan.hasNextLine()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                String[] line \u003d scan.nextLine().split(\",\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                boolean isDone \u003d line[2].equals(\"T\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                String[] line2 \u003d new String[]{line[0], line[1]};"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                Task task \u003d Task.generateTask(line2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                if (isDone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    task.setDone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                lst.add(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                String type \u003d task.getType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                //This assertion will trigger if data.csv is modified outside the program"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                assert (type.equals(\"deadline\") || type.equals(\"event\") || type.equals(\"todo\")) : \"Unknown task type!\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Controller.raiseException(e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return lst;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Writes the list of Task objects into the file specified by the file path."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param lst An ArrayList collection of Task objects."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void writeTask(ArrayList\u003cTask\u003e lst) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try (FileWriter writer \u003d new FileWriter(filePath)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            String str \u003d lst.stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    .map(task -\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                            String.join(\",\", task.getType(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                                    task.getDescription().trim(), task.getStatus()))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    .collect(Collectors.joining(\"\\n\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            writer.write(str);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Controller.raiseException(e);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 84
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private static String content;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Prints a greeting message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static void printGreet() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        content \u003d \" Greeting, traveler. My name is Andrew. What can I do for you?\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        System.out.println(content);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Prints a goodbye message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static void printGoodbye() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        content \u003d \" I shall not trouble you anymore. Farewell, partner.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        System.out.println(content);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns the content currently handled by the Ui component."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return a String content."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static String getContent() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Prints a message when an addition command is completed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param str  a String description of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param size the number of Task objects in the current list after the addition."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static void printAdd(String str, int size) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        content \u003d String.format(\" Added:\\n\\t %s\\n You now have %d tasks in your list\\n\", str, size);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        System.out.println(content);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Prints a message when a deletion command is completed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param str  a String description of the task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param size the number of Task objects in the current list after the deletion."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static void printDel(String str, int size) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        content \u003d String.format(\" Your burden has been lifted, removed: \\n\\t%s\\n You now have %d tasks in your list.\\n\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                str, size);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        System.out.println(content);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Prints a message when a done command is completed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param str            a String description of the task"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param numberOfUndone the number of uncompleted Task objects left in the current list after the completion."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static void printDone(String str, int numberOfUndone) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        content \u003d String.format(\" Task successfully completed: \\n\\t%s\\n You still have %d tasks to complete.\\n\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                str, numberOfUndone);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        System.out.println(content);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Prints the result of a find command. Informs the user if no match is found."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param keyword a String keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param result  a String representation of the list of tasks that contain the keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param count   the number of tasks that contain the keyword."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static void printFind(String keyword, String result, int count) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        content \u003d \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (count \u003e 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            content +\u003d String.format(\" Tasks that contain \\\"%s\\\" in your list:\\n\", keyword);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            content +\u003d result;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            content +\u003d String.format(\" %d %s in total.\\n\", count, count \u003e 1 ? \"entries\" : \"entry\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            content \u003d String.format(\" Eh, I can\u0027t find anything that matches \\\"%s\\\".\", keyword);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        System.out.println(content);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Prints a message error."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param e an Exception."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static void printError(Exception e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        content \u003d e.getMessage();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        System.out.println(content);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Prints all the available commands that the Duke program can understand."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static void printTaskList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        content \u003d \" These are the commands available:\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                + \"\\n 1. event \u003cdescription\u003e at \u003cyyyy-mm-dd hhmm\u003e: add a new event\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                + \"\\n 2. deadline \u003cdescription\u003e by \u003cyyyy-mm-dd hhmm\u003e : add a new deadline\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                + \"\\n 3. todo \u003cdescription\u003e : add a new todo\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                + \"\\n 4. done \u003cindex\u003e : complete the task at given index\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                + \"\\n 5. delete \u003cindex\u003e : delete the task at given index\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                + \"\\n 6. find \u003cone single keyword\u003e : find records that contain the specified keyword\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                + \"\\n 7. list : list all the tasks currently in my list\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                + \"\\n 8. undo : jump to before the latest command was executed\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                + \"\\n 9. bye : say goodbye and quit \";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        System.out.println(content);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Prints a message when an undo command has been executed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static void printUndo() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        content \u003d \" Undo successfully.\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        System.out.println(content);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Prints the list of tasks currently stored."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param lst a string made from concatenation of all tasks currently stored in data.csv."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static void printList(String lst) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (lst.equals(\"\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            content \u003d \" You have no task right now, mate. Go add something.\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            content \u003d \" Here are your tasks: \\n\" + lst;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        System.out.println(lst);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 133
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.Controller;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.state.StateController;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * A class representing an addition command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs an AddCommand object with a specified Task object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param task a Task object to be added by Duke."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Executes this AddCommand and writes the specified task represented by the Task object to the file that is"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * currently specified by the file path in the Duke instance."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param storageController a Storage object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param storage           an ArrayList collection of Task objects for processing in-program."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean execute(StateController stateController, Storage storageController, ArrayList\u003cTask\u003e storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            storage.add(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            int storageSize \u003d storage.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Ui.printAdd(task.toString(), storageSize);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            storageController.writeTask(storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            stateController.commit(this, storage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Controller.raiseException(e);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 46
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.state.StateController;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * An abstract object representing a command to the Duke program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Executes a command using the specified Storage object and an ArrayList collection of Task objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param storageController a Storage object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param storage           an ArrayList collection of Task objects for processing in-program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return true if the Command is an ExitCommand, false otherwise."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public abstract boolean execute(StateController stateController, Storage storageController,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                                    ArrayList\u003cTask\u003e storage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wardetu": 23
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.Controller;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.state.StateController;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * A class representing a deletion command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs the DeleteCommand object with specified index for deletion i."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param i a non-negative, integer index for a Task object in the currently processed ArrayList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public DeleteCommand(int i) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.index \u003d i;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Executes this DeleteCommand. The Task object is deleted from the file specified by the file path in the current"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Duke instance."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param storageController a Storage object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param storage           an ArrayList collection of Task objects for processing in-program."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean execute(StateController stateController, Storage storageController, ArrayList\u003cTask\u003e storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            int storageSize \u003d storage.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (index + 1 \u003e storageSize) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                Controller.raiseException(new Exception(\"Sorry pal such index is way beyond my list.\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Ui.printDel(storage.get(index).toString(), storageSize - 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            storage.remove(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            storageController.writeTask(storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            stateController.commit(this, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Controller.raiseException(e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 51
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.Controller;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.state.StateController;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * A class representing a completion command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs the DeleteCommand object with specified index for completion i."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param i a nonnegative, integer index for a Task object in the currently processed ArrayList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public DoneCommand(int i) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.index \u003d i;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Executes this DoneCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param storageController a Storage object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param storage           an ArrayList collection of Task objects for processing in-program."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean execute(StateController stateController, Storage storageController, ArrayList\u003cTask\u003e storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            int storageSize \u003d storage.size();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (index \u003e storage.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                Controller.raiseException(new Exception(\"This is beyond the scope of my ability, sadly.\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            storage.get(index).setDone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Ui.printDone(storage.get(index).toString(), storageSize - Controller.getNumberOfDoneTasks(storage));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            storageController.writeTask(storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            stateController.commit(this, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Controller.raiseException(e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 54
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.state.StateController;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * A class representing an exit command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private static final String type \u003d \"exit\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Exits the program by returning a true value that will be propagated upward."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param storageController a Storage object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param storage           an ArrayList collection of Task objects for processing in-program."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean execute(StateController stateController, Storage storageController, ArrayList\u003cTask\u003e storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Ui.printGoodbye();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 28
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.Controller;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.state.StateController;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * A class representing a find command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private static final String type \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs the FindCommand object with a specified keyword."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param keyword a String value for the keyword."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Displays the list of tasks that contain the query keyword. The list is consistent with data stored in the record"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * specified by the file path in the current Duke instance."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param storageController a Storage object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param storage           an ArrayList collection of Task objects for processing in-program."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean execute(StateController stateController, Storage storageController, ArrayList\u003cTask\u003e storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            AtomicInteger index \u003d new AtomicInteger(1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            int count \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            for (Task task : storage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                if (task.getDescription().toLowerCase().contains(this.keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    count +\u003d 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    result.append(String.format(\"\\t%d -%s\\n\", count, task.toString()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Ui.printFind(keyword, result.toString(), count);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Controller.raiseException(e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 55
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.Controller;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.state.StateController;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * A class representing a listing command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private static final String type \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Displays the current list of tasks. The list is consistent with data stored in the record specified by the file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * path in the current Duke instance."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param storageController a Storage object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param storage           an ArrayList collection of Task objects for processing in-program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean execute(StateController stateController, Storage storageController, ArrayList\u003cTask\u003e storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            StringBuilder lst \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            for (int i \u003d 0; i \u003c storage.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                lst.append(String.format(\"\\t%d -%s\\n\", i + 1, storage.get(i)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Ui.printList(lst.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Controller.raiseException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 39
    }
  },
  {
    "path": "src/main/java/duke/command/UndoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.Controller;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.state.State;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.state.StateController;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * A class representing the undo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Executes an undo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param stateController   a StateController object that stores states and facilitates the operation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param storageController a Storage object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param storage           an ArrayList collection of Task objects for processing in-program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean execute(StateController stateController, Storage storageController, ArrayList\u003cTask\u003e storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            stateController.undo();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            State state \u003d stateController.getCurrent();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            storageController.writeTask(state.getTaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Ui.printUndo();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Controller.raiseException(e);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 36
    }
  },
  {
    "path": "src/main/java/duke/gui/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 10
    }
  },
  {
    "path": "src/main/java/duke/gui/components/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package duke.gui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs a DialogBox object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param l  a text label for the DialogBox."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param iv image of the character contained in the DialogBox."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns a DialogBox for the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param l  label for the user"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param iv image of the user"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return a DialogBox object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns a DialogBox for Duke."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param l  label for Duke"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param iv image of Duke"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return a DialogBox object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 64
    }
  },
  {
    "path": "src/main/java/duke/state/State.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package duke.state;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * An object representing a state of the Duke program. A state consists of the task list as well as the command that"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * results in it."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class State {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    Command command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs a new State object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param command  a Command that results in the state. When the program, and its StateController are initialized,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *                 a State object with this field set to null will be used to represent the initial state."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param taskList an ArrayList of Task objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    State(Command command, ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns the command of this state."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return a State object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns the task list of this state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return an ArrayList of Task objects."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 45
    }
  },
  {
    "path": "src/main/java/duke/state/StateController.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package duke.state;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * A controller class that manages states of the program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class StateController {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    Stack\u003cState\u003e stateStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    State current;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    State next;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs a StateController class with the task list consistent with what is read from data.csv."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param taskList an ArrayList of Task objects"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public StateController(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        // Makes initial state which we set current to"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.stateStack.push(new State(null, taskList));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        current \u003d stateStack.peek();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Adds a new state to the current state storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param command  a Command object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param taskList an ArrayList of Task objects."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void commit(Command command, ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.stateStack.push(new State(command, taskList));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        current \u003d stateStack.peek();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        next \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Restores the state of the program to the previous state by popping the stateStack stack."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @throws Exception when there are no state other than the initial one."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void undo() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (stateStack.peek().getCommand() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (current.getCommand() instanceof DoneCommand) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                int index \u003d ((DoneCommand) current.getCommand()).getIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                current.getTaskList().get(index).setUndone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            stateStack.pop();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            current \u003d stateStack.peek();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new Exception(\" Sorry I cannot find a past state.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns the current state of the program."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return a State object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public State getCurrent() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.current;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 68
    }
  },
  {
    "path": "src/main/java/duke/task/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * A class that represents a task with a deadline."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    protected LocalDateTime time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs an DeadlineTask object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param inputArr a String array that represents the input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @throws Exception if there is not enough information or wrong format is given."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public DeadlineTask(String[] inputArr) throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.type \u003d \"deadline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (inputArr.length \u003c 2) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new Exception(\" Deadline tasks must have a non-empty description!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.description \u003d Arrays.stream(inputArr)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .map(str -\u003e str.toLowerCase().equals(\"deadline\") ? \"\" : str.equals(\"/by\") ? \"by\" : str)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        int lastBy \u003d description.lastIndexOf(\" by \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (lastBy \u003d\u003d -1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (description.contains(\"by\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                throw new Exception((\" Date \u0026 time missing.\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new Exception(\" Keyword \\\"by\\\" missing.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                The second try clause handles when a task is read from data.csv, wherein its date format is"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                MMM d yyyy hh:mma"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "             */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                this.time \u003d LocalDateTime.parse(this.description.substring(lastBy + 4),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                        DateTimeFormatter.ofPattern(\"yyyy-LL-dd HHmm\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    this.time \u003d LocalDateTime.parse(this.description.substring(lastBy + 4),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                            DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mma\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                } catch (DateTimeParseException e2) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    throw new Exception(\" Error: unable to decipher date \u0026 time input.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            this.description \u003d this.description.substring(0, lastBy + 3) + \u0027 \u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    + time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mma\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns the String representation of this DeadlineTask object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return the String representation of this DeadlineTask object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return \" DEADLINE:\" + super.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 66
    }
  },
  {
    "path": "src/main/java/duke/task/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * A task that has a time attribute that it occurs at."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "class EventTask extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    protected LocalDateTime time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs an EventTask object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param inputArr a String array that represents the input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @throws Exception if there is not enough information or wrong format is given."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public EventTask(String[] inputArr) throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.type \u003d \"event\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (inputArr.length \u003c 2) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new Exception(\" Event tasks must have a non-empty description!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.description \u003d Arrays.stream(inputArr)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .map(str -\u003e str.toLowerCase().equals(\"event\") ? \"\" : str.equals(\"/at\") ? \"at\" : str)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        int lastAt \u003d description.lastIndexOf(\" at \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (lastAt \u003d\u003d -1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (description.contains(\"at\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                throw new Exception((\" Date \u0026 time missing.\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new Exception(\" Keyword \\\"at\\\" missing.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                The second try clause handles when a task is read from data.csv, wherein its date format is"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                MMM d yyyy hh:mma"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "             */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                this.time \u003d LocalDateTime.parse(this.description.substring(lastAt + 4),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                        DateTimeFormatter.ofPattern(\"yyyy-LL-dd HHmm\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    this.time \u003d LocalDateTime.parse(this.description.substring(lastAt + 4),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                            DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mma\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                } catch (DateTimeParseException e2) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    throw new Exception(\" Error: unable to decipher date \u0026 time input.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            this.description \u003d this.description.substring(0, lastAt + 3) + \u0027 \u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    + this.time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mma\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns the String representation of this EventTask object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return the String representation of this EventTask object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return \" EVENT      :\" + super.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 67
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Am abstract representation of a task issued to the Duke program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private static final String TO_DO \u003d \"todo\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private static final String EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private static final String DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    static int size \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private boolean isDone \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    protected String type \u003d \"task\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Outputs a String representation of the Task object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return the String representation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return String.format(\"%s%s\", this.description, this.isDone ? \" (Completed)\" : \" (Uncompleted)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns the type of the Task object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return type of the Task object with type String."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns the description of the Task object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return description of the Task object with type String."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns the status of the Task object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return status of the Task object with type String."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.isDone ? \"T\" : \"F\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Sets the isDone field to true. If isDone is already true, throws an exception."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @throws Exception when value of isDone field is already true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void setDone() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new Exception(\" You might have been mistaken. This task has already been completed.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Sets the attribute isDone of this Task object to false."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void setUndone() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        assert this.isDone;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Generates a Task object based on the input. The Task object can be a DeadlineTask, an EventTask, or a TodoTask."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param inputAsArray a String array representing the input to create the Task object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return a Task object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @throws Exception if the task type is invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static Task generateTask(String[] inputAsArray) throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        String type \u003d inputAsArray[0];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        switch (type.toLowerCase()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case TO_DO: {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new TodoTask(inputAsArray);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case EVENT: {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new EventTask(inputAsArray);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case DEADLINE: {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new DeadlineTask(inputAsArray);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new Exception(\" You might have not chosen a valid task type or command!\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wardetu": 98
    }
  },
  {
    "path": "src/main/java/duke/task/TodoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * A task to be done that has no time attribute."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "class TodoTask extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs an TodoTask object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param inputArr a String array that represents the input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public TodoTask(String[] inputArr) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.type \u003d \"todo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        size++;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.description \u003d Arrays.stream(inputArr)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .map(str -\u003e str.toLowerCase().equals(\"todo\") ? \"\" : str)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns the String representation of this TodoTask object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return the String representation of this TodoTask object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return \" TODO       :\" + super.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 34
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wardetu": 17
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                   AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "wardetu": 24
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void parseMethod_notEnoughArguments_exceptionThrown() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Parser.parse(\"delete\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            assertTrue(e.getMessage().contains(\"A tad too few words, innit?\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 19
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void testTaskGenerator_correctInput_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            String[] arr \u003d \"event get milk at 2020-02-02 2020\".split(\"\\\\s\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Task testTask \u003d Task.generateTask(arr);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            assertEquals(testTask.getType(), \"event\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            assertEquals(testTask.getStatus(), \"F\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            assertTrue(testTask.getDescription().contains(\"get milk at Feb 2 2020 08:20PM\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void testTaskGenerator_wrongInputWithMissingKeyword_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            String[] arr \u003d \"deadline get milk on 2020-02-02 2020\".split(\"\\\\s\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Task.generateTask(arr);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            assertTrue(e.getMessage().contains(\"Keyword \\\"by\\\" missing\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void testSetDoneAndSetUndone_forTaskStatus() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            String[] arr \u003d \"todo get milk\".split(\"\\\\s\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Task testTask \u003d Task.generateTask(arr);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            assertEquals(testTask.getStatus(), \"F\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            testTask.setDone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            assertEquals(testTask.getStatus(), \"T\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            testTask.setUndone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            assertEquals(testTask.getStatus(), \"F\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 48
    }
  }
]
