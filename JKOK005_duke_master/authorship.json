[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.8\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    maven {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        url \"https://plugins.gradle.org/m2/\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    mainClassName \u003d \"com.nus.duke.Duke\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    version \u003d \u002711\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    configFile rootProject.file(\u0027config/checkstyle/checkstyle.xml\u0027)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    checkstyleTest.enabled \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    checkstyleMain.enabled \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "checkstyleMain {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    source \u003d\u0027src/main/java\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "checkstyleTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    source \u003d\u0027src/test/java\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "tasks.withType(Checkstyle) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        html.destination rootProject.file(\"build/reports/checkstyle.html\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    archiveVersion \u003d \"0.0.1\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 49
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "## Project Duke user manual"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "## Supported features"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "| Features      |   Description |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "| ------------  |   ----------- |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "| todo          |   Creates a new TODO task     |"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "| event         |   Creates a new EVENT task    |"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "| deadline      |   Creates a new DEADLINE task |"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "| mark          |   Checks the completion marker on the task    |"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "| unmark        |   Removes the completion marker on the task    |"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "| delete        |   Deletes an existing task    |"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "| save          |   Saves the list of tasks to file    |"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "| quit          |   exit    |"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "## Building \u0026 executing the jar"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "Lets start by compiling java classes"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "```java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "./gradlew build"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "```"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "This creates a file `duke-\u003cMAJOR\u003e-\u003cMINOR\u003e-\u003cPATH\u003e.jar` under the *build/libs* directory"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "Execute the code using"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "```java"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "java -jar \u003cjar_class\u003e.jar com.nus.duke"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "## Walkthrough"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "Sample walkthrough diagram can be found [here](Ui.png)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "Lets start by creating a new task. "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "Create a `todo` task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "```java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "todo brush my teeth"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "Create an `event` task. We can specify the event timing via the /by token"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "```java"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "event return library book /at 10pm"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "Create an `deadline` task. We can specify the deadline timing via the /at token"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "```java"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "deadline finish CS2103 online lecture /by 20-02-2020 09:00"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "```"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "List all the tasks you have created"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "```java"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "```"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "Once we have brushed our teeth, we can mark the task as completed"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "mark brush my teeth"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "```"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "We can search for tasks related to the key work `return` via"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "```java"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "find return"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "Save the file. The files will be saved to the current working directory under the name _duke-saved-record.txt_"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "```java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "save"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "You can then exit the program"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "```java"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "exit"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 64,
      "-": 9
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 100
    }
  },
  {
    "path": "src/main/java/com/nus/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package com.nus.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import com.nus.duke.controller.TaskController;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import com.nus.duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import com.nus.duke.ui.Greetings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private static void poll(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        Scanner scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        Boolean contLoop \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        TaskController controller \u003d new TaskController();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        while (contLoop) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            String input \u003d scan.nextLine();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            Pair\u003cString, String\u003e parsedInput \u003d Parser.tokenize(input);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            String taskName \u003d parsedInput.getValue();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            switch (parsedInput.getKey()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                List\u003cString\u003e tasks \u003d controller.getAllTasks();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                Greetings.prettyPrint(tasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                tasks \u003d controller.filterTasks(taskName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                Greetings.prettyPrint(String.format(\"Found the following tasks based on filter\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                Greetings.prettyPrint(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            case \"mark\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                controller.setMark(taskName, true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                Greetings.prettyPrint(String.format(\"Marked task %s\", taskName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            case \"unmark\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                controller.setMark(taskName, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                Greetings.prettyPrint(String.format(\"Unmarked task %s\", taskName));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                controller.newTodo(taskName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                Greetings.prettyPrint(String.format(\"Marked task as todo: %s\", taskName));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                controller.newDeadline(taskName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                Greetings.prettyPrint(String.format(\"Marked task as deadline: %s\", taskName));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                controller.newEvent(taskName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                Greetings.prettyPrint(String.format(\"Marked task as event: %s\", taskName));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                controller.removeTask(taskName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                Greetings.prettyPrint(String.format(\"Deleted task: %s\", taskName));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            case \"save\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                controller.persist();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                Greetings.prettyPrint(String.format(\"Tasks saved to disk\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            case \"quit\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                Greetings.tearDown();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                contLoop \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                Greetings.handleUndefined();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                Greetings.prettyPrint(ex.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        Greetings.init();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        poll(args);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 83,
      "-": 4
    }
  },
  {
    "path": "src/main/java/com/nus/duke/Exception/DeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package com.nus.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class DeadlineException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public DeadlineException(String errorMsg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 7
    }
  },
  {
    "path": "src/main/java/com/nus/duke/Exception/DeleteTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package com.nus.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class DeleteTaskException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public DeleteTaskException(String errorMsg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 7
    }
  },
  {
    "path": "src/main/java/com/nus/duke/Exception/EventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package com.nus.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class EventException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public EventException(String errorMsg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 7
    }
  },
  {
    "path": "src/main/java/com/nus/duke/Exception/MarkException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package com.nus.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class MarkException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public MarkException(String errorMsg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 7
    }
  },
  {
    "path": "src/main/java/com/nus/duke/Exception/TaskNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package com.nus.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class TaskNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public TaskNotFoundException(String errorMsg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 7
    }
  },
  {
    "path": "src/main/java/com/nus/duke/Exception/TodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package com.nus.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class TodoException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "   public TodoException(String errorMsg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "       super(errorMsg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "   }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 7
    }
  },
  {
    "path": "src/main/java/com/nus/duke/controller/TaskController.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package com.nus.duke.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import com.nus.duke.exception.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import com.nus.duke.dao.DAOFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import com.nus.duke.dao.DAOInterface;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import com.nus.duke.storage.FileStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import com.nus.duke.storage.StorageInterface;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import com.nus.duke.tasks.DisplayTaskFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import com.nus.duke.tasks.Tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class TaskController {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private DAOInterface dataObj \u003d DAOFactory.getOrCreate();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private StorageInterface storage \u003d new FileStorage();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private boolean setTask(Tasks task, Tasks.TASK_STATUS lvl) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.dataObj.set(task, lvl);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private boolean setTask(Tasks task, Tasks.TASK_CATEGORY cat) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.dataObj.set(task, cat);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private List\u003cString\u003e tasksToString(List\u003cTasks\u003e tasks) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        List\u003cString\u003e formattedTasks \u003d tasks.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                            .map(eachTask -\u003e DisplayTaskFormatter.stringify(eachTask))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return formattedTasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Initializes a new Tasks object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param   name    Task description"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return          Tasks object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public Tasks createNewTask(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        Tasks task \u003d new Tasks(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.dataObj.add(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Getter method for seeking a task based on exact name matching"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param   name    Task name"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return  Tasks   Tasks object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public Tasks getTask(String name) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        Tasks taskObj \u003d dataObj.search(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        if (taskObj \u003d\u003d null) throw new TaskNotFoundException(\"Error! Task does not exist\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return taskObj;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Searches for"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param   filterString    Task description"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return                  Tasks names as a list of strings"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public List\u003cString\u003e filterTasks(String filterString) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        List\u003cTasks\u003e tasks \u003d dataObj.filter(filterString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return this.tasksToString(tasks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Returns a list of all tasks as their name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return                  Tasks names as a list of strings"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public List\u003cString\u003e getAllTasks() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        List\u003cTasks\u003e tasks \u003d dataObj.getAll();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return this.tasksToString(tasks);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Marks / unmarks a task"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param   name            Tasks name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param   isMark          Task is marked / unmarked"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return                  Tasks names as a list of strings"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public boolean setMark(String name, boolean isMark) throws MarkException, TaskNotFoundException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            throw new MarkException(\"Error! Can only mark a defined task\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            Tasks t \u003d this.getTask(name);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            Tasks.TASK_STATUS status \u003d isMark ? Tasks.TASK_STATUS.COMPLETE : Tasks.TASK_STATUS.INCOMPLETE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            return this.setTask(t, status);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Creates a new TODO task"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param   name            Tasks name"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return                  Creation succeeded / failed"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public boolean newTodo(String name) throws TodoException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            throw new TodoException(\"Error! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            Tasks t \u003d this.createNewTask(name);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            return this.setTask(t, Tasks.TASK_CATEGORY.TODO);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Creates a new Deadline task"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param   name            Tasks name"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return                  Creation succeeded / failed"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public boolean newDeadline(String name) throws DeadlineException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            throw new DeadlineException(\"Error! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            Tasks t \u003d this.createNewTask(name);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            return this.setTask(t, Tasks.TASK_CATEGORY.DEADLINE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Creates a new Event task"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param   name            Tasks name"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return                  Creation succeeded / failed"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public boolean newEvent(String name) throws EventException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            throw new EventException(\"Error! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            Tasks t \u003d this.createNewTask(name);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            return this.setTask(t, Tasks.TASK_CATEGORY.EVENT);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Saves stored tasks data out to a text file."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @// TODO: 2020-02-26     Do not hard code path. The saved directory should be abstracted into a configuration"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *                          file that the method uses to write the file."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return                  Persistance succeeded / failed"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public boolean persist() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        final String presentPath \u003d Paths.get(\".\").toAbsolutePath().normalize().toString();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        final String fileLocation \u003d presentPath + \"/duke-saved-record.txt\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        storage.save(fileLocation);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Deletes an existing task from storage"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param   name            Tasks name"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return                  Deletion succeeded / failed"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public boolean removeTask(String name) throws DeleteTaskException, TaskNotFoundException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            throw new DeleteTaskException(\"Error! Can only mark a defined task\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            Tasks t \u003d this.getTask(name);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            return this.dataObj.delete(t);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 171
    }
  },
  {
    "path": "src/main/java/com/nus/duke/dao/DAOFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package com.nus.duke.dao;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class DAOFactory {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private static DAOInterface dataObj \u003d null;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private DAOFactory() {}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     Factory method that returns a singleton object for a DAOInterface."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     This ensures that we only have a single point of access to the data."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     This method is thread safe"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     @param     daoInterface"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                DAO interface that we are using to store the data"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     @return    DAOInterface singleton object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private static synchronized  \u003cT extends DAOInterface\u003e DAOInterface getOrCreate(Class\u003cT\u003e daoInterface) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            if (dataObj \u003d\u003d null) dataObj \u003d daoInterface.newInstance();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            System.out.println(ex);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return dataObj;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     Method controls the dispatch of the DAO Object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     There should only be 1 type of the object for data consistency."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     @return    DAOInterface singleton object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public static synchronized \u003cT extends DAOInterface\u003e DAOInterface getOrCreate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return getOrCreate(InMemDAO.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 35
    }
  },
  {
    "path": "src/main/java/com/nus/duke/dao/DAOInterface.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package com.nus.duke.dao;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import static com.nus.duke.tasks.Tasks.TASK_STATUS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import static com.nus.duke.tasks.Tasks.TASK_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import com.nus.duke.tasks.Tasks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public interface DAOInterface{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public boolean add(Tasks task);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public boolean set(Tasks task, TASK_STATUS status);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public boolean set(Tasks task, TASK_CATEGORY category);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public boolean delete(Tasks task);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public Tasks search(String name);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public List\u003cTasks\u003e getAll();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public List\u003cTasks\u003e filter(String condition);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 16
    }
  },
  {
    "path": "src/main/java/com/nus/duke/dao/InMemDAO.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package com.nus.duke.dao;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import com.nus.duke.tasks.Tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import static com.nus.duke.tasks.Tasks.TASK_STATUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class InMemDAO implements DAOInterface {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private List\u003cTasks\u003e tasksList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public boolean add(Tasks task) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.tasksList.add(task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public boolean set(Tasks task, TASK_STATUS status) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        task.changeStatus(status);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public boolean set(Tasks task, Tasks.TASK_CATEGORY category) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        task.changeCategory(category);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public Tasks search(String name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        Optional\u003cTasks\u003e task \u003d this.tasksList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                    .stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                    .filter(eachTask -\u003e name.equals(eachTask.getName()))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                    .findFirst();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return task.isPresent() ? task.get() : null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public List\u003cTasks\u003e filter(String condition) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        List\u003cTasks\u003e tasks \u003d this.tasksList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                .stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                .filter(eachTask -\u003e eachTask.getName().contains(condition))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public boolean delete(Tasks task) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.tasksList.remove(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public List\u003cTasks\u003e getAll() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return this.tasksList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 60
    }
  },
  {
    "path": "src/main/java/com/nus/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package com.nus.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * \u003cp\u003e Splits an input string based on a white space character \u003c/p\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param   input       Input string"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return              (left, right) split of the string"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @see                 com.nus.duke.parser.Parser#tokenize(String, String)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public static Pair\u003cString, String\u003e tokenize(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return tokenize(input, \" \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * \u003cp\u003e  Splits a string into a (left, right) pair based on a supplied expression"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *      For this application, the left is deemed as the command issued by the user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *      and the right is deemed as the condition"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param    input          text string, such as \"list books\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param    expr           Split-by expression"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return                  Pair of (command, condition)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public static Pair\u003cString, String\u003e tokenize(String input, String expr) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        String[] res        \u003d input.split(expr, 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        String command      \u003d res[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        String condition    \u003d res.length \u003e 1 ? res[1] : null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return new Pair\u003c\u003e(command, condition);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 35
    }
  },
  {
    "path": "src/main/java/com/nus/duke/storage/FileReader.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package com.nus.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class FileReader {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 4
    }
  },
  {
    "path": "src/main/java/com/nus/duke/storage/FileStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package com.nus.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import com.nus.duke.dao.DAOFactory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import com.nus.duke.dao.DAOInterface;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import com.nus.duke.tasks.DisplayTaskFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import com.nus.duke.tasks.Tasks;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.io.Writer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class FileStorage implements StorageInterface {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private DAOInterface dataObj \u003d DAOFactory.getOrCreate();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private void write(String taskString, Writer writer) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            writer.write(taskString);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            writer.write(\"\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private void write(Tasks tasks, Writer writer) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        String taskString \u003d DisplayTaskFormatter.stringify(tasks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.write(taskString, writer);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private void write(List\u003cTasks\u003e tasks, String toFile) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        try (Writer writer \u003d new FileWriter(toFile, true)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            for (Tasks eachTask : tasks) this.write(eachTask, writer);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private void initFile(String file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        final Path fileLocation \u003d Paths.get(file);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        if (Files.notExists(fileLocation.getParent()))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            Files.createDirectory(fileLocation.getParent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        Files.deleteIfExists(fileLocation);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        Files.createFile(fileLocation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private void saveTasks(List\u003cTasks\u003e tasks, String toFile) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            this.initFile(toFile);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            this.write(tasks, toFile);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public void save(String toFile) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        List\u003cTasks\u003e tasks \u003d dataObj.getAll();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.saveTasks(tasks, toFile);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public void load() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 67
    }
  },
  {
    "path": "src/main/java/com/nus/duke/storage/StorageInterface.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package com.nus.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public interface StorageInterface {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public void save(String toFile);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public void load();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 6
    }
  },
  {
    "path": "src/main/java/com/nus/duke/tasks/DisplayTaskFormatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package com.nus.duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import com.nus.duke.parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class DisplayTaskFormatter {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private static String changeExprOnAt(String initialExpr) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        final String token \u003d \"/at\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        Pair\u003cString, String\u003e splittedExpr \u003d Parser.tokenize(initialExpr, token);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return String.format(\"%s (at: %s)\", splittedExpr.getKey(), splittedExpr.getValue());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private static String changeExprOnBy(String initialExpr) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        final String token \u003d \"/by\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        Pair\u003cString, String\u003e splittedExpr \u003d Parser.tokenize(initialExpr, token);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return String.format(\"%s (by: %s)\", splittedExpr.getKey(), splittedExpr.getValue());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Defines the string expression for a Task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param   task    Tasks class object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return  String  String representation of the class"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @see com.nus.duke.tasks.Tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public static String stringify(Tasks task){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        StringBuilder strBldr \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        strBldr.append(String.format(\"[%s][%s] \", task.getStatus().toString(), task.getType().toString()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        if (task.getName().contains(\"/by\"))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            strBldr.append(changeExprOnBy(task.getName()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        else if (task.getName().contains(\"/at\"))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            strBldr.append(changeExprOnAt(task.getName()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        else"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            strBldr.append(String.format(\"%s\", task.getName()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return strBldr.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 41
    }
  },
  {
    "path": "src/main/java/com/nus/duke/tasks/Tasks.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package com.nus.duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import com.nus.duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class Tasks {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public enum TASK_STATUS {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        INCOMPLETE {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            public String toString() { return \"\\u2717\"; }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        COMPLETE {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                return \"\\u2713\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        },"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public enum TASK_CATEGORY {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        TODO {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                return \"T\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        DEADLINE {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                return \"D\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        },"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        EVENT {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                return \"E\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        },"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private TASK_STATUS status;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private TASK_CATEGORY category;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public Tasks(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this(name, TASK_STATUS.INCOMPLETE, TASK_CATEGORY.TODO);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public Tasks(String name, TASK_STATUS status, TASK_CATEGORY category) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public TASK_STATUS getStatus() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return this.status;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public TASK_CATEGORY getType() {return this.category;}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public void changeStatus(TASK_STATUS status) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public void changeCategory(TASK_CATEGORY category) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        if (obj \u003d\u003d null) return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        if (obj \u003d\u003d this) return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        if (!(obj instanceof Tasks)) return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        Tasks o \u003d (Tasks) obj;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return o.getName() \u003d\u003d this.getName();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 72
    }
  },
  {
    "path": "src/main/java/com/nus/duke/ui/Greetings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package com.nus.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class Greetings {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private static final String WELCOME_LOGO    \u003d \" ____         _        \\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                                + \"|  _ \\\\ _  __| | _____ \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                                + \"| | | | | |  | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                                + \"| |_| | |_|  |   \u003c ___/\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private static final String WELCOME_TEXT    \u003d \"-----------------------------\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                                + \"Hello, I am Duke\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                                + \"What can I do for you?\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                                + \"-----------------------------\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private static final String EXIT_TEXT       \u003d \"-----------------------------\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                                + \"Goodbye\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                                + \"-----------------------------\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private static final String UNDEFINED       \u003d \"-----------------------------\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                                + \"Input is undefined. Try again\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                                + \"-----------------------------\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * \u003cp\u003e Welcome text logo and starting screen \u003c/p\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public static void init() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        System.out.println(WELCOME_LOGO);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        System.out.println(WELCOME_TEXT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * \u003cp\u003e Give the user a nice exit \u003c/p\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public static void tearDown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        System.out.println(EXIT_TEXT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * \u003cp\u003e If the user gives an unknown input \u003c/p\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public static void handleUndefined() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        System.out.println(UNDEFINED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * \u003cp\u003e Prettily formats a string with separators \u003c/p\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param s String argument"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public static void prettyPrint(String s) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        String formattedString \u003d String.format(   \"-----------------------------\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                                + \"%s\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                                + \"-----------------------------\\n\", s);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        System.out.println(formattedString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * \u003cp\u003e Prettily prints a list of strings with separators \u003c/p\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param strs  List of strings to be displayed"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @see com.nus.duke.ui.Greetings#prettyPrint(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public static void prettyPrint(List\u003cString\u003e strs) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        final AtomicInteger ctr \u003d new AtomicInteger();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        StringBuilder strBldr \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        strBldr.append(\"-----------------------------\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        strs.forEach(str -\u003e strBldr.append(String.format(\"%d. \", ctr.getAndIncrement()))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                    .append(str)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                    .append(\"\\n\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        strBldr.append(\"-----------------------------\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        System.out.println(strBldr.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 77
    }
  }
]
