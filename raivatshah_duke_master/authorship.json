[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "test {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 34,
      "-": 20
    }
  },
  {
    "path": "data/data.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "E | 1 | project meeting  | Mon 2-4pm"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "T | 1 | redbook"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "D | 1 | finish hw  | by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "T | 1 | read book"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 4
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "# User Guide for Duke "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "A versatile task manager every command-line user has been waiting for. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "## Features \u0026 Usage"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Duke allows you to add different types of Tasks, search for tasks using keywords, mark tasks as completed, "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "list all tasks and delete any task. Tasks are categorised into three categories:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "- ToDo: A simple todo task with just a description. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "- Deadline: A task that allows you to specify a \u0027by\u0027 property, in addition to a description, to specify the date "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "you need to complete it. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "- Event: A task that allows you to specify a \u0027at\u0027 property in addition to a description, to specify the "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "timing of the event "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "#### Add Tasks "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "- Add a ToDo using the command: `todo \u003cdescription\u003e`. For example, `todo write user guide for duke` will create "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "a todo with description *write user guide for duke* to your list of tasks. "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "- Add a Deadline using the command `deadline \u003cdescription\u003e /by \u003cby\u003e`. For example `deadline submit CS2103 project "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/by Monday` will create a Deadline with description *submit CS2103 project* and with by *Monday*. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "- Add an Event using the command `event \u003cdescription\u003e /at \u003ctime\u003e`. For example `event CS2103 tP showcase /at Mon 2-4pm`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "will create an Event with description *CS2103 tp showcase* and with time *Mon 2-4 pm*. "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "#### List Tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "This feature allows you to view all the tasks currently stored in duke. It shows their number in the list "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "(starting from 1), task type (todo, deadline or event), completion status, description and by/time (if any). "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "For example, running `list` after entering the above task creation commands will show the following output:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "```aidl"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "1. [T][✗] write user guide for duke"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "2. [D][✗] submit CS2103 project (by: Monday)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "3. [E][✗] CS2103 tP showcase (at: Mon 2-4 pm)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "```"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "#### Delete Tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "You can also delete tasks from duke. You can use the task number (as shown in the list command above) to "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "refer to a particular task. The syntax for this command is: `delete \u003ctask num\u003e`. For example, running `delete 3` "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "in our example above would delete the `event` task. If you run `list` again, you would get the following output:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "```aidl"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "1. [T][✗] write user guide for duke"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "2. [D][✗] submit CS2103 project (by: Monday)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "```"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "#### Complete Tasks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "You can mark tasks as completed when you\u0027re done with a particular task. Just like the `delete` command, you can refer "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "to a task using its number in the task list. The syntax for this command is: `done \u003ctask num\u003e`.  Continuing our example "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "from above, we can complete task number 2 using the command `done 2`. If you run `list` again, you would "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "get the following output:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "```aidl"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "1. [T][✗] write user guide for duke"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "2. [D][✓] submit CS2103 project (by: Monday)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Note that the completion status of the `deadline` task has changed. It now shows a `[✓]`. "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "#### Find Tasks using Keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "You can also find tasks matching a keyword. The syntax for this command is: `find \u003ckeyword\u003e`. If you do `find CS2103` "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "in the list now, you should get the following output:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "```aidl"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "2. [D][✓] submit CS2103 project (by: Monday)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "```"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "#### Use Shortcuts"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "You can also use shortcuts to create tasks. To activate shortcuts, simply send the `activate` command to Duke and "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "it will activate the shortcuts for you. With this, you can use the initial letter of each task type to create the "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "specific task. For example, `t` to create a `todo`, `d` for `deadline`, and `e` for `event`."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "To exit duke, you can simply enter `bye`. "
      }
    ],
    "authorContributionMap": {
      "raivatshah": 65,
      "-": 14
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 11
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents a Deadline which inherits from Task and is stored/managed by Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String DESCRIPTION_ERROR_MESSAGE \u003d \"Description of Deadline is empty\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String REGEX_DATE \u003d \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Stores the time the deadline is supposed to be complete."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    protected Optional\u003cLocalDate\u003e dueDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    protected boolean dueDatePresent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Creates a deadline object with given description and time to complete (by)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param description of the deadline"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param by time to complete the deadline by."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assert description.length() \u003e 0 : DESCRIPTION_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        dueDatePresent \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (this.by.matches(REGEX_DATE)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            this.dueDate \u003d Optional.of(LocalDate.parse(this.by));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            dueDatePresent \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Creates a deadline object with given description, time to complete (by) and done status. Used"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * when loading data from the data.txt file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param description of the deadline task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param by indicates the time the deadline is supposed to be achieved by."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param isDone indicates whether this has been marked as done."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Deadline(String description, String by, boolean isDone) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assert description.length() \u003e 0 : DESCRIPTION_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        dueDatePresent \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (this.by.matches(REGEX_DATE)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            this.dueDate \u003d Optional.of(LocalDate.parse(this.by));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            dueDatePresent \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Gives a string representation of the Deadline by building upon parent\u0027s representation method."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return a string representation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (dueDatePresent) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return \"[D]\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + super.toString()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \"(by: \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + this.dueDate.get().format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + \")\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return \"[D]\" + super.toString() + \"(by: \" + by + \")\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Gives a string representation of the task to be stored in data.txt"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return a String representation of the Deadline to be stored in the file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return \"D | \" + super.toFile() + \" | \" + by;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 84
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.control.OverrunStyle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * An example of a custom control using FXML. This control represents a dialog box consisting of an"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * ImageView to represent the speaker\u0027s face and a label containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author-souwmyaa-reuse"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setTextOverrun(OverrunStyle.CLIP);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setMinSize(200, Label.USE_PREF_SIZE + 50);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Gets a user\u0027s dialog based on given text and img."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param text to be used"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param img  to be used"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return a Dialog box object containing the text and image specified."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Gets a dialog box object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param text to be used"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param img  to be used"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return a Dialog box object containing the text and image specified."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 76,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents the Duke object with which the user interacts."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String FILE_PATH \u003d \"data/data.txt\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String BYE_COMMAND \u003d \"bye\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static String DONE_COMMAND \u003d \"done\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static String DELETE_COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static String FIND_COMMAND \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static String TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static String DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static String EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static String LIST \u003d \"list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String TASK_DESCRIPTION_ERROR \u003d \"OOPS, task description cannot be empty\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String INPUT_ERROR_MESSAGE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \"OOPS, I don\u0027t understand this input. Please use a known command \" + \"and try again\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String FILE_SAVING_ERROR \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \"Error saving to file. Please check if \u0027data.txt\u0027 is present in \" + \"\u0027/data/\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Creates a Duke Instance with given filePath."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param filePath is a String describing the relative path of the File object to which Duke will"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *                 write/read."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            tasks \u003d new TaskList(storage.getPreviousTasks(filePath));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Creates a Duke Instance with the file path specified in the constant."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this(FILE_PATH);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Gets a response from Duke based on a set of input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param input from the user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return a String with Duke\u0027s message."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (input.equalsIgnoreCase(BYE_COMMAND)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            output +\u003d ui.byeMessage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                storage.fillFileWithTasks(tasks.getTaskList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                output +\u003d FILE_SAVING_ERROR;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else if (input.startsWith(DONE_COMMAND)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            int index \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    Integer.parseInt(parser.parse(input, 2)[1]); // accept second argument from command line"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            output \u003d tasks.markDone(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else if (input.startsWith(DELETE_COMMAND)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            int index \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    Integer.parseInt(parser.parse(input, 2)[1]); // accept second argument from command line"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            output \u003d tasks.deleteTaskByIndex(index);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else if (input.equalsIgnoreCase(LIST)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            output \u003d tasks.printList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else if (input.startsWith(FIND_COMMAND)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String[] parsedInput \u003d parser.parse(input, 2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            output \u003d tasks.find(parsedInput[1]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else if (input.startsWith(\"activate\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            output \u003d activateAlias();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else if (input.startsWith(\"deactivate\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            output \u003d deactivateAlias();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String[] parsedInput \u003d parser.parse(input, 2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (input.startsWith(TODO) || input.startsWith(DEADLINE) || input.startsWith(EVENT)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    output \u003d tasks.addTask(parsedInput[0], parsedInput[1]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    output +\u003d TASK_DESCRIPTION_ERROR;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                output +\u003d INPUT_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Activates shortcuts for task creation."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return String confirming the same to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String activateAlias() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Duke.TODO \u003d \"t\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Duke.DEADLINE \u003d \"d\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Duke.EVENT \u003d \"e\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return \"Alright. I\u0027ve activated alias for task creation\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Deactivates shortcuts for task creation."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return String confirming the same to the user."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String deactivateAlias() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Duke.TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Duke.DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Duke.EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return \"Alright. I\u0027ve deactivated alias for task creation\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 123,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents an Event which inherits from Task and is stored/managed by Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String DESCRIPTION_ERROR \u003d \"Description of Event is empty\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static final String REGEX_DATE \u003d \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Stores the time the event is supposed to take place."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    protected Optional\u003cLocalDate\u003e dueTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    protected boolean timePresent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Creates an Event object with given description and time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param description of the event"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param time        of the event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Event(String description, String time) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assert description.length() \u003e 0 : DESCRIPTION_ERROR;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        timePresent \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (this.time.matches(REGEX_DATE)) { // YYYY-MM-DD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            this.dueTime \u003d Optional.of(LocalDate.parse(this.time));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            timePresent \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Creates an Event object with given description, time and done status. Used when loading data"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * from data.txt file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param description of the event"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param time        of the event"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param isDone      of the event"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Event(String description, String time, boolean isDone) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assert description.length() \u003e 0 : DESCRIPTION_ERROR;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        timePresent \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (this.time.matches(REGEX_DATE)) { // YYYY-MM-DD"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            this.dueTime \u003d Optional.of(LocalDate.parse(this.time));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            timePresent \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Gives a string representation of the Event by building upon parent\u0027s representation method."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return a String representation of the event"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (timePresent) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return \"[E]\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + super.toString()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    + String.format("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    \"(at: %s)\", this.dueTime.get().format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return \"[E]\" + super.toString() + String.format(\"(at: %s)\", this.time);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Gives a string representation of the Event object used for storing it in the data.txt file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return a String representation required for the file storage"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return \"E | \" + super.toFile() + \" | \" + time;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 83
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Starts the GUI."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param stage a stage object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 36
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(Ui.getWelcomeMessage(), dukeImage));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * appends them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        dialogContainer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .getChildren()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                .addAll("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                        DialogBox.getDukeDialog(response, dukeImage));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 55
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents a Parser object that parses user info for Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Parses the input text into limit divisions and by the whitespace character."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param text  to parse"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param limit num of pieces to make"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return a String array of parsed input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String[] parse(String text, int limit) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return text.split(\" \", limit);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 18
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents the file object to store the address book data."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    Storage(String filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Gets task from a stored file at given file path."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param path the relative path of the storage file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return an ArrayList of tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @throws FileNotFoundException an exception if the storage file is not found."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ArrayList\u003cTask\u003e getPreviousTasks(String path) throws FileNotFoundException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        File file \u003d new File(path);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Scanner input \u003d new Scanner(file);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        while (input.hasNextLine()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String line \u003d input.nextLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String[] data \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            boolean isValidBooleanLiteral \u003d data[1].equals(\"0\") || data[1].equals(\"1\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            assert isValidBooleanLiteral : \"Invalid Boolean Literal\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            switch (data[0]) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    task \u003d new ToDo(data[2], getBooleanFromString(data[1]));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    tasks.add(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    task \u003d new Deadline(data[2], data[3], getBooleanFromString(data[1]));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    tasks.add(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    task \u003d new Event(data[2], data[3], getBooleanFromString(data[1]));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    tasks.add(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                    System.out.println(\"Unknown task stored in the list\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Stores the given tasks into the storage file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param tasks an array list containing tasks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @throws IOException when file is not found."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void fillFileWithTasks(ArrayList\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        //Create file and directory if they don\u0027t exist already"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author aakanksha-rai-reused"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        File dir \u003d new File(\"data\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!dir.exists()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            dir.mkdirs();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String accumulatedTasks \u003d \"\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            accumulatedTasks \u003d accumulatedTasks + tasks.get(i).toFile() + \"\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        fw.write(accumulatedTasks);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Generates a boolean value from a string representation of 0 or 1."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param s the string input"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static boolean getBooleanFromString(String s) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (s.equals(\"0\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 87,
      "-": 7
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents a Task to be managed/stored by the command line application Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Creates a new Task with the given description and sets isDone to false by default."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param description of the Task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assert description.length() \u003e 0 : \"Description for todo provided by the user is empty\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Creates a new Task with given description and is Done status."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param description of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param isDone      of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assert description.length() \u003e 0 : \"Description for todo in the file is empty\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Gets the status icon of this Task based on whether it is done or not."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return a String containing the status icon (tick-mark or cross)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); // return tick or X symbols"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Marks this task as done by setting the isDone property to true."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Gives a string representation of the Task including the status icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return a String representation of the task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Outputs a string representation to be stored in file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return a String representation of the task to be stored in file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return \"1 | \" + this.description;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return \"0 | \" + this.description;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 72
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents the TaskList object that stores and retrieves the tasks to/from the hard drive."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Creates a Tasklist object with given ArrayList of Tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param tasks is an arraylist of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.taskArrayList \u003d tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Creates a TaskList object with an empty tasks ArrayList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Gets a Task object at the specified index in the Task List."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param index of the task in the list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return a Task object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Task getTaskByIndex(int index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.taskArrayList.get("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                index - 1); // -1 because indexing for user starts from 1, but 0 for arraylist."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Adds task to the tasklist."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param type        of the task to be added"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param description of the task to be added"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return a string message of confirmation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String addTask(String type, String description) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Task task \u003d new Task(\"sample\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (type.equals(Duke.EVENT)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                String[] args \u003d description.split(\"/\", 2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                task \u003d new Event(args[0], args[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                this.taskArrayList.add(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ui.timeErrorMessage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else if (type.equals(Duke.DEADLINE)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                String[] args \u003d description.split(\"/\", 2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                task \u003d new Deadline(args[0], args[1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                this.taskArrayList.add(task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                ui.timeErrorMessage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else if (type.equals(Duke.TODO)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            task \u003d new ToDo(description);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            taskArrayList.add(task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return \"Incorrect task added\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        output +\u003d \"Got it. I\u0027ve added this task:\" + \"\\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        output +\u003d task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        output +\u003d \"Now you have \" + taskArrayList.size() + \" tasks in your list.\" + \"\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return this.taskArrayList;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Marks a task as done and informs the user about the same."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String markDone(int index) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (index \u003e taskArrayList.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return \"There is no such task in the list. Please try again...\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String output \u003d \"Nice! I\u0027ve marked this task as done: \" + \"\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            taskArrayList.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            output +\u003d taskArrayList.get(index - 1).toString() + \"\\n\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Lists all the currently stored tasks on the system output."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String printList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        int n \u003d taskArrayList.size();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        output +\u003d \"Here are the tasks in your list:\" + \"\\n\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (int i \u003d 0; i \u003c n; i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String stringNew \u003d String.format(\"%d. %s\", i + 1, this.taskArrayList.get(i));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            output +\u003d stringNew + \"\\n\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Finds all matching cases of a string and prints those cases to console."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param input keyword"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String find(String input) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        int n \u003d taskArrayList.size();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        String concat \u003d \"\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        int matches \u003d 1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        for (int i \u003d 0; i \u003c n; i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            if (taskArrayList.get(i).description.contains(input)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                String representation \u003d String.format(\"%d. %s\", matches, this.taskArrayList.get(i));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                concat +\u003d representation + \"\\n\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                matches++;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (matches \u003e 1) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            concat \u003d \"Here are the matching tasks in your list:\" + concat;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            concat \u003d \"No tasks with given search keyword found. Please try again\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return concat;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Deletes the task at specified index if it exists. Otherwise displays error message to user."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String deleteTaskByIndex(int index) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        if (index \u003e taskArrayList.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return \"There is no such task in the list. Please try again...\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            Task deleted \u003d taskArrayList.get(index - 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            this.taskArrayList.remove(index - 1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            String output \u003d \"Noted. I\u0027ve removed this task:\" + \"\\n\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            output +\u003d deleted.toString() + \"\\n\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            output +\u003d String.format(\"Now you have %d tasks in your list\", taskArrayList.size()) + \"\\n\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 149
    }
  },
  {
    "path": "src/main/java/duke/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents a To-do which inherits from Task and is stored/managed by Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Creates a To-Do object with given description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @param description of the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * Gives a string representation of the To-do by building upon parent\u0027s representation method."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     * @return a string representation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return \"T | \" + super.toFile();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 34
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Helps Duke interact with the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static String getWelcomeMessage() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return \"Hello! I\u0027m Duke\" + \"\\n\" + \"What can I do for you?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public String byeMessage() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void timeErrorMessage() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        promptUser(\"Event and Deadline tasks require a \u0027/\u0027 character before specifying time\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public static void promptUser(String message) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 32
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 20
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import duke.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import duke.ToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " * Represents a class that is used to write JUnit tests for the duke application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void testToDo() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        ToDo todo \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertEquals(\"[T][✘] read book\", todo.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        TaskList tk \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        tk.addTask(\"todo\", \"watch movie\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        tk.markDone(1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertEquals(\"[T][✓] watch movie\", tk.getTaskByIndex(1).toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    public void testDeadline() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"assignment 1\", \"Mon 2 pm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "        assertEquals(\"[D][✘] assignment 1(by: Mon 2 pm)\", deadline.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 27
    }
  },
  {
    "path": "test-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "[T][✘] borrow book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Now you have 1 tasks in your list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "1. [T][✘] borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "[D][✘] return book (by: Sunday)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Now you have 2 tasks in your list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "[E][✘] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Now you have 3 tasks in your list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Nice! I\u0027ve marked this task as done: "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "[E][✓] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "1. [T][✘] borrow book"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "2. [D][✘] return book (by: Sunday)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "3. [E][✓] project meeting (at: Mon 2-4pm)"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 19
    }
  },
  {
    "path": "test-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 6
    }
  },
  {
    "path": "test-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin $(find ../src/main/java/* | grep .java);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raivatshah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raivatshah"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "raivatshah": 34
    }
  }
]
