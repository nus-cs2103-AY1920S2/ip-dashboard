[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.2.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    toolVersion(\"8.23\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    ignoreFailures(true)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine:5.5.0\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "version \u00270.1\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "// JUnit configuration"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "test {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    ignoreFailures(true)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    archiveVersion \u003d \"0.8\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "kevinswk94": 51
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "# Duke User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Duke is a chatbot that can help you manage your tasks. You can tell Duke to add, delete and mark as done tasks via short, simple to remember commands. "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "- [Requirements](#requirements)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "- [Features](#features)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    - [Interactive Graphical User Interface](#interacctive-graphical-user-interface)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    - [Types of tasks](#types-of-tasks)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    - [Search for tasks](#search-for-tasks)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "- [Usage](#usage)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    - [List tasks](#list-tasks)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    - [Add a task](#add-a-task)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    - [Delete a task](#delete-a-task)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    - [Mark a task as done](#mark-a-task-as-done)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    - [Find tasks](#find-tasks)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "## Requirements"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "- Duke requires Java 11 or later."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "- Duke only starts from the command line by entering the command: `java -jar Duke.jar`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "- You may download the Duke executable from [here](https://github.com/kevinswk94/duke/releases)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "### Interactive Graphical User Interface"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Duke comes with a GUI to provide users with visual feedback when Duke performs tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003cimg src\u003d\"Ui.png\" width\u003d\"250\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "### Types of tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Duke manages your tasks which are categorized into three types:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "- Todos"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "- Deadlines"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "- Events"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "You can add, delete, find and mark tasks as done from the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "### List tasks"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "List all the tasks that Duke has in its database."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "`list`\u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "It will show all the tasks in the database."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "### Add a task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Adds a new task to Duke\u0027s database. Duke classifies tasks into three types, so it accepts the following formats:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "- `todo \u003cdescription\u003e`\u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Adds your todo to your database."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "- `deadline \u003cdescription\u003e /by \u003cdue-date\u003e`\u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Adds your deadline that is due on the `due-date` to the database. The `due-date`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "must be in `yyyy-MM-dd` format."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "- `event \u003cdescription\u003e /at \u003cevent-date\u003e`\u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Adds your event that happens on the `event-date` to the database. The `event-date`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "must be in `yyyy-MM-dd` format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Sample usage: "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "- `todo read book`\u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Adds a new todo task with the description `read book`. Duke will update you if the todo is added successfully or there is a parsing error."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "- `event project meeting /at 2020-01-10`\u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Adds a new event task with the description `project meeting` and event date `Jan 10 2020`. Duke will update you if the event is added successfully or there is a parsing error."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "- `deadline return book /by 2020-10-01`\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Adds a new deadline task with the description `return book` which is due at `Oct 1 2020`. Duke will update you if the deadline is added successfully or there is a parsing error."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "### Delete a task"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Removes a task from Duke\u0027s database, according to its index in the database.\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "`delete \u003cindex\u003e`\u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "`delete 2`\u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Removes the second task that appears in your task list. Duke will update you if the task is deleted successfully or if the index provided is out of the range of tasks shown."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "### Mark a task as done"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Marks a task in a list, according to its number inside the list.\u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "`done \u003cindex\u003e`\u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Sample usage:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "`done 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Marks the first task as done. Duke will update you if the task is marked as done successfully or if the index provided is out of the range of tasks shown."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "### Find tasks"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Lists all tasks with certain keywords in their description.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "`find \u003ckeyword\u003e`\u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Sample usage:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "`find book`\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Duke finds and displays all tasks that contains `book` in their description."
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 78,
      "-": 14
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Creates a dialog box which contains a message and an image."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param text the message to be displayed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param img the image to be displayed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @return a dialog box object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 65
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * The main class for the Duke chat bot."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Instantiates a storage, tasks and ui object for the runtime of the program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public TaskList tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Instantiates a Duke instance with a path to a save file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.tasks \u003d new TaskList(storage.loadTasks());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * The main method of the Duke class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param args Arguments to be passed into Duke"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Starts the Duke program after initialisation."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        String saveLocation \u003d ui.readCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (saveLocation.equals(\"\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            saveLocation \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.storage \u003d new Storage(saveLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.tasks \u003d new TaskList(storage.loadTasks());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Ui.printMessage(\"How may I help you?\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        boolean isByeCommand \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        while (!isByeCommand) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                isByeCommand \u003d c.isByeCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                ui.printMessage(ex.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Ui.printMessage(\"Bye! Hope you visit again soon!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Retrieves a response from the Duke chat bot after sending it a command."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param input command sent to Duke"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @return the response from Duke"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // Change stdout for duke"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        System.setOut(new PrintStream(output));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            // Display error message"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            System.out.print(dukeException.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        response \u003d output.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        response \u003d response.trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // Reset stdout for duke"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        System.setOut(System.out);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public String printWelcome() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return Ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 96,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            stage.setTitle(\"Duke Chatbot Assistant\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 31
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        displayDukeDialog(duke.printWelcome());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void displayDukeDialog(String output) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(output, dukeImage));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 60
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public boolean isByeCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 19
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private int validNumOfArgs \u003d 2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public abstract boolean isByeCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Checks if the command contains a valid number of arguments."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param numOfArgs the valid number of arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @return true if the comamnd contains the valid number of args, false otherwise"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public boolean hasValidNumOfArgs(int numOfArgs) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        boolean result;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (numOfArgs \u003c validNumOfArgs) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            result \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            result \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 29
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.exception.InsufficientArgumentsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private String[] deadlineArgs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Initialises a new DeadlineCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param cmdArgs The command arguments passed to the DeadlineCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @throws DukeException If an insufficient number of arguments is provided"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public DeadlineCommand(String[] cmdArgs) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (!hasValidNumOfArgs(cmdArgs.length)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new InsufficientArgumentsException(\"OOPS!!! The description of a DEADLINE cannot be empty!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            String[] deadlineArgs \u003d cmdArgs[1].split(\" /by \", 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            if (!hasValidNumOfArgs(deadlineArgs.length)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                throw new InsufficientArgumentsException(\"OOPS!!! Missing deadline parameters!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                this.deadlineArgs \u003d deadlineArgs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            Task newTask \u003d new Deadline(deadlineArgs[0], LocalDate.parse(deadlineArgs[1]));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            assert newTask !\u003d null : \"newTask should not be null.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            tasks.addTask(newTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            ui.displayAddTaskSuccessMsg(newTask, tasks.getNumberOfTasks());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            storage.storeTasks(tasks.getTasks());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            Ui.printMessage(\"OOPS!!! Please enter a valid date: YYYY-MM-DD\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public boolean isByeCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 52
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.exception.InsufficientArgumentsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Initialises a new DeleteCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param cmdArgs The arguments passed into the DeleteCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @throws DukeException If an insufficient number of arguments is provided or non-integer argument is provided"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public DeleteCommand(String[] cmdArgs) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // TODO: add varargs (etc: delete 4 2 1)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (!hasValidNumOfArgs(cmdArgs.length)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new InsufficientArgumentsException(\"☹ OOPS!!! DELETE command expects 1 integer argument!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                this.index \u003d Integer.parseInt(cmdArgs[1]) - 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                throw new DukeException(\"OOPS!!! Please enter a Integer value!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Task task \u003d tasks.getTask(this.index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assert task !\u003d null : \"Task should not be null.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        tasks.deleteTask(this.index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Ui.printMessage(\"Noted! I\u0027ve removed this task:\\n\\t\" + task + \"\\nNow you have \" + tasks.getNumberOfTasks()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                        + \" tasks in the list.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        storage.storeTasks(tasks.getTasks());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public boolean isByeCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 47
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.exception.InsufficientArgumentsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Initialises a new DoneCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param cmdArgs The arguments passed into the DoneCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @throws DukeException If an insufficient number of arguments is provided or non-integer arg is provided"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public DoneCommand(String[] cmdArgs) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        // TODO: add varargs (etc: done 4 2 1)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (!hasValidNumOfArgs(cmdArgs.length)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new InsufficientArgumentsException(\"OOPS!!! DONE command expects 1 integer argument!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                this.index \u003d Integer.parseInt(cmdArgs[1]) - 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                throw new DukeException(\"OOPS!!! DONE command expects 1 integer argument!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Task task \u003d tasks.getTask(this.index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assert task !\u003d null : \"Task should not be null.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        tasks.markTaskAsDone(this.index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Ui.printMessage(\"Nice! I\u0027ve marked this task as done:\\n\\t\" + task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        storage.storeTasks(tasks.getTasks());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public boolean isByeCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 46
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.exception.InsufficientArgumentsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private String[] eventArgs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Initialises a new EventCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param cmdArgs The arguments passed into the EventCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @throws DukeException If an insufficient number of arguments is provided"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public EventCommand(String[] cmdArgs) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (!hasValidNumOfArgs(cmdArgs.length)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new InsufficientArgumentsException(\"☹ OOPS!!! The description of a EVENT cannot be empty!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            String[] eventArgs \u003d cmdArgs[1].split(\" /at \", 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            if (!hasValidNumOfArgs(eventArgs.length)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                throw new InsufficientArgumentsException(\"☹ OOPS!!! Missing event parameters!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                this.eventArgs \u003d eventArgs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            Task newTask \u003d new Event(eventArgs[0], LocalDate.parse(eventArgs[1]));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            assert newTask !\u003d null : \"newTask should not be null.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            tasks.addTask(newTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            Ui.displayAddTaskSuccessMsg(newTask, tasks.getNumberOfTasks());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            storage.storeTasks(tasks.getTasks());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            Ui.printMessage(\"☹ OOPS!!! Please enter a valid date: YYYY-MM-DD\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public boolean isByeCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 52
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.exception.InsufficientArgumentsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private String searchTerm;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Initialises a new FindCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param cmdArgs The arguments passed into the FindCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @throws DukeException If an insufficient number of arguments is provided"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public FindCommand(String[] cmdArgs) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (!hasValidNumOfArgs(cmdArgs.length)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new InsufficientArgumentsException(\"☹ OOPS!!! FIND command expects a search term!\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            this.searchTerm \u003d cmdArgs[1];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assert searchTerm !\u003d null : \"search term should not be null\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Ui.printMessage(tasks.findTask(searchTerm));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public boolean isByeCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 35
    }
  },
  {
    "path": "src/main/java/duke/command/Keyword.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Keywords that Duke responds to."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public enum Keyword {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    BYE, FIND, LIST, DONE, DELETE, DEADLINE, EVENT, TODO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Retrieves the Keyword enum from provided input string."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param cmd The input string"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @return A Keyword enum"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @throws InvalidCommandException If an invalid command is provided"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static Keyword getKeyword(String cmd) throws InvalidCommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        cmd \u003d cmd.toLowerCase();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (cmd.equals(\"bye\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return Keyword.BYE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } else if (cmd.equals(\"find\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return Keyword.FIND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } else if (cmd.equals(\"list\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return Keyword.LIST;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } else if (cmd.equals(\"done\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return Keyword.DONE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } else if (cmd.equals(\"delete\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return Keyword.DELETE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } else if (cmd.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return Keyword.DEADLINE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } else if (cmd.equals(\"event\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return Keyword.EVENT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } else if (cmd.equals(\"todo\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return Keyword.TODO;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 39
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        tasks.displayTasks();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public boolean isByeCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 18
    }
  },
  {
    "path": "src/main/java/duke/command/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Parses user input to determine what action to take."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param fullCommand The command entered by the user"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @return The Command corresponding to the command entered"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @throws DukeException If an invalid command is provided"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        String[] cmdArgs \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Keyword keyword \u003d Keyword.getKeyword(cmdArgs[0]);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Command cmd;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            cmd \u003d new ByeCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            cmd \u003d new ListCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            cmd \u003d new DoneCommand(cmdArgs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            cmd \u003d new FindCommand(cmdArgs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            cmd \u003d new DeleteCommand(cmdArgs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            cmd \u003d new DeadlineCommand(cmdArgs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            cmd \u003d new EventCommand(cmdArgs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            cmd \u003d new TodoCommand(cmdArgs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return cmd;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 49
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.exception.InsufficientArgumentsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Initialises a new TodoCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param cmdArgs The arguments passed into the TodoCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @throws DukeException If an insufficient number of arguments is provided"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public TodoCommand(String[] cmdArgs) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (!hasValidNumOfArgs(cmdArgs.length)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new InsufficientArgumentsException(\"OOPS!!! The description of a TODO cannot be empty!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            this.description \u003d cmdArgs[1];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new InsufficientArgumentsException(\"☹ OOPS!!! TODO description cannot be empty!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            Task newTask \u003d new Todo(description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            assert newTask !\u003d null : \"newTask should not be null.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            tasks.addTask(newTask);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            Ui.displayAddTaskSuccessMsg(newTask, tasks.getNumberOfTasks());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            storage.storeTasks(tasks.getTasks());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public boolean isByeCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 44
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public DukeException(String errMsg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        super(errMsg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/InsufficientArgumentsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class InsufficientArgumentsException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public InsufficientArgumentsException(String errMsg) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        super(errMsg);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public InvalidCommandException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/OutOfRangeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class OutOfRangeException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public OutOfRangeException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        super(\"OOPS!!! Task number out of range!\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 9
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private String workingDir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private Path file;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.file \u003d Paths.get(workingDir, filePath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static boolean parseTaskStatusFromString(String status) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return status.equals(\"1\") ? true : false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Retrieves stored tasks from a save file and adds them to a list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @return A list of the tasks stored in a save file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public List\u003cTask\u003e loadTasks() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        List\u003cTask\u003e retrievedTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            if (!Files.exists(file)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                Files.createDirectories(file.getParent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                Files.createFile(file);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                List\u003cString\u003e lines \u003d Files.readAllLines(file);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                for (String line : lines) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    String[] lineSplit \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    if (lineSplit[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                        retrievedTasks.add(new Todo(lineSplit[2], parseTaskStatusFromString(lineSplit[1])));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    } else if (lineSplit[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                        retrievedTasks.add(new Deadline(lineSplit[2], LocalDate.parse(lineSplit[3]),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                                parseTaskStatusFromString(lineSplit[1])));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    } else if (lineSplit[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                        retrievedTasks.add(new Event(lineSplit[2], LocalDate.parse(lineSplit[3]),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                                parseTaskStatusFromString(lineSplit[1])));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return retrievedTasks;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Saves the tasks from a list into a save file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param tasks The list of tasks"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void storeTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            result.append(task.generateSaveFileEntry());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            Files.write(file, result.toString().getBytes());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            System.err.println(\"duke.task.Task file not found.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 82
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " * Represents a Deadline task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private LocalDate dueDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Constructs a new deadline task with a description and due date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param desc    The description of the deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param dueDate The due date of the deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Deadline(String desc, LocalDate dueDate) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Constructs a new deadline task with a description, due date and status."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param desc    The description of the deadline."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param dueDate The due date of the deadline."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param isDone  The status of the deadline."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Deadline(String desc, LocalDate dueDate, boolean isDone) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        super.setStatus(isDone);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Returns a save file entry to be inserted into a save file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @return The save file entry generated from a Deadline"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public String generateSaveFileEntry() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return String.format(\"D | %d | %s | %s\\n\", this.getStatusAsInt(), this.getDescription(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                this.dueDate.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Returns a string representation of a Deadline."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @return The string representation of a Deadline"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return String.format(\"[D] [%s] %s (by: %s)\", this.getStatus(), this.getDescription(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                this.dueDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 57
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    protected LocalDate duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Event(String desc, LocalDate duration) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Constructs a new Event task from a description, duration and status."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param desc     The description of the Event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param duration The duration of the Event"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param isDone   The status of the Event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Event(String desc, LocalDate duration, boolean isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        super.setStatus(isDone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public String generateSaveFileEntry() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return String.format(\"E | %d | %s | %s\\n\", this.getStatusAsInt(), this.getDescription(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                this.duration.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return String.format(\"[E] [%s] %s (at: %s)\", this.getStatus(), this.getDescription(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                this.duration.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 39
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Task(String desc) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.description \u003d desc;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return isDone ? \"V\" : \"X\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void setStatus(boolean status) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.isDone \u003d status;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public int getStatusAsInt() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return isDone ? 1 : 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public abstract String generateSaveFileEntry();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return String.format(\"[%s] %s\", this.getStatus(), this.description);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 39
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.exception.OutOfRangeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public int getNumberOfTasks() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Retrieves the Task at the index."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param index the task index"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @return the Task at the specified index"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @throws OutOfRangeException If the provided index is out of range"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Task getTask(int index) throws OutOfRangeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (isValidTask(index)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return tasks.get(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new OutOfRangeException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Marks the Task at the specified index as done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param index The index of the Task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @throws OutOfRangeException If the provided index is out of range"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void markTaskAsDone(int index) throws OutOfRangeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assert tasks.size() \u003e 0 : \"TaskList should not be empty.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (isValidTask(index)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            tasks.get(index).markAsDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new OutOfRangeException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Deletes the Task at the specified index."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param index The index of the Task"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @throws OutOfRangeException If the provided index is out of range"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void deleteTask(int index) throws OutOfRangeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (isValidTask(index)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            this.tasks.remove(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new OutOfRangeException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Displays the tasks currently in Duke\u0027s database."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public void displayTasks() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            if (i !\u003d tasks.size() - 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                result.append(String.format(\"%d. %s\\n\", i + 1, tasks.get(i)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                result.append(String.format(\"%d. %s\", i + 1, tasks.get(i)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Ui.printMessage(result.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Finds tasks that contains the specified input."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param searchTerm The term to search for"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @return Tasks that contain the search term in their description"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public String findTask(String searchTerm) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        StringBuilder result \u003d new StringBuilder(\"Here\u0027s the matching tasks in your list:\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            if (task.getDescription().contains(searchTerm)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                result.append(String.format(\"\\n\\t%d. %s\", ++i, task.toString()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return \"No results matching your search was found!\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Checks if the specified index corresponds to a valid Task."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @param index The index of the Task"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @return True if the task exists, false otherwise"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @throws OutOfRangeException If the provided index is out of range"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public boolean isValidTask(int index) throws OutOfRangeException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            throw new OutOfRangeException();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 120
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Todo(String desc) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Todo(String desc, boolean isDone) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        super.setStatus(isDone);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public String generateSaveFileEntry() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return String.format(\"T | %d | %s\\n\", this.getStatusAsInt(), this.getDescription());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return String.format(\"[T] [%s] %s\", this.getStatus(), this.getDescription());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 22
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static void printMessage(String msg) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        System.out.println(msg);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * Creates the welcome message to be displayed on Duke\u0027s startup."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     * @return the welcome message"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static String printWelcomeMessage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        result.append(\"Greetings from Duke! How can I help you?\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public static void displayAddTaskSuccessMsg(Task task, int numOfTasks) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        Ui.printMessage(\"Got it! I\u0027ve added the task:\\n\\t\" + task + \"\\nNow you have \" + numOfTasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                        + \" tasks in the list.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        return this.scanner.nextLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 42
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                \u003cInsets left\u003d\"15.0\" right\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 23
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                   AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                    vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 24
    }
  },
  {
    "path": "src/test/java/duke/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    void generateSaveFileEntry_validDeadline_returnsEntry() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(\"D | 0 | return book | 2020-01-10\\n\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                new Deadline(\"return book\", LocalDate.parse(\"2020-01-10\")).generateSaveFileEntry());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(\"D | 1 | return book | 2020-10-01\\n\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                new Deadline(\"return book\", LocalDate.parse(\"2020-10-01\"), true).generateSaveFileEntry());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    void toString_validDeadline_returnsString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(\"[D] [X] return book (by: Jan 10 2020)\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                new Deadline(\"return book\", LocalDate.parse(\"2020-01-10\")).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(\"[D] [V] return book (by: Oct 1 2020)\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                new Deadline(\"return book\", LocalDate.parse(\"2020-10-01\"), true).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 27
    }
  },
  {
    "path": "src/test/java/duke/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    void generateSaveFileEntry_validEvent_returnsEntry() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(\"E | 0 | project meeting | 2020-01-10\\n\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                new Event(\"project meeting\", LocalDate.parse(\"2020-01-10\")).generateSaveFileEntry());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(\"E | 1 | project meeting | 2020-10-01\\n\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                new Event(\"project meeting\", LocalDate.parse(\"2020-10-01\"), true).generateSaveFileEntry());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(\"E | 0 | project meeting | 2020-10-01\\n\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                new Event(\"project meeting\", LocalDate.parse(\"2020-10-01\"), false).generateSaveFileEntry());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    void toString_validEvent_returnsString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(\"[E] [X] project meeting (at: Jan 10 2020)\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                new Event(\"project meeting\", LocalDate.parse(\"2020-01-10\")).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(\"[E] [V] project meeting (at: Jan 10 2020)\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "                new Event(\"project meeting\", LocalDate.parse(\"2020-01-10\"), true).toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 29
    }
  },
  {
    "path": "src/test/java/duke/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "class TodoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    void generateSaveFileEntry_validTodo_returnsEntry() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(\"T | 0 | read book\\n\", new Todo(\"read book\").generateSaveFileEntry());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(\"T | 1 | read book\\n\", new Todo(\"read book\", true).generateSaveFileEntry());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(\"T | 0 | read book\\n\", new Todo(\"read book\", false).generateSaveFileEntry());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    void toString_validTodo_returnsString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(\"[T] [X] read book\", new Todo(\"read book\").toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "        assertEquals(\"[T] [V] read book\", new Todo(\"read book\", true).toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 22
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "Hello from"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": " ____        _"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|  _ \\ _   _| | _____"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\tGreetings! I\u0027m Duke!"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\tHow may I help you?"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\tGot it! I\u0027ve added the task:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\t\t[T] [X] read book"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\tNow you have 1 tasks in the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\t1. [T] [X] read book"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\tGot it! I\u0027ve added the task:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\t\t[D] [X] return book (by: Today)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\tNow you have 2 tasks in the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\t1. [T] [X] read book"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\t2. [D] [X] return book (by: Today)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\tNice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\t[D] [V] return book (by: Today)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\tBye! Hope you visit again soon!"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "\t____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 43
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "deadline return book /by Today"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 6
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin\\main ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "java -classpath ..\\bin\\main Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinswk94"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "kevinswk94": 21
    }
  }
]
