[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        attributes("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                \u0027Main-Class\u0027: \u0027duke.Duke\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        )"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    archiveVersion \u003d \"0.1\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.3.1\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine:5.3.1\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 30,
      "-": 21
    }
  },
  {
    "path": "notes.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Git Notes taken from: https://www.atlassian.com/git/tutorials/inspecting-a-repository/git-tag"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "# Pushing to Git with tag"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "`git tag [tag]` to tag"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "`git push origin [tag]\u0027 to push to origin with tag"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "# Tagging Old Commits"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "`git tag [tag] [commit-ref]\u0027 to tag a old commit"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "can then push as above"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "# Updating Branch from Master"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "git stash          #  move local uncomitted changes away"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "git checkout feature-branch"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "git rebase --onto v2.0 origin/master"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "git stash apply    # reapply uncommitted changes"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "# Exporting Jar"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "`./gradlew shadowjar` in CLT, version numbers managed in build.gradle, output files in /build/libs"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 17
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import duke.exceptions.IncorrectArgumentException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Duke class represents the main chatbot entity; it contains classes that manage different components of the chatbot."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Initializes Duke and loads the TaskList from the files in the save directory."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param filePath the path where the saved Tasklist file is stored."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Duke(Path filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        parser \u003d new Parser(storage, ui, tasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            storage.loadFromFile(tasks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            System.out.println(\"    Tasklist loaded!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            System.out.println(\"    No prior tasklist found...\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            System.out.println(\"    Existing tasklist cannot be read...\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            System.out.println(\"    Existing tasklist cannot be read...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Path saveDir \u003d Paths.get(System.getProperty(\"user.dir\"), \"data.duke\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        new Duke(saveDir).run();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /** Starts Duke and begins reading commands from input. */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private void run() {       "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ui.out(\"Hello! I\u0027m Duke\", \"What can I do for you?\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        boolean isShutdown \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        while (!isShutdown) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            String line \u003d ui.getLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                isShutdown \u003d parser.parse(line);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                storage.saveToFile(tasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            } catch (InvalidCommandException | IncorrectArgumentException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                ui.out(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            } catch (IOException | NumberFormatException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 58,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import duke.exceptions.IncorrectArgumentException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/** "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Class which deals with making sense of the user command. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Deconstructs a line into a String[] of arguments, with the first item being the cmd and the rest the arg."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Afterwards, performs checks for the validity of cmd and arg and throws exceptions if not valid."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * If no exceptions are thrown, it calls the respective classes to execute the command. "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final boolean SHUTDOWN \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Public constructor which creates a Parser. As it passes valid commands to be executed by the respective"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * classes, a reference to the corresponding classes is passed in during construction."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param storage a reference to the underlying Storage object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param ui a reference to the underlying Ui object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param tasks a reference to the TaskList that the current application uses to hold Task entities."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Parser(Storage storage, Ui ui, TaskList tasks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Parses the entire comment line by verifying the command and arguments, and then passes on the command "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * to the corresponding methods."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param line the entire command line retrieved from Scanner.nextLine()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return true if the last command is a termination command, or \u0027bye\u0027, and false otherwise."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @throws IncorrectArgumentException when the wrong number or type of arguments are supplied to the command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @throws InvalidCommandException when a command is entered that does not exist."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @throws IOException when the Storage object fails in saving the TaskList to file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean parse(String line) throws IncorrectArgumentException, InvalidCommandException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String[] cmd \u003d line.split(\" \", 2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        boolean isBye \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        switch (cmd[0].toLowerCase()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            isBye \u003d bye();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            isBye \u003d list();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            isBye \u003d done(Integer.parseInt(cmd[1]));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            isBye \u003d todo(cmd[1]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            isBye \u003d deadline(cmd[1]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            isBye \u003d event(cmd[1]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            isBye \u003d delete(Integer.parseInt(cmd[1]));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            isBye \u003d find(cmd[1]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new InvalidCommandException(\"invalid command:\\n      \" + line + \"\\n    please try again\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        storage.saveToFile(tasks);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return isBye;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private boolean bye() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ui.out(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ui.close();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return SHUTDOWN;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private boolean list() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ui.out(tasks.list());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return !SHUTDOWN;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private boolean done(int i) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ui.out(tasks.done(i));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return !SHUTDOWN;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private boolean todo(String args) throws IncorrectArgumentException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String[] argv \u003d args.split(\"/\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (argv[0].equals(\"\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new IncorrectArgumentException(\"Oops! Missing required arguments: Task Description\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        } else if (argv.length \u003e 1) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new IncorrectArgumentException(\"Too many arguments!\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ui.out(tasks.addTodo(argv[0]));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return !SHUTDOWN;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private boolean deadline(String args) throws IncorrectArgumentException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String[] argv \u003d args.split(\" /by \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (argv[0].equals(\"\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new IncorrectArgumentException("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                \"Oops! Missing required arguments: \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                .concat(argv.length \u003d\u003d 1 "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    ? \"Task Description, by..\" "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    : \"Task Description\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        } else if (argv.length \u003c 2) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new IncorrectArgumentException(\"Oops! Missing required arguments: /by..\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        } else if (argv.length \u003e 2) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new IncorrectArgumentException(\"Too many arguments!\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            String[] textDateTime \u003d argv[1].split(\" \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            LocalDate date \u003d toDate(textDateTime[0]);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            LocalTime time \u003d toTime(textDateTime[1]);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            ui.out(tasks.addDeadline(argv[0], date, time));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new IncorrectArgumentException(\"Incorrect Date/Time format!\\n     Correct format: yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return !SHUTDOWN;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private boolean event(String args) throws IncorrectArgumentException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String[] argv \u003d args.split(\" /at \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (argv[0].equals(\"\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new IncorrectArgumentException("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                \"Oops! Missing required arguments: \""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                .concat(argv.length \u003d\u003d 1 "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    ? \"Task Description, at..\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    : \"Task Description\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        } else if (argv.length \u003c 2) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new IncorrectArgumentException(\"Oops! Missing required arguments: /at..\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        } else if (argv.length \u003e 2) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new IncorrectArgumentException(\"Too many arguments!\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            String[] textDateTime \u003d argv[1].split(\" \");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            LocalDate date \u003d toDate(textDateTime[0]);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            LocalTime time \u003d toTime(textDateTime[1]);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            ui.out(tasks.addEvent(argv[0], date, time));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new IncorrectArgumentException(\"Incorrect Date/Time format!\\n     Correct format: yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return !SHUTDOWN;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private boolean delete(int i) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ui.out(tasks.delete(i));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return !SHUTDOWN;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private boolean find(String query) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ui.out(tasks.find(query));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return !SHUTDOWN;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /** Accepts a date in the format provided in the default formatter, DateTimeFormatter.ISO_LOCAL_DATE */ "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static LocalDate toDate(String s) throws DateTimeParseException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return LocalDate.parse(s);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Accepts a date according to the following 24H format: HHmm."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param s a string representing the time in 24H format"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return a LocalTime object representing the time given."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @throws DateTimeParseException when an invalid time is passed."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static LocalTime toTime(String s) throws DateTimeParseException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        int time \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return LocalTime.of(time / 100, time % 100);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 184
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/** "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Class which handles the underlying implementation of I/O from and to files."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " *      1. Reading of tasks from a file and updating the current TaskList object;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " *      2. Saving tasks from the current TaskList to the file in the filepath provided."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Path dir \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Storage (final Path filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        dir \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Attempts to load from the filepath provided in the constructor a saved Tasklist."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param tasks the TaskList which is to be loaded with Tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return true if the TaskList was successfully loaded from file and false otherwise"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @throws FileNotFoundException if FileInputStream cannot find the file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @throws IOException if FileInputStream can find but cannot open the file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @throws ClassNotFoundException if ObjectInputStream cannot convert the Object to an ArrayList\u003cTask\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean loadFromFile(TaskList tasks) throws FileNotFoundException, IOException, ClassNotFoundException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        FileInputStream fileIn \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ObjectInputStream objIn \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ArrayList\u003cTask\u003e savedTasks \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        boolean loadSuccessful \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (java.nio.file.Files.exists(dir)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                // Read serialized object from file as a String"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                fileIn \u003d new FileInputStream(new File(dir.toString())); "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                objIn \u003d new ObjectInputStream(fileIn);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                // @SuppressWarnings unchecked cast warning: no way to verify type of generic at runtime"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                savedTasks \u003d (ArrayList\u003cTask\u003e) objIn.readObject(); "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                if (fileIn !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    fileIn.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                if (objIn !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    objIn.close();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                if (tasks !\u003d null \u0026\u0026 savedTasks !\u003d null \u0026\u0026 tasks.load(savedTasks)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    loadSuccessful \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return loadSuccessful;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Saves the Tasks from the current instantiated TaskList to a file"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param tasks the TaskList which contains the Tasks to be saved"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return true if the file was successfully saved"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @throws IOException if the file could not be opened"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean saveToFile(final TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // read serialized object from file as a String"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        final FileOutputStream  fileOut \u003d new FileOutputStream(new File(dir.toString()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        final ObjectOutputStream  objOut \u003d new ObjectOutputStream(fileOut);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        objOut.writeObject(tasks.save());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        fileOut.close();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        objOut.close();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 80
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/** Class which contains the list of Task entities, and contains methods supporting the addition and removal of tasks. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /** List of tasks; assume no more than 100 tasks. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private ArrayList\u003cTask\u003e lTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Loads tasks from the list returned by Storage if there are no tasks already loaded."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param tasks the list of tasks returned by storage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return true if the tasks were successfully loaded and false otherwise."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean load(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (lTasks.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            lTasks.addAll(tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Passes a copy of the list of Tasks to Storage for saving."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return a list of Tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public ArrayList\u003cTask\u003e save() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new ArrayList\u003cTask\u003e(lTasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Adds a Todo task to the Task List."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param desc description of the Todo Task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return A string describing the Task that was added."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public String[] addTodo(String desc) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return add(new Todo(desc));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Adds a Task of type Deadline to the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param desc the description of the Task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param date the date the task is due by."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param time the time the task is due by."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return a String describing the Log that is displayed by the Ui after the task is executed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public String[] addDeadline (String desc, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return add(new Deadline(desc, date, time));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Adds a Task of type Event to the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param desc the description of the Task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param date the date the task occurs at."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param time the time the task occurs at."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return a String describing the Log that is displayed by the Ui after the task is executed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public String[] addEvent (String desc, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return add(new Event(desc, date, time));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Adds a Task to the list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param s the task to be added"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return a log describing the Task added after execution."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private String[] add(Task s) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        lTasks.add(s);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new String[]{"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \"Got it. I\u0027ve added this task:\", "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \"  \" + s.toString(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            String.format(\"Now you have %d tasks in the list.\", lTasks.size())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Lists out the tasks currently in the TaskList"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return a string describing the list of tasks to be displayed by the Ui"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public String[] list() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String[] tasks \u003d new String[lTasks.size() + 1];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        tasks[0] \u003d lTasks.size() \u003d\u003d 0 "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            ? \"You have no tasks in your list.\" "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            : \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d lTasks.size(); i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            tasks[i] \u003d String.format(\"%d.%s\", i, lTasks.get(i - 1).toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Sets the status of a Task in the list to \u0027Done\u0027"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param i the index of the task in the list to be marked as \u0027Done\u0027"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return a String logging the change being executed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public String[] done(int i) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new String[]{ \"Nice! I\u0027ve marked this task as done:\", lTasks.get(i - 1).done() };"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Deletes a Task from the list of Tasks"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param i the index of the task being deleted"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return a String logging the change being executed."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public String[] delete(int i) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task rem \u003d lTasks.remove(i - 1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new String[]{"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \"Noted. I\u0027ve removed this task:\", "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            rem.toString(),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            String.format(\"Now you have %d tasks in the list.\", lTasks.size())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\tpublic String[] find(String query) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ArrayList\u003cTask\u003e search \u003d new ArrayList\u003cTask\u003e(lTasks);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (search.removeIf((Task t) -\u003e t.toString().contains(query))) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            String[] result \u003d new String[search.size() + 1];"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            result[0] \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            for (int i \u003d 0; i \u003c search.size(); i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                result[i + 1] \u003d String.format(\"%d.%s\", i + 1, search.get(i).toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            String[] result \u003d new String[]{\"No result found for this query.\"};"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 136
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/** Class which handles interactions with the user such as input of commands and printing of result logs. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    String arguments;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Checks if there are further commands to be inputted by the user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return true if further inputs exist"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean hasNextInput() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return in.hasNext();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Reads the next command from the input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return a String containing a full command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public String getLine() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Prints out a log line-by-line with indentation and borders"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param ss the list of strings to be printed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void out(String... ss) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String border \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        System.out.println(border);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        for (String s : ss) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            System.out.println(\"    \" + s);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        System.out.println(border);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /** Shuts down the Ui object by closing all existing streams. */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 43
    }
  },
  {
    "path": "src/main/java/duke/exceptions/IncorrectArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/** Exception thrown when the wrong arguments are applied to a command. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class IncorrectArgumentException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final long serialVersionUID \u003d 1L;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public IncorrectArgumentException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 11
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/** Exception that is thrown when an invalid command is given. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "   "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final long serialVersionUID \u003d 1L;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 11
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/** Entity class representing a task of type Deadline */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /** as good practice every class should have it\u0027s own private serialVersionUID. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final long serialVersionUID \u003d -5240102332818031942L;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private LocalDate byDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private LocalTime byTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Deadline(String description, LocalDate byDate, LocalTime byTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        super(description.strip());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.byDate \u003d byDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.byTime \u003d byTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /** toString implementation */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \"[D]%s (by: %s %s)\", "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            super.toString(), byDate.format(super.dateFormat), byTime);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 27
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/** Entity class representing a task of type Event */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /** as good practice every class should have it\u0027s own private serialVersionUID. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final long serialVersionUID \u003d 7761205144753475365L;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private LocalDate atDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private LocalTime atTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Event(String description, LocalDate atDate, LocalTime atTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        super(description.strip());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.atDate \u003d atDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.atTime \u003d atTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /** toString implementation */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \"[E]%s (at: %s %s)\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            super.toString(), atDate.format(super.dateFormat), atTime);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 27
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/** Class defining the minimal methods required to be implemented by a Task entity */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public abstract class Task implements Serializable {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /** Serializable classes must include a serialVersionUID to identify the class. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final long serialVersionUID \u003d 1561807677731348300L;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    protected final DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /** Description of the task. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /** Status of the task (true represents a completed task, and vice versa). */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    protected boolean isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private String status() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /** toString implementation adding a Status marker representing the task */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return String.format(\"[%s] %s\", status(), description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Sets the status of this task to \u0027Done\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return a string representing the new state of the task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public String done() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 42
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/** Entity class representing a task of type Todo */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /** as good practice every class should have it\u0027s own private serialVersionUID. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final long serialVersionUID \u003d -1559261707306825517L;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        super(description.strip());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /** toString implementation */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return String.format(\"[T]%s\", super.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 19
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(\"[D][\\u2718] Deedoo (by: Feb 10 2019 20:35)\", new Deadline(\"Deedoo\", LocalDate.of(2019, 02, 10), LocalTime.of(20, 35)).toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 15
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(\"[E][\\u2718] Deedoo (at: Feb 10 2019 20:35)\", new Event(\"Deedoo\", LocalDate.of(2019, 02, 10), LocalTime.of(20, 35)).toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 15
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(\"[T][\\u2718] Deedoo\", new Todo(\"Deedoo\").toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 12
    }
  },
  {
    "path": "text-ui-test/expected.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    What can I do for you?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "      [T][?] a"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "      [D][?] b (by: 2)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "      [E][?] c (at: 3)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    [T][?] a"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Here are the tasks in your list:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    1.[T][?] a"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    2.[D][?] b (by: 2)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    3.[E][?] c (at: 3)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    ____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 32
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "todo a"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "deadline b /by 2"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "event c /at 3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 6
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " @ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "   "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "REM del data.duke"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "java -Duser.country\u003dSG -Duser.language\u003den -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 22
    }
  }
]
