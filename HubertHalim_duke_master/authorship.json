[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    archiveVersion \u003d \"0.2\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "test {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    mainClassName \u003d \"duke.main.Launcher\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 27,
      "-": 17
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "E\u00261\u0026go to class\u00262650-05-13"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "D\u00261\u0026burn school\u00262040-03-10"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "T\u00261\u0026go to class"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "E\u00261\u0026asggs\u00262022-09-05"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "D\u00260\u0026build school\u00262049-06-09"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "T\u00261\u0026go to hell"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 6
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.main.UiHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * Add command implementing command interface."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class AddCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Executes the command by attempting to add task to list and set ui response to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * the appropriate one."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param task task for this execution"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param uiHandler ui handler to capture response"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param storage storage to be updated"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param taskList list of tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void execute(String task, UiHandler uiHandler, Storage storage, TaskList taskList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String[] token \u003d task.split(\" \", 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (token.length \u003c 2) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            uiHandler.setResponse(\"Adding task failed, task body cannot be empty\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assert token[0].equals(\"todo\") || token[0].equals(\"event\") || token[0].equals(\"deadline\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            if (taskList.addToList(token[1], token[0])) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                    storage.storeData(Parser.tasksToStorage(taskList.getList()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                    System.out.println(\"Error in storing data\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                uiHandler.setResponse(\"I\u0027ve added this task to the list:\\n \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                        + taskList.getList().get(taskList.size() - 1) + \"\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                        + \"Now you have \" + taskList.size() + \" task(s) in the list\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                uiHandler.setResponse(\"Adding task failed, either task body is empty \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                        + \"or required time is not specified\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            uiHandler.setResponse(\"There is an internal error when parsing command\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 54
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.main.UiHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * Command interface to handle each user command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    void execute(String task, UiHandler uiHandler, Storage storage, TaskList taskList);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 12
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.main.UiHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * Delete command implementing command interface."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Attempts to delete task from task list and set ui response to the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * appropriate one."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param task task for this execution"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param uiHandler ui handler to capture response"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param storage storage to be updated"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param taskList list of tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void execute(String task, UiHandler uiHandler, Storage storage, TaskList taskList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String[] token \u003d task.split(\" \", 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (token.length \u003c 2) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            uiHandler.setResponse(\"Please specify which task to delete\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assert token[0].equals(\"delete\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String[] indices \u003d token[1].split(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (!Utils.isNumeric(indices[0])) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            uiHandler.setResponse(\"Please specify which task to delete\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        List\u003cInteger\u003e toBeDeleted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        for (int i \u003d 0; i \u003c indices.length; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            if (Utils.isNumeric(indices[i]) !\u003d true) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                toBeDeleted.add(Integer.parseInt(indices[i]) - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Collections.sort(toBeDeleted);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (toBeDeleted.size() \u003c 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            uiHandler.setResponse(\"Please specify which task to delete\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (toBeDeleted.get(0) \u003e\u003d taskList.size() || toBeDeleted.get(toBeDeleted.size() - 1) \u003c 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            uiHandler.setResponse(\"No such task number\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String response \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        for (int i \u003d toBeDeleted.size() - 1; toBeDeleted.size() \u003e 0 \u0026\u0026 i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            int taskId \u003d toBeDeleted.get(i);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            if (taskId \u003e\u003d taskList.size() || taskId \u003c 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            if (response.equals(\"\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                response \u003d taskList.getList().get(taskId) + response;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                response \u003d taskList.getList().get(taskId) + \"\\n \" + response;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            taskList.removeTask(taskId);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            storage.storeData(Parser.tasksToStorage(taskList.getList()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            uiHandler.setResponse(\"There is an when trying to store data\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        response \u003d \"Nice! Deleted tasks(unknown task number ignored):\\n \" + response;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        uiHandler.setResponse(response);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 89
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.main.UiHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * Done command implementing command interface."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Attempts to mark specified tasks as done and set ui response to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * the appropriate one."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param task task for this execution"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param uiHandler ui handler to capture response"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param storage storage to be updated"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param taskList list of tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void execute(String task, UiHandler uiHandler, Storage storage, TaskList taskList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String[] token \u003d task.split(\" \", 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (token.length \u003c 2) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            uiHandler.setResponse(\"Please specify which task to mark as done\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assert token[0].equals(\"done\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String[] indices \u003d token[1].split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (indices.length \u003c 1 || Utils.isNumeric(indices[0]) !\u003d true) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            uiHandler.setResponse(\"Please specify which task to mark as done\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        int taskId \u003d Integer.parseInt(indices[0]) - 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (taskId \u003e\u003d taskList.size() || taskId \u003c 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            uiHandler.setResponse(\"No such task number\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        taskList.markTaskAsDone(taskId);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String response \u003d \"Nice! Task(s) marked as done(unknown task number ignored):\\n \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                + taskList.getList().get(taskId);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        for (int i \u003d 1; i \u003c indices.length; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            if (Utils.isNumeric(indices[i]) !\u003d true) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                taskId \u003d Integer.parseInt(indices[i]) - 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                if (taskId \u003e\u003d taskList.size() || taskId \u003c 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                taskList.markTaskAsDone(taskId);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                response \u003d response + \"\\n \" + taskList.getList().get(taskId);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            storage.storeData(Parser.tasksToStorage(taskList.getList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            uiHandler.setResponse(\"There is an error when trying to store data\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        uiHandler.setResponse(response);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 68
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.main.UiHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * Exit command implementing command interface."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Exits duke and set appropriate ui response."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param task task for this execution"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param uiHandler ui handler to capture response"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param storage storage to be updated"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param taskList list of tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void execute(String task, UiHandler uiHandler, Storage storage, TaskList taskList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        uiHandler.setResponse(\"bye ciao adios\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        uiHandler.exitDuke();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 25
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.main.UiHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * Find Command which implements Command interface."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Attempts to find task list based on key word and set ui response"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * to display tasks found."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param task task for this execution"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param uiHandler ui handler to capture response"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param storage storage to be updated"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param taskList list of tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void execute(String task, UiHandler uiHandler, Storage storage, TaskList taskList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String[] token \u003d task.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (token.length \u003c 2) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            uiHandler.setResponse(\"Please specify a keyword to search for\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assert token[0].equals(\"find\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (token.length \u003e 2) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            uiHandler.setResponse(\"Only 1 keyword is allowed\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        List\u003cTask\u003e searchedTask \u003d taskList.findTasksByKeyword(token[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String response \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (searchedTask.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            response \u003d \"No task with that keyword found\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            response \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            for (int i \u003d 0; i \u003c searchedTask.size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                response \u003d response + \"\\n \" + (i + 1) + \". \" + searchedTask.get(i).toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        uiHandler.setResponse(response);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 54
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.constants.Constants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.constants.HelpConstants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.main.UiHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * Help command implementing command interface."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class HelpCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Sets ui response to manual of command to be displayed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param task task for this execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param uiHandler ui handler to capture response"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param storage storage to be updated"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param taskList list of tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void execute(String task, UiHandler uiHandler, Storage storage, TaskList taskList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String[] token \u003d task.split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assert token[0].equals(\"help\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (token.length \u003e 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            if (Constants.COMMAND_LIST.contains(token[1])) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                switch (token[1]) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                    uiHandler.setResponse(HelpConstants.DEADLINE_HELP);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                    uiHandler.setResponse(HelpConstants.EVENT_HELP);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                    uiHandler.setResponse(HelpConstants.TODO_HELP);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                case \"delete\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                    uiHandler.setResponse(HelpConstants.DELETE_HELP);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                case \"done\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                    uiHandler.setResponse(HelpConstants.DONE_HELP);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                case \"bye\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                    uiHandler.setResponse(HelpConstants.EXIT_HELP);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                case \"find\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                    uiHandler.setResponse(HelpConstants.FIND_HELP);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                case \"snooze\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                    uiHandler.setResponse(HelpConstants.SNOOZE_HELP);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                case \"list\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                    uiHandler.setResponse(HelpConstants.LIST_HELP);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String response \u003d \"1.\" + HelpConstants.DEADLINE_HELP + \"\\n\" + \"2.\" + HelpConstants.EVENT_HELP + \"\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                + \"3.\" + HelpConstants.TODO_HELP + \"\\n\" + \"4.\" + HelpConstants.DELETE_HELP + \"\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                + \"5.\" + HelpConstants.DONE_HELP + \"\\n\" + \"6.\" + HelpConstants.EXIT_HELP + \"\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                + \"7.\" + HelpConstants.FIND_HELP + \"\\n\" + \"8.\" + HelpConstants.SNOOZE_HELP + \"\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                + \"9.\" + HelpConstants.LIST_HELP + \"\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        uiHandler.setResponse(response);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 70
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.main.UiHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * List command implementing command interface."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Sets ui response to list of task to be displayed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param task task for this execution"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param uiHandler ui handler to capture response"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param storage storage to be updated"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param taskList list of tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void execute(String task, UiHandler uiHandler, Storage storage, TaskList taskList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        uiHandler.setResponse(taskList.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 24
    }
  },
  {
    "path": "src/main/java/duke/command/SnoozeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.main.UiHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Utils;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * Done command implementing command interface."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class SnoozeCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Attempts to delay the deadline or schedule of selected task and set ui response to"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * the appropriate one."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param task task for this execution"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param uiHandler ui handler to capture response"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param storage storage to be updated"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param taskList list of tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void execute(String task, UiHandler uiHandler, Storage storage, TaskList taskList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String[] token \u003d task.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (token.length !\u003d 3) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            uiHandler.setResponse(\"Please only specify which task to snooze and for how many days\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assert token[0].equals(\"snooze\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (!Utils.isNumeric(token[1]) || !Utils.isNumeric(token[2])) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            uiHandler.setResponse(\"Only numbers accepted for task number and delay\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        int taskId \u003d Integer.parseInt(token[1]) - 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        int delay \u003d Integer.parseInt(token[2]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Task selectedTask \u003d taskList.getList().get(taskId);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (selectedTask.getTaskTime() \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            response \u003d \"Selected task does not have deadline or schedule\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            LocalDate newTaskTime \u003d selectedTask.getTaskTime().plusDays(delay);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            selectedTask.setTaskTime(newTaskTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            response \u003d \"Task schedule or deadline updated:\\n \" + taskList.getList().get(taskId);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                storage.storeData(Parser.tasksToStorage(taskList.getList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                uiHandler.setResponse(\"There is an error when trying to store data\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        uiHandler.setResponse(response);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 57
    }
  },
  {
    "path": "src/main/java/duke/command/UnknownCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.main.UiHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * Unknown command implementing command interface."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class UnknownCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Sets ui response to inform user that command is not recognized."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param task task for this execution"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param uiHandler ui handler to capture response"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param storage storage to be updated"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param taskList list of tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void execute(String task, UiHandler uiHandler, Storage storage, TaskList taskList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        uiHandler.setResponse(\"I don\u0027t understand what you want\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 24
    }
  },
  {
    "path": "src/main/java/duke/constants/Constants.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class Constants {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static final String ANSI_RED \u003d \"\\u001B[31m\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static final String ANSI_GREEN \u003d \"\\u001B[32m\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static final String ANSI_RESET \u003d \"\\u001B[0m\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static final String ITALIC \u003d \"\\033[3m\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static final String ITALIC_RESET \u003d \"\\033[0m\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static final String DUKE_FILE_PATH \u003d \"..\\\\duke\\\\data\\\\duke.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static final String DATE_FORMAT_1 \u003d \"yyyy-MM-dd\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static final String DATE_FORMAT_2 \u003d \"MMM d yyyy\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static final List\u003cString\u003e COMMAND_LIST \u003d Arrays.asList("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            new String[]{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                \"deadline\", \"todo\", \"find\", \"event\", \"done\", \"delete\", \"bye\", \"list\", \"help\", \"snooze\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            });"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 23
    }
  },
  {
    "path": "src/main/java/duke/constants/HelpConstants.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class HelpConstants {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static final String DEADLINE_HELP \u003d \"Deadline: \""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \"adds a new deadline to list of task. Usage: \\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \"  deadline \u003ctask_name\u003e /by \u003cdeadline(yyyy-MM-dd)\u003e\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \"eg. deadline Do CS2103 project /by 2020-04-24\\n\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static final String EVENT_HELP \u003d \"Event: \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \"adds a new event to list of task. Usage: \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \"  event \u003ctask_name\u003e /at \u003cschedule(yyyy-MM-dd)\u003e\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \"eg. event NUS career fair /at 2020-03-12\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static final String TODO_HELP \u003d \"Todo: \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \"adds a new todo to list of task. Usage: \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \"  todo \u003ctask_name\u003e\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \" eg. todo Learn java\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static final String DELETE_HELP \u003d \"Delete: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \"deletes selected tasks from the list of tasks. Usage: \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \"  delete [list of tasks indices]\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \" eg. delete 1 3 4\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static final String DONE_HELP \u003d \"Done: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \"marks selected tasks as done. Usage: \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \"  done [list of tasks indices]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \" eg. done 1 2 5\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static final String EXIT_HELP \u003d \"Bye: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \"exits duke application. Usage: \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \"  bye\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \" eg. bye\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static final String FIND_HELP \u003d \"Find: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \"finds all tasks that contain a specific keyword. Usage: \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \"  find \u003ckeyword\u003e\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \" eg.  find homework\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static final String SNOOZE_HELP \u003d \"Snooze: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \"delays the selected task by a certain specified amount of days. Usage: \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \"  snooze \u003ctask index\u003e \u003cdays\u003e\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \" eg.  find homework\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static final String LIST_HELP \u003d \"List: \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \"lists down all tasks stored by duke. Usage: \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \"  list\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            + \" eg. list\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 48
    }
  },
  {
    "path": "src/main/java/duke/main/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.constants.Constants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private UiHandler uiHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private DukeWorker worker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Constructor for Duke object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        uiHandler \u003d new UiHandler();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        worker \u003d new DukeWorker(Constants.DUKE_FILE_PATH);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        worker.initializeWorker();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Run instance of duke without GUI."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        uiHandler.welcomeMessage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String request \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        while (!uiHandler.isExit()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            request \u003d uiHandler.requestInput().trim().toLowerCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            worker.handleRequest(request, uiHandler);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            uiHandler.displayResponse();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String request \u003d input;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        worker.handleRequest(request.toLowerCase().trim(), uiHandler);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return uiHandler.getResponse();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 43,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/main/DukeWorker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.CommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.FileStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class DukeWorker {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private FileStorage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public FileStorage getStorage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public DukeWorker(String storagePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        storage \u003d new FileStorage(storagePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Initialize DukeWorker instance and load file storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void initializeWorker() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            boolean fileExist \u003d storage.checkFileExistence();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            if (!fileExist) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                storage.createStorage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                String data \u003d storage.loadStorage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                List\u003cTask\u003e tasks \u003d Parser.storageToTask(data);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                taskList \u003d new TaskList(tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void handleRequest(String request, UiHandler uiHandler) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Command command \u003d CommandParser.commandParser(request);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        command.execute(request, uiHandler, storage, taskList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 52
    }
  },
  {
    "path": "src/main/java/duke/main/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.main.Main;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 13
    }
  },
  {
    "path": "src/main/java/duke/main/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 33
    }
  },
  {
    "path": "src/main/java/duke/main/UiHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.constants.Constants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class UiHandler {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private String response;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public UiHandler() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void setResponse(String response) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        this.response \u003d response;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void exitDuke() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void welcomeMessage() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        System.out.println(Constants.ANSI_RED + \"Hello! I\u0027m Duke\\n\" + \"What\u0027s up?\" + Constants.ANSI_RESET);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public String requestInput() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String request \u003d sc.nextLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return request;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public String getResponse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void displayResponse() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        System.out.println(Constants.ANSI_RED + this.response + Constants.ANSI_RESET);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 45
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * Deadline object extending from ExecutableTask."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class Deadline extends ExecutableTask {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private boolean done \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private LocalDate time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Deadline object constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param name task name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param time task time"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public Deadline(String name, LocalDate time) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * checks if deadline is done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return done or not"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * gets name of deadline."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return task name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * gets type of task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return the string D to represent deadline"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * gets task time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return task time"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public LocalDate getTaskTime() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * marks deadline as done."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void setTaskTime(LocalDate taskTime) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        this.time \u003d taskTime;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return \"[\" + getTaskType() + \"]\" + getDoneString() + \" \" + getTaskName() + \" (by: \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                + Parser.dateToString(getTaskTime()) + \")\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 79
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * Event object extending from ExecutableTask."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class Event extends ExecutableTask {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private boolean done \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private LocalDate time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Event object constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param name task name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param time task time"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public Event(String name, LocalDate time) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * checks if event is done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return done or not"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * gets name of event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return task name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * gets type of task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return the string E to represent event"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * gets task time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return task time"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public LocalDate getTaskTime() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * marks event as done."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void setTaskTime(LocalDate taskTime) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        this.time \u003d taskTime;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return \"[\" + getTaskType() + \"]\" + getDoneString() + \" \" + getTaskName() + \" (at: \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                + Parser.dateToString(getTaskTime()) + \")\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 79
    }
  },
  {
    "path": "src/main/java/duke/task/ExecutableTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public abstract  class ExecutableTask implements Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Gets string to display tick or cross."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return tick or cross string"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public String getDoneString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (isDone()) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return \"[\\u2713]\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return \"[\\u2613]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 16
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * Interface for Task object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public interface Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Checks if task is done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return task done or not"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public boolean isDone();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Gets task name."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return task name"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public String getTaskName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Gets task type."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return task type"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public String getTaskType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Gets task time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return task time"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public LocalDate getTaskTime();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Marks task as done."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void markAsDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void setTaskTime(LocalDate taskTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 41
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * Todo object extending from ExecutableTask."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class Todo extends ExecutableTask {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private boolean done \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Constructor for Todo object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param name name of task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public Todo(String name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * checks if todo is done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return done or not"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * gets name of todo."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return task name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * gets type of task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return the string T to represent todos"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * gets task time."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return null as todos do not have time"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public LocalDate getTaskTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * marks todo as done."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void setTaskTime(LocalDate taskTime) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return \"[\" + getTaskType() + \"]\" + getDoneString() + \" \" + getTaskName();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 75
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Generates DialogBox object for users."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param text user request"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param img user image"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return DialogBox object of user"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        DialogBox dialogBox \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        dialogBox.setBackground(new Background(new BackgroundFill(Color.rgb(173, 216, 230),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return dialogBox;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Generates DialogBox object for duke."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param text duke response"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param img duke image"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return DialogBox object of duke"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 81
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.main.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.ui.DialogBox;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * Controller for duke.ui.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/image/user.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/image/duke.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Initialize GUI."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                DialogBox.getDukeDialog(\"Hello! I\u0027m Duke\\n\" + \"What\u0027s up?\\n\" + \"Try typing \\\"help\\\"\", dukeImage)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (response.equals(\"bye ciao adios\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 66
    }
  },
  {
    "path": "src/main/java/duke/utils/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.command.UnknownCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.command.SnoozeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.command.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * Parser to parse commands made by user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Parses users\u0027 request and return the appropriate action."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param request users\u0027s request"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return Command object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static Command commandParser(String request) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String[] token \u003d request.split(\" \", 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (token[0].equals(\"bye\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } else if (token[0].equals(\"list\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } else if (token[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return new DoneCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } else if (token[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return new DeleteCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } else if (token[0].equals(\"todo\") || token[0].equals(\"deadline\") || token[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return new AddCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } else if (token[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return new FindCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } else if (token[0].equals(\"help\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } else if (token[0].equals(\"snooze\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return new SnoozeCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return new UnknownCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 46
    }
  },
  {
    "path": "src/main/java/duke/utils/FileStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * File storage object to handle storage in a local file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * Implements storage interface."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class FileStorage implements Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * File storage constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param fileName storage file name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public FileStorage(String fileName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Create storage if it doesn\u0027t exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @throws IOException input exception"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void createStorage() throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        //relative path"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String relativePath \u003d fileName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        File file \u003d new File(relativePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (file.createNewFile()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            System.out.println(relativePath + \" Save File Created\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            System.out.println(\"File \" + relativePath + \" already exists\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Check if file that is to be created already exists."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return boolean on whether or not file exists"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public boolean checkFileExistence() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        //relative path"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        File file \u003d new File(fileName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (file.exists() \u0026\u0026 file.isFile()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Load data from storage file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return data in the form of a string."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @throws IOException input output exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public String loadStorage() throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        File file \u003d new File(fileName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        FileInputStream fis \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        int content;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        while ((content \u003d fis.read()) !\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            result \u003d result + ((char) content);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Store data to storage file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param data in the form of a string."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @throws IOException input output exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void storeData(String data) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        FileOutputStream fos \u003d new FileOutputStream(fileName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        fos.write(data.getBytes());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        fos.flush();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        fos.close();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 80
    }
  },
  {
    "path": "src/main/java/duke/utils/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.constants.Constants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * Parser to parse various stuff."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Parse string into date object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param text date in string format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return date object from string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static LocalDate stringToDate(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(Constants.DATE_FORMAT_1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        date \u003d LocalDate.parse(text, formatter);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Check date format to see if it is in the form of yyyy-MM-dd."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param text date in string format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static boolean checkDateFormat(String text) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String[] tokens \u003d text.split(\"-\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (tokens[0].length() !\u003d 4) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (tokens[1].length() !\u003d 2 || tokens[1].compareTo(\"00\") \u003c\u003d 0 || tokens[1].compareTo(\"12\") \u003e 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (tokens[2].length() !\u003d 2 || tokens[2].compareTo(\"00\") \u003c\u003d 0 || tokens[2].compareTo(\"31\") \u003e 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Convert date object to string in the format MMM dd yyyy."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param date date in date format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return string"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static String dateToString(LocalDate date) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(Constants.DATE_FORMAT_2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String text \u003d date.format(formatter);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * convert list of task to string to be stored."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param tasks tasks in list of tasks format"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return string to be stored"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static String tasksToStorage(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String data \u003d \"\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(Constants.DATE_FORMAT_1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            String doneString \u003d task.isDone() ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            data \u003d data + task.getTaskType() + \"\u0026\" + doneString + \"\u0026\" + task.getTaskName();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            if (task.getTaskType() \u003d\u003d \"E\" || task.getTaskType() \u003d\u003d \"D\") {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                data \u003d data + \"\u0026\" + formatter.format(task.getTaskTime());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            if (i \u003c tasks.size() - 1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                data \u003d data + \"\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Convert string data loaded to list of tasks."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param data tasks in string format"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return list of tasks"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @throws ParseException parsing exception"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static List\u003cTask\u003e storageToTask(String data) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String[] lines \u003d data.split(\"\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        for (int i \u003d 0; i \u003c lines.length; i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            String line \u003d lines[i];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            String[] tokens \u003d line.split(\"\u0026\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            Task task \u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            switch (tokens[0]) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                task \u003d new Todo(tokens[2]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                if (tokens[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                    task.markAsDone();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                task \u003d new Event(tokens[2], stringToDate(tokens[3]));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                task \u003d new Deadline(tokens[2], stringToDate(tokens[3]));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            if (task !\u003d null \u0026\u0026 tokens[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                task.markAsDone();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            if (task !\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 122
    }
  },
  {
    "path": "src/main/java/duke/utils/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * Interface for storage object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public interface Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    void createStorage() throws IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    boolean checkFileExistence();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    String loadStorage() throws IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    void storeData(String data) throws IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 17
    }
  },
  {
    "path": "src/main/java/duke/utils/StorageStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * Stub for file storage."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class StorageStub implements Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void createStorage() throws IOException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public boolean checkFileExistence() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public String loadStorage() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void storeData(String data) throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 30
    }
  },
  {
    "path": "src/main/java/duke/utils/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * Task List class to represent a list of task and handle"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " * task list operations."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    private List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Task List constructor."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Task list constructor with empty list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Gets size of task list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return size of task list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Marks task at certain index as done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param taskId to be marked as done"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void markTaskAsDone(int taskId) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        tasks.get(taskId).markAsDone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * remove task at certain index."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param taskId to be removed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void removeTask(int taskId) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        tasks.remove(taskId);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Finds tasks from task list with a given keyword."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param word keyword to search for"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return list of tasks with given keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public List\u003cTask\u003e findTasksByKeyword(String word) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        List\u003cTask\u003e searchedTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            String[] tokens \u003d tasks.get(i).getTaskName().split(\" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            if (Arrays.asList(tokens).contains(word)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                searchedTask.add(tasks.get(i));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return searchedTask;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Adds item to task list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param item name"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param type of item"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return whether addition is successful or not"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @throws ParseException parsing exception"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public boolean addToList(String item, String type) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String[] tokens;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String time;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            newTask \u003d new Todo(item);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            tokens \u003d item.split(\"/\", 2);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            if (tokens.length \u003c 2) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            if (!tokens[1].substring(0, 2).equals(\"by\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            time \u003d tokens[1].substring(2).trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            if (!Parser.checkDateFormat(time)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            newTask \u003d new Deadline(tokens[0].trim(), Parser.stringToDate(time));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            tokens \u003d item.split(\"/\", 2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            if (tokens.length \u003c 2) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            if (!tokens[1].substring(0, 2).equals(\"at\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            time \u003d tokens[1].substring(2).trim();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            if (!Parser.checkDateFormat(time)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            newTask \u003d new Event(tokens[0].trim(), Parser.stringToDate(time));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            newTask \u003d null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return \"No scheduled task yet\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        String list \u003d \"1.\" + tasks.get(0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        for (int i \u003d 2; i \u003c tasks.size() + 1; i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            list \u003d list + \"\\n\" + i + \".\" + tasks.get(i - 1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 142
    }
  },
  {
    "path": "src/main/java/duke/utils/Utils.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class Utils {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * Static method to check if string is numerical."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @param strNum number in string format"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public static boolean isNumeric(String strNum) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        if (strNum \u003d\u003d null) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            Integer.parseInt(strNum);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 22
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" \u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                \u003cFont size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                \u003cInsets bottom\u003d\"0.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"140.0\" fitWidth\u003d\"140.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"0.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 25
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "\u003c?import javafx.scene.control.TitledPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"400.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 20
    }
  },
  {
    "path": "src/test/java/duke/command/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.main.UiHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.StorageStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    UiHandler ui \u003d new UiHandler();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void executeTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Command command \u003d new AddCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        command.execute(\"todo go to school\", ui, storage, taskList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertEquals(\"I\u0027ve added this task to the list:\\n \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                + taskList.getList().get(taskList.size() - 1) + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "                + \"Now you have \" + taskList.size() + \" task(s) in the list\", ui.getResponse());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 26
    }
  },
  {
    "path": "src/test/java/duke/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.main.UiHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.StorageStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    UiHandler ui \u003d new UiHandler();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void executeTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Command command \u003d new DeleteCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        command.execute(\"delete 1\", ui, storage, taskList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertEquals(\"No such task number\", ui.getResponse());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 23
    }
  },
  {
    "path": "src/test/java/duke/command/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.main.UiHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.StorageStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    UiHandler ui \u003d new UiHandler();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void executeTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Command command \u003d new DoneCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        command.execute(\"done 1\", ui, storage, taskList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertEquals(\"No such task number\", ui.getResponse());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 24
    }
  },
  {
    "path": "src/test/java/duke/command/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.main.UiHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.StorageStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    UiHandler ui \u003d new UiHandler();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void executeEmptyListTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Command command \u003d new ListCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        command.execute(\"list\", ui, storage, taskList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertEquals(taskList.toString(), ui.getResponse());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void executeListTest() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Command command \u003d new ListCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            taskList.addToList(\"go to school\", \"todo\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            taskList.addToList(\"go to hell\", \"todo\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            command.execute(\"list\", ui, storage, taskList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            assertEquals(taskList.toString(), ui.getResponse());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 39
    }
  },
  {
    "path": "src/test/java/duke/command/UnknownCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.main.UiHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.StorageStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.utils.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class UnknownCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    UiHandler ui \u003d new UiHandler();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void executeTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Command command \u003d new UnknownCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        command.execute(\"goalasdf\", ui, storage, taskList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertEquals(\"I don\u0027t understand what you want\", ui.getResponse());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 23
    }
  },
  {
    "path": "src/test/java/duke/main/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void exitDukeTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        UiHandler ui \u003d new UiHandler();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertEquals(ui.isExit(), false);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        ui.exitDuke();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertEquals(ui.isExit(), true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void getResponseTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        UiHandler ui \u003d new UiHandler();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        ui.setResponse(\"hello\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertEquals(ui.getResponse(), \"hello\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 22
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlinesTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class DeadlinesTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    Task task \u003d new Deadline(\"go to school\", LocalDate.of(2019, 2, 4));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void markDoneTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertFalse(task.isDone());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertTrue(task.isDone());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void getTaskNameTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertEquals(task.getTaskName(), \"go to school\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void getTaskTimeTest() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertEquals(task.getTaskTime(), LocalDate.of(2019, 2, 4));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 32
    }
  },
  {
    "path": "src/test/java/duke/task/EventsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class EventsTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    Task task \u003d new Event(\"go to school\", LocalDate.of(2019, 2, 4));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void markDoneTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertFalse(task.isDone());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertTrue(task.isDone());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void getTaskNameTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertEquals(task.getTaskName(), \"go to school\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void getTaskTimeTest() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertEquals(task.getTaskTime(), LocalDate.of(2019, 2, 4));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 32
    }
  },
  {
    "path": "src/test/java/duke/task/TodosTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class TodosTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    Task task \u003d new Todo(\"go to school\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void markDoneTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertFalse(task.isDone());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertTrue(task.isDone());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void getTaskNameTest() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertEquals(task.getTaskName(), \"go to school\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 24
    }
  },
  {
    "path": "src/test/java/duke/utils/CommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.command.UnknownCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class CommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void exitCommandTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Command command \u003d CommandParser.commandParser(\"bye bye\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertTrue(command instanceof ExitCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void singleDoneCommandTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Command command \u003d CommandParser.commandParser(\"done 1\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertTrue(command instanceof DoneCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void multipleDoneCommandTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Command command \u003d CommandParser.commandParser(\"done 1 5 6\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertTrue(command instanceof DoneCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void invalidDoneCommandTest() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Command command \u003d CommandParser.commandParser(\"done asdfa\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertTrue(command instanceof DoneCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void singleDeleteCommandTest() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Command command \u003d CommandParser.commandParser(\"delete 1\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertTrue(command instanceof DeleteCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void multipleDeleteCommandTest() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Command command \u003d CommandParser.commandParser(\"delete 1 5 6\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertTrue(command instanceof DeleteCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void invalidDeleteCommandTest() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Command command \u003d CommandParser.commandParser(\"delete asdfa\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertTrue(command instanceof DeleteCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void listCommandTest() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Command command \u003d CommandParser.commandParser(\"list asdfsadf\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertTrue(command instanceof ListCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void todoAddCommandTest() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Command command \u003d CommandParser.commandParser(\"todo asdfsadf\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertTrue(command instanceof AddCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void eventAddCommandTest() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Command command \u003d CommandParser.commandParser(\"event asdfsadf\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertTrue(command instanceof AddCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void deadlineAddCommandTest() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Command command \u003d CommandParser.commandParser(\"deadline asdfsadf\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertTrue(command instanceof AddCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void findCommandTest() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Command command \u003d CommandParser.commandParser(\"find asdfsadf\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertTrue(command instanceof FindCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void unknownCommandTest() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        Command command \u003d CommandParser.commandParser(\"asdfasfadf\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertTrue(command instanceof UnknownCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 95
    }
  },
  {
    "path": "src/test/java/duke/utils/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void validStringToDateTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        LocalDate date \u003d Parser.stringToDate(\"2019-02-12\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertEquals(1, 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void checkValidDateFormat() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        boolean correct \u003d Parser.checkDateFormat(\"2019-02-04\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertTrue(correct);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void checkInvalidDateFormat() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        boolean correct \u003d Parser.checkDateFormat(\"2019-22-04\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertFalse(correct);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 32
    }
  },
  {
    "path": "src/test/java/duke/utils/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void emptyTaskString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertEquals(\"No scheduled task yet\", taskList.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void addToListTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            taskList.addToList(\"go to school\", \"todo\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            assertTrue(taskList.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void removeTaskTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            taskList.addToList(\"go to school\", \"todo\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            assertTrue(taskList.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            taskList.removeTask(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            assertTrue(taskList.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 40
    }
  },
  {
    "path": "src/test/java/duke/utils/UtilsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "public class UtilsTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void isValidNumericTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        boolean correct \u003d Utils.isNumeric(\"124112\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertTrue(correct);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    public void isInvalidNumericTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        boolean correct \u003d Utils.isNumeric(\"123fdsfa\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "        assertFalse(correct);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 21
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HubertHalim"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "HubertHalim": 34
    }
  }
]
