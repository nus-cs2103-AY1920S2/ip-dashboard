[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "test {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    archiveVersion \u003d \"0.2\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "zixinn": 37
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "# Duke - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Duke is for those who prefer to use a desktop app for managing tasks. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "More importantly, Duke is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "If you can type fast, Duke can get your task management done faster than traditional GUI apps. "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Interested? Jump to Section 2, “Quick Start” to get started. Enjoy!"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "2. Download the latest jar file for Duke [here](https://github.com/zixinn/duke/releases/tag/v0.2)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "4. Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "![Screenshot](Ui.png)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "5. Type the command in the command box and press `Enter` to execute it."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "6. Refer to Section 3, “Features” for details of each command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "## 3. Features "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "**Command Format**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `todo DESCRIPTION`, `DESCRIPTION` is a parameter which can be used as `todo read book`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* Items in square brackets are optional e.g `[/d DATE] [/t TIME]` can be used as `/d 2020-01-28 /t 14:30-16:30` or as `/d 2020-01-28` or `/t 14:30-16:30`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "### 3.1. Adding a todo: `todo`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Adds a todo to the task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Format: `todo DESCRIPTION`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "`todo read book`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "```"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "  [T][N] read book"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "```"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "### 3.2. Adding a deadline: `deadline`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Adds a deadline to the task list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Format: `deadline DESCRIPTION /by DATE TIME`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* Date must be in **yyyy-mm-dd** format."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* Time must be in **hh:mm** format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "`deadline return book /by 2020-02-02 18:00`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "```"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "  [D][N] return book (by: 2 Feb 2020 18:00)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "### 3.3. Adding an event: `event`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Adds an event to the task list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Format: `event DESCRIPTION /at DATE START_TIME-END_TIME`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* Date must be in **yyyy-mm-dd** format."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* Time must be in **hh:mm** format."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "`event project meeting /at 2020-01-27 14:00-16:00`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "```"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "  [E][N] project meeting (at: 27 Jan 2020 14:00-16:00)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "```"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "### 3.4. Listing all tasks: `list`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Lists all tasks in the task list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "```"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": "1.[T][N] read book"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "2.[D][N] return book (by: 2 Feb 2020 18:00)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "3.[E][N] project meeting (at: 27 Jan 2020 14:00-16:00)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "```"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": "### 3.5. Marking a task as done: `done`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Marks a task in the task list as done."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Format: `done INDEX`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* Marks the task at the specified INDEX as done."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": "`done 2`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": "```"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zixinn"
        },
        "content": "  [D][Y] return book (by: 2 Feb 2020 18:00)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zixinn"
        },
        "content": "```"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zixinn"
        },
        "content": "### 3.6. Updating a task: `update`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Updates a task in the task list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Format: `update INDEX [/d DATE] [/t TIME]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* Updates the task at the specified INDEX."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* Date must be in **yyyy-mm-dd** format."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* Time must be in **hh:mm** format."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zixinn"
        },
        "content": "`update 3 /d 2020-01-28 /t 14:30-16:30`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zixinn"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Noted. I\u0027ve updated this task:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zixinn"
        },
        "content": "  [E][N] project meeting (at: 28 Jan 2020 14:30-16:30)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zixinn"
        },
        "content": "```"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zixinn"
        },
        "content": "### 3.7. Locating tasks by name: `find`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Finds tasks with description containing any of the given keywords."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* The search is case sensitive. e.g book will not match Book"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* Only the description is searched."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* Partial words will be matched e.g. bo will match book"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zixinn"
        },
        "content": "`find book`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zixinn"
        },
        "content": "```"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zixinn"
        },
        "content": "1.[T][N] read book"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zixinn"
        },
        "content": "2.[D][Y] return book (by: 2 Feb 2020 18:00)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zixinn"
        },
        "content": "```"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zixinn"
        },
        "content": "### 3.8. Locating tasks by date: `get`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Finds tasks with the given date."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Format: `find DATE`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* Date must be in **yyyy-mm-dd** format."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zixinn"
        },
        "content": "`get 2020-02-02`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zixinn"
        },
        "content": "```"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zixinn"
        },
        "content": "1.[D][Y] return book (by: 2 Feb 2020 18:00)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zixinn"
        },
        "content": "```"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zixinn"
        },
        "content": "### 3.9. Deleting a task: `delete`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Deletes a task in the task list."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* Deletes the task at the specified INDEX."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zixinn"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zixinn"
        },
        "content": "```"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Noted I\u0027ve removed this task:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zixinn"
        },
        "content": "  [T][N] read book"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zixinn"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zixinn"
        },
        "content": "### 3.10. Exiting the program: `bye`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zixinn"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zixinn"
        },
        "content": "```"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zixinn"
        },
        "content": "```"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zixinn"
        },
        "content": "### 3.11. Saving the data"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zixinn"
        },
        "content": "Duke data are saved in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zixinn"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zixinn"
        },
        "content": "## 4. FAQ"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zixinn"
        },
        "content": "**Q**: How do I transfer my data to another Computer?"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zixinn"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Duke folder."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zixinn"
        },
        "content": "## 5. Command Summary"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* **Bye** : `bye`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* **Deadline** : `deadline DESCRIPTION /by DATE TIME`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zixinn"
        },
        "content": "  e.g. `deadline return book /by 2020-02-02 18:00`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zixinn"
        },
        "content": "  "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* **Delete** : `delete INDEX`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zixinn"
        },
        "content": "  e.g. `delete 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* **Done** : `done INDEX`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zixinn"
        },
        "content": "  e.g. `done 2`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* **Event** : `event DESCRIPTION /at DATE START_TIME-END_TIME`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zixinn"
        },
        "content": "  e.g. `event project meeting /at 2020-01-27 14:00-16:00`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* **Find** : `find KEYWORD`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zixinn"
        },
        "content": "  e.g. `find book`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* **Get** : `get DATE`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zixinn"
        },
        "content": "  e.g. `get 2020-02-02`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* **List** : `list`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* **Todo** : `todo DESCRIPTION`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zixinn"
        },
        "content": "  e.g. `todo read book`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zixinn"
        },
        "content": "* **Update** : `update INDEX [/d DATE] [/t TIME]`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zixinn"
        },
        "content": "  e.g. `update 3 /d 2020-01-28 /t 14:30-16:30`"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "zixinn": 241
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Main class for the duke application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String FILE_PATH \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private boolean isExit \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this(FILE_PATH);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a Duke object and initialises the Storage, Ui and TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param filePath The file path where the tasks are stored."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            ui.print(ui.showError(e.getMessage()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        new Duke(FILE_PATH).run();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Generates a response to user input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param input String containing user input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return A string with the response to the user input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (isExit) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                storage.save(tasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return command.execute(tasks);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Runs the program."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ui.print(Ui.showWelcome());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                ui.print(command.execute(tasks));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                ui.print(ui.showError(e.getMessage()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "zixinn": 79
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Starts the JavaFX application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param stage The primary stage for the application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            stage.setOnCloseRequest((WindowEvent event) -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                duke.getResponse(\"bye\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 41
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.command.GetCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.command.UpdateCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.InvalidDateTimeFormatException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.InvalidIdException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.MissingArgumentException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Makes sense of the user command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Parses the specified command and returns the corresponding Command object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param command The command to be parsed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return The corresponding Command object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If the command is invalid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static Command parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (command.trim().equals(\"bye\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (command.trim().equals(\"list\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Command cmd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String[] commandArray \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        switch (commandArray[0]) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            cmd \u003d createTodoCommand(commandArray);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            cmd \u003d createDeadlineCommand(commandArray);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            cmd \u003d createEventCommand(commandArray);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            cmd \u003d createDoneCommand(commandArray);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        case \"update\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            cmd \u003d createUpdateCommand(commandArray);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            cmd \u003d createDeleteCommand(commandArray);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        case \"get\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            cmd \u003d createGetCommand(commandArray);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            cmd \u003d createFindCommand(commandArray);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return cmd;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns an AddCommand for the todo."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param commandArray The array containing the input string."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return An AddCommand for the todo."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If the commandArray is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static Command createTodoCommand(String[] commandArray) throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return new AddCommand(commandArray[0], commandArray[1]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new MissingArgumentException(\"description of a todo\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns an AddCommand for the deadline."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param commandArray The array containing the input string."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return An AddCommand for the deadline."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If the commandArray is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static Command createDeadlineCommand(String[] commandArray) throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return new AddCommand(commandArray[0], commandArray[1]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new MissingArgumentException(\"description and due date of a deadline\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns an AddCommand for the event."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param commandArray The array containing the input string."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return An AddCommand for the event."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If the commandArray is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static Command createEventCommand(String[] commandArray) throws DukeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return new AddCommand(commandArray[0], commandArray[1]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new MissingArgumentException(\"description and date and time of an event\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns a DoneCommand."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param commandArray The array containing the input string."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return A DoneCommand."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If the commandArray is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static Command createDoneCommand(String[] commandArray) throws DukeException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (commandArray[1].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                throw new MissingArgumentException(\"ID of the task done\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return new DoneCommand(Integer.parseInt(commandArray[1].trim()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new MissingArgumentException(\"ID of the task done\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new InvalidIdException(\"done\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns an UpdateCommand."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param commandArray The array containing the input string."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return An UpdateCommand."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If the commandArray is invalid."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static Command createUpdateCommand(String[] commandArray) throws DukeException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (commandArray[1].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                throw new MissingArgumentException(\"ID and details of the task to update\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            String[] splitArray \u003d commandArray[1].trim().split(\" \", 2);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return new UpdateCommand(Integer.parseInt(splitArray[0].trim()), splitArray[1].trim());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }  catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new MissingArgumentException(\"ID and details of the task to update\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new InvalidIdException(\"to update\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns a DeleteCommand."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param commandArray The array containing the input string."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return A DeleteCommand."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If the commandArray is invalid."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static Command createDeleteCommand(String[] commandArray) throws DukeException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (commandArray[1].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                throw new MissingArgumentException(\"ID of the task to delete\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return new DeleteCommand(Integer.parseInt(commandArray[1].trim()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new MissingArgumentException(\"ID of the task to delete\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new InvalidIdException(\"to delete\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns a GetCommand."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param commandArray The array containing the input string."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return A GetCommand."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If the commandArray is invalid."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static Command createGetCommand(String[] commandArray) throws DukeException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (commandArray[1].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                throw new MissingArgumentException(\"date of tasks to retrieve\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return new GetCommand(LocalDate.parse(commandArray[1].trim()));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new MissingArgumentException(\"date of tasks to retrieve\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new InvalidDateTimeFormatException(\"yyyy-mm-dd\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns a FindCommand."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param commandArray The array containing the input string."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return A FindCommand."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If the commandArray is invalid."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static Command createFindCommand(String[] commandArray) throws DukeException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (commandArray[1].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                throw new MissingArgumentException(\"keyword to search\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return new FindCommand(commandArray[1].trim());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new MissingArgumentException(\"keyword to search\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 207
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.StorageException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Loads tasks from the data file and saves tasks in the data file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a Storage with the specified file path."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param filePath The file path where the tasks are stored."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Loads the tasks from the data file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return A list of tasks from the data file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If the data in the data file is not in the correct format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                String[] data \u003d sc.nextLine().split(\" \\\\| \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                Task task;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                switch (data[0]) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    task \u003d new Todo(data[2], data[1].equals(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    task \u003d new Deadline(data[2], data[3], data[1].equals(\"1\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    task \u003d new Event(data[2], data[3], data[1].equals(\"1\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    throw new StorageException(\"Could not load tasks.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            sc.close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            createFile();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Creates the data file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If the data file cannot be created."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private void createFile() throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Path path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Path parentDir \u003d path.getParent();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Files.createFile(path);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new StorageException(\"Could not create data file.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Saves the tasks into the data file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param tasks The tasks to be saved."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If the tasks cannot be saved."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void save(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                fw.write(task.formatToSave() + System.lineSeparator());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new StorageException(\"Could not save tasks.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 108
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.MissingArgumentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Adds a task to the TaskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    String type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    String details;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs an AddCommand with the specified type and details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param type The type of task for the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param details The details of the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public AddCommand(String type, String details) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.details \u003d details.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Adds the task to the TaskList and returns an acknowledgement message."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param tasks The TaskList where the task is to be added."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return A string with the message to be printed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If the details is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String execute(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assert (type.equals(\"todo\") || type.equals(\"deadline\") || type.equals(\"event\")) : \"Invalid task type\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            checkEmptyDetails(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            task \u003d new Todo(details);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            checkEmptyDetails(\"description and due date of a deadline\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (details.startsWith(\"/by\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                throw new MissingArgumentException(\"description of a deadline\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (details.endsWith(\"/by\") || !details.contains(\"/by\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                throw new MissingArgumentException(\"due date of a deadline\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            String[] deadlineArr \u003d details.split(\"/by\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            task \u003d new Deadline(deadlineArr[0].trim(), deadlineArr[1].trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            checkEmptyDetails(\"description and date and time of an event\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (details.startsWith(\"/at\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                throw new MissingArgumentException(\"description of an event\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (details.endsWith(\"/at\") || !details.contains(\"/at\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                throw new MissingArgumentException(\"date and time of an event\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            String[] eventArr \u003d details.split(\" /at \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            task \u003d new Event(eventArr[0].trim(), eventArr[1].trim());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return Ui.showToUser(Ui.MESSAGE_ADD, Ui.INDENT + task, Ui.getNumberOfTasksMessage(tasks));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Checks if the details of the command is empty."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param message The message to be printed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If the details of the command is empty."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private void checkEmptyDetails(String message) throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (this.details.equals(\"\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new MissingArgumentException(message);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 86
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Represents a command to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns true if the command terminates the program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return true if the command terminates the program."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Executes the command and returns and acknowledgement message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param tasks The TaskList containing the tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return A string with the message to be printed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If the command is invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public abstract String execute(TaskList tasks) throws DukeException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 28
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Deletes a task from the TaskList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a DeleteCommand with the specified index."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param index The index of the task to be deleted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Deletes the task at the specified index in the TaskList and returns an acknowledgement message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param tasks The TaskList where the task is to be deleted."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return A string with the message to be printed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If the index is out of range (index \u003c 1 || index \u003e size())."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String execute(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Task task \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return Ui.showToUser(Ui.MESSAGE_DELETE, Ui.INDENT + task, Ui.getNumberOfTasksMessage(tasks));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 35
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Marks a task in the TaskList as done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a DoneCommand with the specified index."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param index The index of the task to be marked as done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Marks the task at the specified index in the TaskList as done and returns an acknowledgement message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param tasks The TaskList where the task is to be marked as done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return A string with the message to be printed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If the index is out of range (index \u003c 1 || index \u003e size())."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String execute(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assert task.getStatusIcon().equals(\"Y\") : \"Task should be marked as done\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return Ui.showToUser(Ui.MESSAGE_DONE, Ui.INDENT + task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 37
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns true if the command terminates the program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return true if the command terminates the program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Saves the tasks in the TaskList to the data file and terminates the program with the exit message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param tasks The TaskList containing the tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return A string with the message to be printed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String execute(TaskList tasks) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return Ui.showExit();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 30
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Find tasks from the TaskList with the specified keyword."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a FindCommand with the specified keyword."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param keyword The keyword to filter."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Finds tasks with the specified keyword and returns a string representation of the tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param tasks The TaskList containing the tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return A string with the message to be printed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String execute(TaskList tasks) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        TaskList filteredTasks \u003d tasks.find(keyword);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (filteredTasks.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return Ui.MESSAGE_NO_MATCHING_TASK;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return Ui.showToUser(Ui.MESSAGE_FIND, filteredTasks.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 36
    }
  },
  {
    "path": "src/main/java/duke/command/GetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Gets tasks from the TaskList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class GetCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a GetCommand with the specified date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param date The date for the command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public GetCommand(LocalDate date) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Gets tasks on the specified date and returns a string representation the tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param tasks The TaskList containing the tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return A string with the message to be printed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String execute(TaskList tasks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        TaskList filteredTasks \u003d tasks.find(date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (filteredTasks.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return Ui.MESSAGE_NO_MATCHING_TASK;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return Ui.showToUser(Ui.MESSAGE_FIND, filteredTasks.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 38
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Lists the tasks in the TaskList."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Prints the tasks in the specified TaskList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param tasks The TaskList containing the tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return A string with the message to be printed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String execute(TaskList tasks) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return Ui.MESSAGE_NO_TASK;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return Ui.showToUser(Ui.MESSAGE_LIST, tasks.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 24
    }
  },
  {
    "path": "src/main/java/duke/command/UpdateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.InvalidDateTimeFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.MissingArgumentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.UpdateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Updates a task in the TaskList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    String details;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs an UpdateCommand with the specified index and details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param index The index of the task to be updated."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param details The details of the update."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public UpdateCommand(int index, String details) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Updates the task at the specified index in the TaskList and returns an acknowledgement message."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param tasks The TaskList containing the tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return A string with the message to be printed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If the details is invalid."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String execute(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (task instanceof Todo) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new UpdateException(\"Todo cannot be updated.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (details.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new MissingArgumentException(\"details of the task to update\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        int dateIndex \u003d details.indexOf(\"/d \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        int timeIndex \u003d details.indexOf(\"/t \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if ((dateIndex !\u003d 0 \u0026\u0026 timeIndex !\u003d 0)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new UpdateException(\"Invalid details format. \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    + \"Use d/ to indicate the new date and t/ to indicate the new time.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String date \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String time \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (dateIndex !\u003d -1 \u0026\u0026 timeIndex !\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            date \u003d details.substring(dateIndex + 3, timeIndex).trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            time \u003d details.substring(timeIndex + 3).trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } else if (dateIndex !\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            date \u003d details.substring(dateIndex + 3).trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            time \u003d details.substring(timeIndex + 3).trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        updateTask(task, date, time);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return Ui.showToUser(Ui.MESSAGE_UPDATE, Ui.INDENT + task);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Updates the task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param task The task to be updated."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param date The updated date."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param time The updated time."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If date or time format is incorrect."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private void updateTask(Task task, String date, String time) throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            LocalDate newDate;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            LocalTime newTime;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                if (date !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    newDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    ((Deadline) task).setDate(newDate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                if (time !\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    newTime \u003d LocalTime.parse(time);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    ((Deadline) task).setTime(newTime);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                LocalTime newEndTime;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                if (date !\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    newDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    ((Event) task).setDate(newDate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                if (time !\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    String[] timeArray \u003d time.split(\"-\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    newTime \u003d LocalTime.parse(timeArray[0]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    newEndTime \u003d LocalTime.parse(timeArray[1]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    ((Event) task).setStartTime(newTime);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    ((Event) task).setEndTime(newEndTime);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DateTimeParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new InvalidDateTimeFormatException(\"yyyy-mm-dd for date and hh:mm for time\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 110
    }
  },
  {
    "path": "src/main/java/duke/exception/DoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Indicates an exception when a task already done is to be marked as done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class DoneException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a DoneException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public DoneException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        super(\"Task is already marked as done.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Indicates an exception in the duke application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a DukeException with the specified detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param message The detail message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDateTimeFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Indicates an exception when the format of the date or time is incorrect."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class InvalidDateTimeFormatException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs an InvalidDateTimeFormatException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param format The correct format required."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public InvalidDateTimeFormatException(String format) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        super(\"Incorrect date or time format. Format required: \" + format);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidEventTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Indicates an exception when the start time of an event is after the end time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class InvalidEventTimeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs an InvalidEventTimeException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public InvalidEventTimeException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        super(\"Start time cannot be after end time.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidIdException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Indicates an exception when the ID is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class InvalidIdException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs an InvalidIdException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param type The type of command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public InvalidIdException(String type) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        super(\"The ID of the task \" + type + \" should be a number.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/MissingArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Indicates an exception when the argument is missing."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class MissingArgumentException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a MissingArgumentException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param details The details that should not be empty."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public MissingArgumentException(String details) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        super(\"The \" + details + \" cannot be empty.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/StorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Indicates an exception in the storage."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class StorageException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a StorageException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param message The detail message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public StorageException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/TaskCannotBeFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Indicates an exception when task cannot be found."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class TaskCannotBeFoundException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a TaskCannotBeFoundException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public TaskCannotBeFoundException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        super(\"Task cannot be found.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Indicates an exception due to an unknown command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs an UnknownCommandException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public UnknownCommandException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        super(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/UpdateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Indicates an exception when the task cannot be updated."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class UpdateException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs an UpdateException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param message The message to be printed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public UpdateException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 14
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.InvalidDateTimeFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Represents a deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a Deadline with the specified description and due date and time."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param description The description of the deadline."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param by The due date and time of the deadline in yyyy-mm-dd hh:mm format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If the date or time is in the incorrect format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Deadline(String description, String by) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            String[] dateTimeArray \u003d by.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            this.date \u003d LocalDate.parse(dateTimeArray[0]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            this.time \u003d LocalTime.parse(dateTimeArray[1]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DateTimeParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new InvalidDateTimeFormatException(\"yyyy-mm-dd hh:mm\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a Deadline with the specified description, due date and time and status."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param description The description of the deadline."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param by The due date and time of the deadline in yyyy-mm-dd hh:mm format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param isDone Whether the deadline is done."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Deadline(String description, String by, boolean isDone) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String[] dateTimeArray \u003d by.split(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.date \u003d LocalDate.parse(dateTimeArray[0]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.time \u003d LocalTime.parse(dateTimeArray[1]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns the date of the deadline."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return The date of the deadline."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Sets the date of the deadline to the specified date."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param date The date of the deadline."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Sets the time of the deadline to the specified time."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param time The time of the deadline."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setTime(LocalTime time) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns a string representation of the deadline for saving to the disk."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return String representation of the deadline for saving to the disk."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String formatToSave() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return \"D\" + super.formatToSave() + \" | \" + date + \" \" + time;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns a string representation of the deadline for printing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return String representation of the deadline for printing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                + date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \" \" + time + \")\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 95
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.InvalidDateTimeFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.InvalidEventTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Represents an Event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    protected LocalTime startTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    protected LocalTime endTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs an Event with the specified description and date and time."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param description The description of the event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param at The date and time of the event in yyyy-mm-dd hh:mm-hh:mm format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If the date or time is in the incorrect format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Event(String description, String at) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            String[] dateTimeArray \u003d at.split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            this.date \u003d LocalDate.parse(dateTimeArray[0]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            String[] timeArray \u003d dateTimeArray[1].split(\"-\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            this.startTime \u003d LocalTime.parse(timeArray[0]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            this.endTime \u003d LocalTime.parse(timeArray[1]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (startTime.isAfter(endTime)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                throw new InvalidEventTimeException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DateTimeParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new InvalidDateTimeFormatException(\"yyyy-mm-dd hh:mm-hh:mm\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs an Event with the specified description, date and time and status."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param description The description of the event."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param at The date and time of the event in yyyy-mm-dd hh:mm-hh:mm format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param isDone Whether the event is done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Event(String description, String at, boolean isDone) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String[] dateTimeArray \u003d at.split(\" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.date \u003d LocalDate.parse(dateTimeArray[0]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String[] timeArray \u003d dateTimeArray[1].split(\"-\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.startTime \u003d LocalTime.parse(timeArray[0]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.endTime \u003d LocalTime.parse(timeArray[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns the date of the event."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return The date of the event."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Sets the date of the event to the specified date."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param date The date of the event."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Sets the start time of the event to the specified time."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param time The start time of the event."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setStartTime(LocalTime time) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.startTime \u003d time;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Sets the end time of the event to the specified time."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param time The end time of the event."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setEndTime(LocalTime time) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.endTime \u003d time;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns a string representation of the event for saving to the disk."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return String representation of the event for saving to the disk."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String formatToSave() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return \"E\" + super.formatToSave() + \" | \" + date + \" \" + startTime + \"-\" + endTime;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns a string representation of the event for printing."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return String representation of the event for printing."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                + date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \" \" + startTime + \"-\" + endTime + \")\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 112
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.DoneException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Represents a task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a Task with the specified description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param description The description of the Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a Task with the specified description and status."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param description The description of the Task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param isDone Whether the Task is done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return The description of the task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns the status of the task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return Y if the task is done and N is the task is not done."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return (isDone ? \"Y\" : \"N\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If the task is already marked as done."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void markAsDone() throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new DoneException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns a string representation of the task for saving to the disk."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return String representation of the task for saving to the disk."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String formatToSave() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return \" | \" + (isDone ? 1 : 0) + \" | \" + description;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns a string representation of the task for printing."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return String representation of the task for printing."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 82
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.TaskCannotBeFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Represents a list of tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs an empty TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a TaskList containing the elements of the specified list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param tasks The list whose elements are to be placed into this TaskList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns the task at the specified position in this TaskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param index The 1-based index of the task to return."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return The task at the specified position in the TaskList."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If the index is out of range (index \u003c 1 || index \u003e size())."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Task get(int index) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return tasks.get(index - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new TaskCannotBeFoundException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Appends the specified task to the end of this TaskList."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param task Task to be appended to this TaskList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Removes the task at the specified position in this TaskList."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Shifts any subsequent tasks to the left (subtracts one from their indices)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param index The 1-based index of the task to be removed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return The task that was removed from the TaskList."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws DukeException If the index is out of range (index \u003c 1 || index \u003e size())."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Task remove(int index) throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return tasks.remove(index - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new TaskCannotBeFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns a TaskList containing tasks on the specified date."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param date The date to to filter."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return A TaskList containing tasks on the specified date."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public TaskList find(LocalDate date) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        TaskList filteredTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if ((task instanceof Deadline \u0026\u0026 ((Deadline)task).getDate().equals(date))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    || (task instanceof Event \u0026\u0026 ((Event)task).getDate().equals(date))) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                filteredTasks.add(task);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns a TaskList containing tasks with the specified keyword."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param keyword The keyword to search for."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return A TaskList containing tasks with the specified keyword."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public TaskList find(String keyword) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        TaskList filteredTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                filteredTasks.add(task);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns a list of all tasks in this TaskList."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return A list of all tasks in the TaskList."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns true if this TaskList contains no tasks."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return true if this TaskList contains no tasks."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns the number of tasks in this TaskList."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return The number of tasks in the TaskList."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns a string representation of the TaskList."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return A String representation of the TaskList."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            sb.append(i + \".\" + tasks.get(i - 1));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (i !\u003d tasks.size()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                sb.append(System.lineSeparator());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 148
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Represents a Todo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a Todo with the specified description."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param description The description of the Todo."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a Todo with the specified description and status."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param description The description of the Todo."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param isDone Whether the Todo is done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns a string representation of the todo for saving to the disk."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return String representation of the todo for saving to the disk."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String formatToSave() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return \"T\" + super.formatToSave();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns a string representation of the todo for printing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return String representation of the todo for printing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 45
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a DialogBox with the specified text and image."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param text The text of the DialogBox."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param img The image of the DialogBox."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        final Circle clip \u003d new Circle(40, 40, 40);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns a DialogBox with the specified text and image."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param text The user input."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param img  An image representing the user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return A DialogBox with the specified text and image."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns a DialogBox with the specified image and text."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param text Duke\u0027s response."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param img  An image representing Duke."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return A DialogBox with the specified image and text."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 82
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Initialises the GUI to display the welcome message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(Ui.showWelcome(), dukeImage));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Sets the Duke object for the MainWindow."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param duke The Duke object to be set."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setDuke(Duke duke) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (duke.isExit()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            PauseTransition pause \u003d new PauseTransition(Duration.seconds(2));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            pause.setOnFinished(event -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            pause.play();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 71
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Interacts with the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String INDENT \u003d \"  \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_WELCOME \u003d \"Hello! I\u0027m Duke.\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_ADD \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_DONE \u003d \"Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_UPDATE \u003d \"Noted. I\u0027ve updated this task:\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_DELETE \u003d \"Noted. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_FIND \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_NO_MATCHING_TASK \u003d \"There are no matching tasks in your list.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_LIST \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_NO_TASK \u003d \"There are no tasks in the list.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_EXIT \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static Scanner sc;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a new Ui."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns a string message with the number of tasks in the TaskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param tasks The TaskList of tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return A string message with the number of tasks in the TaskList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static String getNumberOfTasksMessage(TaskList tasks) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return \"Now you have \" + tasks.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns the user input read."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return The user input read."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return sc.nextLine().trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Prints the welcome message when the duke application starts up."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return The welcome message when the duke application starts up."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static String showWelcome() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return MESSAGE_WELCOME;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns the exit message when the duke application is terminated."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return The exit message when the duke application is terminated."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static String showExit() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return MESSAGE_EXIT;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns a string representation of the message to be printed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param message The message to be printed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return A string representation of the message to be printed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static String showToUser(String... message) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return String.join(System.lineSeparator(), message);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns the error message when an exception is thrown."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return The error message when an exception is thrown."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String showError(String message) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return \"OOPS!!! \" + message;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Prints the message."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param message The message to be printed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void print(String message) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 96
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"380.0\" spacing\u003d\"10.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" style\u003d\"-fx-background-color: #ADDFFF; -fx-background-radius: 10; -fx-padding: 10;\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"80.0\" fitWidth\u003d\"80.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "zixinn": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "zixinn": 19
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.command.GetCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": " "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void parse_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(Parser.parse(\"todo read book\") instanceof AddCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(Parser.parse(\"deadline return book /by 2020-02-02 18:00\") instanceof AddCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(Parser.parse(\"event project meeting /at 2020-01-27 14:00-16:00\") instanceof AddCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(Parser.parse(\"done 2\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(Parser.parse(\"delete 2\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(Parser.parse(\"get 2020-02-02\") instanceof GetCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(Parser.parse(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(Parser.parse(\"bye\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void parse_invalidCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Parser.parse(\"todo\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            assertEquals(\"The description of a todo cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Parser.parse(\"deadline\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            assertEquals(\"The description and due date of a deadline cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Parser.parse(\"event\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            assertEquals(\"The description and date and time of an event cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Parser.parse(\"done\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            assertEquals(\"The ID of the task done cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Parser.parse(\"done return book\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            assertEquals(\"The ID of the task done should be a number.\", e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Parser.parse(\"delete\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            assertEquals(\"The ID of the task to delete cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Parser.parse(\"delete return book\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            assertEquals(\"The ID of the task to delete should be a number.\", e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Parser.parse(\"get\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            assertEquals(\"The date of tasks to retrieve cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Parser.parse(\"get 02-02-2020\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            assertEquals(\"Incorrect date or time format. Format required: yyyy-mm-dd\", e.getMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Parser.parse(\"find\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            assertEquals(\"The keyword to search cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void parse_unknownCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Parser.parse(\"xxx\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            assertEquals(\"I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 103
    }
  },
  {
    "path": "src/test/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": " "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void get_validId_success() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        tasks.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"[T][N] read book\", tasks.get(1).toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void get_invalidId_exceptionThrown() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            tasks.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            tasks.get(2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            assertEquals(\"Task cannot be found.\", e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(tasks.isEmpty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        tasks.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(1, tasks.size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void remove_validId_success() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        tasks.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        tasks.remove(1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(0, tasks.size());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void remove_invalidId_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            tasks.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            tasks.remove(2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            assertEquals(\"Task cannot be found.\", e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void getTasks() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(new ArrayList\u003cTask\u003e(), tasks.getTasks());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 69
    }
  },
  {
    "path": "src/test/java/duke/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": " "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void execute_validId_success() throws Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        tasks.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Command cmd \u003d new DeleteCommand(1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        cmd.execute(tasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(tasks.isEmpty());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void execute_invalidId_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            tasks.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Command cmd \u003d new DeleteCommand(2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            cmd.execute(tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            assertEquals(\"Task cannot be found.\", e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 35
    }
  },
  {
    "path": "src/test/java/duke/command/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": " "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "class DoneCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void execute_validId_success() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        tasks.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Command cmd \u003d new DoneCommand(1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        cmd.execute(tasks);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"[T][Y] read book\", tasks.get(1).toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void execute_invalidId_exceptionThrown() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            tasks.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Command cmd \u003d new DoneCommand(2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            cmd.execute(tasks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            assertEquals(\"Task cannot be found.\", e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void execute_isDone_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            tasks.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Command cmd \u003d new DoneCommand(1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            cmd.execute(tasks);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            cmd.execute(tasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            assertEquals(\"Task is already marked as done.\", e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 48
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": " "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void constructorTest_validDateTime_success() throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"return book\", \"2020-02-02 18:00\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"return book\", deadline.description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"2020-02-02\", deadline.date.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"18:00\", deadline.time.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void constructorTest_invalidDateTimeFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Deadline deadline \u003d new Deadline(\"return book\", \"2020-02-02 6pm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            assertEquals(\"Incorrect date or time format. Format required: yyyy-mm-dd hh:mm\", e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void constructorTest_missingDateTime_exceptionThrown() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Deadline deadline \u003d new Deadline(\"return book\", \"2020-02-02\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            assertEquals(\"Incorrect date or time format. Format required: yyyy-mm-dd hh:mm\", e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void constructorTest2() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"return book\", \"2020-02-02 18:00\", false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"return book\", deadline.description);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"2020-02-02\", deadline.date.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"18:00\", deadline.time.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(deadline.isDone);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void getDate() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"return book\", \"2020-02-02 18:00\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"2020-02-02\", deadline.getDate().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void formatToSave() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"return book\", \"2020-02-02 18:00\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"D | 0 | return book | 2020-02-02 18:00\", deadline.formatToSave());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void stringConversion() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"return book\", \"2020-02-02 18:00\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"[D][N] return book (by: 2 Feb 2020 18:00)\", deadline.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 66
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": " "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void constructorTest_validDateTime_success() throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Event event \u003d new Event(\"project meeting\", \"2020-01-27 14:00-16:00\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"project meeting\", event.description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"2020-01-27\", event.date.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"14:00\", event.startTime.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"16:00\", event.endTime.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void constructorTest_invalidDateTimeFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Event event \u003d new Event(\"project meeting\", \"27-01-2020 14:00-16:00\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            assertEquals(\"Incorrect date or time format. Format required: yyyy-mm-dd hh:mm-hh:mm\", e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void constructorTest_missingDateTime_exceptionThrown() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Event event \u003d new Event(\"project meeting\", \"2020-01-27 14:00\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            assertEquals(\"Incorrect date or time format. Format required: yyyy-mm-dd hh:mm-hh:mm\", e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void constructorTest_startTimeAfterEndTime_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Event event \u003d new Event(\"project meeting\", \"2020-01-27 16:00-14:00\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            assertEquals(\"Start time cannot be after end time.\", e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void constructorTest2() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Event event \u003d new Event(\"project meeting\", \"2020-01-27 14:00-16:00\", true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"project meeting\", event.description);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"2020-01-27\", event.date.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"14:00\", event.startTime.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"16:00\", event.endTime.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(event.isDone);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void getDate() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Event event \u003d new Event(\"project meeting\", \"2020-01-27 14:00-16:00\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"2020-01-27\", event.getDate().toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void formatToSave() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Event event \u003d new Event(\"project meeting\", \"2020-01-27 14:00-16:00\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"E | 0 | project meeting | 2020-01-27 14:00-16:00\", event.formatToSave());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void stringConversion() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Event event \u003d new Event(\"project meeting\", \"2020-01-27 14:00-16:00\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"[E][N] project meeting (at: 27 Jan 2020 14:00-16:00)\", event.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 78
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": " "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "class TodoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void constructorTest1() throws Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Todo todo \u003d new Todo(\"read book\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"read book\", todo.description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void constructorTest2() throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Todo todo \u003d new Todo(\"read book\", true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"read book\", todo.description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(todo.isDone);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void formatToSave() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Todo todo \u003d new Todo(\"read book\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"T | 0 | read book\", todo.formatToSave());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void stringConversion() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Todo todo \u003d new Todo(\"read book\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(\"[T][N] read book\", todo.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 33
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "deadline return book /by 2020-02-02 18:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "event project meeting /at 2020-01-27 14:00-16:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "zixinn": 8
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/Duke.java ../src/main/java/duke/exception/*.java ../src/main/java/duke/Parser.java ../src/main/java/duke/Storage.java ../src/main/java/duke/command/*.java ../src/main/java/duke/task/*.java ../src/main/java/duke/ui/Ui.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "zixinn": 34
    }
  }
]
