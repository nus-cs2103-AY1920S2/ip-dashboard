[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "test {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "application {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "run {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 57
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "D | 1 | return book | 2019-12-10 1800"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "E | 1 | project meeting | 2020-08-06 1400"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "T | 1 | join sports club"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "T | 0 | read book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "D | 1 | read book | 2019-08-07 1400"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "T | 1 | buy book"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 6
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 84
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "rootProject.name \u003d \u0027duke\u0027"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 1
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Represents a deadline."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    LocalDateTime time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Deadline(String instr, LocalDateTime time) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        super(instr);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Getter for the \u003ccode\u003etime\u003c/code\u003e of \u003ccode\u003eDeadline\u003c/code\u003e."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (super.done) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            return \"[D][DONE]\" + super.instr;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            return \"[D][INCOMPLETE]\" + super.instr + \" (by: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    + time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\")) + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 33
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.scene.layout.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Circle displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        dialog.setPadding(new Insets(10,15,10,15));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        dialog.setMinHeight(Region.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        displayPicture.setFill(new ImagePattern(img));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        var userDialog \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        userDialog.dialog.setStyle(\"-fx-background-image: url(images/UserBubble.png); \" +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \"-fx-background-size: stretch, contain; -fx-background-position: center; \" +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \"-fx-background-repeat: no-repeat no-repeat;\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return userDialog;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        var dukeBubble \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        dukeBubble.flip();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        dukeBubble.dialog.setStyle(\"-fx-background-image: url(images/DukeBubble.png); \" +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \"-fx-background-size: stretch, contain; -fx-background-position: center; \" +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                \"-fx-background-repeat: no-repeat no-repeat;\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return dukeBubble;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 70
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * \u003ccode\u003eDuke\u003c/code\u003e is a chatbox that keep tracks of various tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Duke.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            AnchorPane ap \u003d (AnchorPane) fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 30,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Exceptions that may happen while using \u003ccode\u003eDuke\u003c/code\u003e."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 10
    }
  },
  {
    "path": "src/main/java/duke/DukeStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Stub for a completed Duke that can respond to user input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class DukeStub {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static String getResponse(String input) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return String.format(input);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 10
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Represents an event."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    LocalDateTime time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Event(String instr, LocalDateTime time) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        super(instr);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Getter for the \u003ccode\u003etime\u003c/code\u003e of \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (super.done) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            return \"[E][DONE]\" + super.instr;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            return \"[E][INCOMPLETE]\" + super.instr + \" (at: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    + time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\"))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 34
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 12
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private String filePath \u003d \"../duke/data/duke.txt\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void initialize() throws FileNotFoundException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            taskList \u003d new TaskList(storage.load(), ui);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            String err \u003d DukeStub.getResponse(ui.showInvalideFile());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    DialogBox.getDukeDialog(err, duke)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            taskList \u003d new TaskList(ui);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        //Greets the user"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String greet \u003d DukeStub.getResponse(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                DialogBox.getDukeDialog(greet, duke)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private void handleUserInput() throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        parser \u003d new Parser(ui, taskList, input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String response \u003d DukeStub.getResponse(parser.run());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                DialogBox.getUserDialog(input, user),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                DialogBox.getDukeDialog(response, duke)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        );"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        storage.writeStorage(taskList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            PauseTransition pause \u003d new PauseTransition(Duration.seconds(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            pause.setOnFinished(event -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            });"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            pause.play();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 85
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * A class which scans the user input and decides which task to be carried out."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Constructor of the class Parser."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param ui The UI used for Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param taskList A list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Parser(Ui ui, TaskList taskList, String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Scans the user inputs and calls necessary methods based on the command input by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String run() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (this.input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            return ui.bye();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } else if (this.input.equals(\"list\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            return ui.list(taskList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                int i \u003d this.input.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                String command \u003d input.substring(0, i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                if (command.equals(\"delete\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    int n \u003d Integer.parseInt(input.substring(i + 1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    return taskList.delete(n);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                } else if (command.equals(\"done\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    int n \u003d Integer.parseInt(input.substring(i + 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    return taskList.done(n);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                } else if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    String desc \u003d input.substring(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    return taskList.addTodo(desc);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                } else if (command.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    String desc \u003d input.substring(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    return taskList.addDeadline(desc);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                } else if (command.equals(\"event\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    String desc \u003d input.substring(i);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    return taskList.addEvent(desc);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                } else if (command.equals(\"find\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    String desc \u003d input.substring(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    ArrayList\u003cTask\u003e foundList \u003d taskList.find(desc);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    return ui.findList(new TaskList(foundList, ui));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    return ui.showInvalidDesc();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            } catch (java.lang.StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                return ui.showInvalidCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 64
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Represents the file where the tasks input by the user are store at."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Scanner scFile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Constructor of the class, Storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param filePath Path of the file to store the output."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @throws FileNotFoundException If the file to store the output is not found."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Storage(String filePath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.file \u003d new File(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        scFile \u003d new Scanner(file);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Reads the \u003ccode\u003efile\u003c/code\u003e and adds each task to the \u003ccode\u003etaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @throws DukeException If the format of text in the file is incorrect."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        while (scFile.hasNextLine()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            String fileInput \u003d scFile.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            String[] splitted \u003d fileInput.split(\" \\\\| \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            if (splitted[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                Todo newTask \u003d new Todo(\" \" + splitted[2]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                if (splitted[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    newTask.done();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                taskList.add(newTask);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            } else if (splitted[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                Deadline newTask \u003d new Deadline(\" \" + splitted[2],"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        LocalDateTime.parse(splitted[3], formatter));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                if (splitted[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    newTask.done();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                taskList.add(newTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            } else if (splitted[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                Event newTask \u003d new Event(\" \" + splitted[2],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        LocalDateTime.parse(splitted[3], formatter));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                if (splitted[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                    newTask.done();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                taskList.add(newTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                throw new DukeException(\"Unable to read task in file\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Reads the \u003ccode\u003efile\u003c/code\u003e and adds each task to the \u003ccode\u003etaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param tasks A list which stores the tasks."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @throws IOException If the file is unavailable for writing."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void writeStorage(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        for (Task t: tasks.getTaskList()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            int isDone \u003d 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            if (t.isDone()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                isDone \u003d 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            if (t instanceof Todo) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                fileWriter.write(\"T | \" + isDone + \" |\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        + t.getInstr() + System.lineSeparator());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            } else if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                fileWriter.write(\"D | \" + isDone + \" |\" + t.getInstr() + \" | \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        + ((Deadline) t).getTime().format(DateTimeFormatter"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            .ofPattern(\"yyyy-MM-dd HHmm\"))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        + System.lineSeparator());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            } else if (t instanceof Event) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                fileWriter.write(\"E | \" + isDone + \" |\" + t.getInstr() + \" | \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        + ((Event) t).getTime().format(DateTimeFormatter"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                            .ofPattern(\"yyyy-MM-dd HHmm\"))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        + System.lineSeparator());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 102
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Represents a task which an user input in the \u003ccode\u003eDuke\u003c/code\u003e chatbox."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * A \u003ccode\u003eTask\u003c/code\u003e consists of 2 components:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * \u003ccode\u003einstr\u003c/code\u003e (instructions), which describes the task required to be carried out and"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * \u003ccode\u003edone\u003c/code\u003e, which describes the status of the task (whether it is completed)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    String instr;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    boolean done;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Task(String instr) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.instr \u003d instr;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Changes the \u003ccode\u003eTask\u003c/code\u003e\u0027s status to \u003ccode\u003edone\u003c/code\u003e when the task is completed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void done() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Getter for \u003ccode\u003einstr\u003c/code\u003e (instruction), the description of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String getInstr() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return instr;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Indicates if the task is completed. Returns \u003ccode\u003etrue\u003c/code\u003e when task is done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (done) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            return \"[DONE] \" + this.instr;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            return \"[INCOMPLETE] \" + this.instr;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 47
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Represents the list which stores the tasks input by the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public TaskList(Ui ui) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList, Ui ui) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Delete a task from the list based on the index input by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param index Index of a task in the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @throws DukeException If the index input is unavailable in the list of tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String delete(int index) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            if (index \u003c\u003d taskList.size()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                Task delTask \u003d taskList.get(index - 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                taskList.remove(index - 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                output \u003d ui.delete(delTask, taskList.size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                throw new DukeException(\"Invalid Task Index\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            output \u003d ui.showInvalidTaskIndex();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Changes the indicated task\u0027s status to \u003ccode\u003edone\u003c/code\u003e."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param index Index of a task in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @throws DukeException If the index input is unavailable in the list of tasks."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String done(int index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            if (index \u003c\u003d taskList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                Task doneTask \u003d taskList.get(index - 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                doneTask.done();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                output \u003d ui.done(doneTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                throw new DukeException(\"Invalid Task Index\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            output \u003d ui.showInvalidTaskIndex();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Adds a new to-do into the tasks list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param instr Description of the to-do."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @throws DukeException If the description of the to-do is empty."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String addTodo(String instr) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            if (!instr.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                Todo newTask \u003d new Todo(instr);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                taskList.add(newTask);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                output \u003d ui.addTask(newTask, taskList.size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                throw new DukeException(\"Invalid Todo Description\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            output \u003d ui.showInvalidDesc();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Adds a new deadline into the tasks list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param instr Description of the deadline."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @throws DukeException If the description of the deadline is empty."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String addDeadline(String instr) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            if (!instr.isEmpty()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                String[] splitTime \u003d instr.split(\" /by \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                Deadline newTask \u003d new Deadline(splitTime[0],"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        LocalDateTime.parse(splitTime[1], formatter));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                taskList.add(newTask);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                output \u003d ui.addTask(newTask, taskList.size());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                throw new DukeException(\"Invalid Deadline Description\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            output \u003d ui.showInvalidDesc();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Adds a new event into the tasks list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param instr Description of the event."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @throws DukeException If the description of the event is empty."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String addEvent(String instr) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            if (!instr.isEmpty()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                String[] splitTime \u003d instr.split(\" /at \");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                Event newTask \u003d new Event(splitTime[0],"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                        LocalDateTime.parse(splitTime[1], formatter));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                taskList.add(newTask);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                output \u003d ui.addTask(newTask, taskList.size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                throw new DukeException(\"Invalid Event Description\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            output \u003d ui.showInvalidDesc();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Returns a list of tasks that contains the \u003ccode\u003ekeyword\u003c/code\u003e."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param keyword Search keyword."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public ArrayList\u003cTask\u003e find(String keyword) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        ArrayList\u003cTask\u003e foundList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        for (Task t: taskList) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            if (t.getInstr().contains(keyword)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                foundList.add(t);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return foundList;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * A getter for the list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            output +\u003d i + 1 + \". \" + taskList.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 170
    }
  },
  {
    "path": "src/main/java/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Represents a to-do."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Todo(String instr) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        super(instr);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        if (super.done) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            return \"[T][DONE]\" + super.instr;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            return \"[T][INCOMPLETE]\" + super.instr;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 19
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " * Represents the user interface. \u003ccode\u003eUi\u003c/code\u003e outputs messages and interacts with the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Bids farewell after the user input \"bye\"."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String bye() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Prints the list of tasks in the order of input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param taskList A list which stores the tasks input by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String list(TaskList taskList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return \"Here are the tasks in your list: \\n\" + taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Prints the list of search results."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String findList(TaskList taskList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return \"Here are the matching tasks in your list: \\n\" + taskList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Prints a message to notify the user that a task is deleted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param delTask Task to be deleted."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param totalTask Total number of tasks in the tasks list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String delete(Task delTask, int totalTask) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return \"Noted. I\u0027ve removed this task: \\n\" + delTask"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                + \"\\nNow you have \" + totalTask + \" tasks in the list.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Prints a message to notify the user that a task is completed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param doneTask Task that is completed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String done(Task doneTask) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done: \\n\" + doneTask;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Prints a message to notify the user that a new task has been added to the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param newTask Task to be added."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * @param totalTask Total number of tasks in the tasks list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String addTask(Task newTask, int totalTask) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return \"Got it. I\u0027ve added this task: \\n\" + newTask"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                + \"\\nNow you have \" + totalTask + \" tasks in the list.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Prints a message to warn the user when the system is unable to recognise the command."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String showInvalidCommand() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Prints a message to warn the user when the index input for a \u003ccode\u003edelete\u003c/code\u003e or \u003ccode\u003edone\u003c/code\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * command is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String showInvalidTaskIndex() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return \"OOPS!!! The task is unavailable.\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Prints a message to warn the user when the description for a task is empty."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String showInvalidDesc() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return \"OOPS!!! The description of a task cannot be empty.\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     * Prints a message to warn the user when unable to read file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public String showInvalideFile() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        return \"OOPS!!! Unable to read the tasks in the file.\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 95
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003cfx:root alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "      \u003cHBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "         \u003cCircle fx:id\u003d\"displayPicture\" pickOnBounds\u003d\"true\" radius\u003d\"40\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            \u003cInsets bottom\u003d\"0\" left\u003d\"8.0\" right\u003d\"8.0\" top\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 22
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 19
    }
  },
  {
    "path": "src/test/java/duke/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void testDeadlineStringConversion(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Deadline deadline \u003d new Deadline(\" read book\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                LocalDateTime.parse(\"2020-02-02 2020\", formatter));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertEquals(\"[D][INCOMPLETE] read book (by: Feb 2 2020 20:20)\", deadline.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        deadline.done();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertEquals(\"[D][DONE] read book\", deadline.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 20
    }
  },
  {
    "path": "src/test/java/duke/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void testEventStringConversion(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Event event \u003d new Event(\" read book\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "                LocalDateTime.parse(\"2020-02-02 2020\", formatter));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertEquals(\"[E][INCOMPLETE] read book (at: Feb 2 2020 20:20)\", event.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        event.done();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertEquals(\"[E][DONE] read book\", event.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 20
    }
  },
  {
    "path": "src/test/java/duke/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void testTaskDone() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Task task \u003d new Task(\"buy book\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertEquals(false, task.isDone());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        task.done();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertEquals(true, task.isDone());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void testTaskStringConversion(){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Task task \u003d new Task(\"read book\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertEquals(\"[INCOMPLETE] read book\", task.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        task.done();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertEquals(\"[DONE] read book\", task.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 23
    }
  },
  {
    "path": "src/test/java/duke/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    public void testTodoStringConversion(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        Todo todo \u003d new Todo(\" read book\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertEquals(\"[T][INCOMPLETE] read book\", todo.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        todo.done();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "        assertEquals(\"[T][DONE] read book\", todo.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 15
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 7
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "syinyichen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "syinyichen"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "syinyichen": 21
    }
  }
]
