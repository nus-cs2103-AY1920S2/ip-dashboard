[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "test {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    archiveVersion \u003d \"0.1.0\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 37,
      "-": 20
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "enum Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    ADD_TODO,"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    ADD_DEADLINE,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    ADD_EVENT,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    LIST_TASKS,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    FIND_TASKS,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    MARK_TASK_AS_DONE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    EXIT_DUKE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    DELETE_TASK,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    NOT_FOUND"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 11
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This class represents a Deadline task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private String formattedDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the {@code Deadline} class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description description of the task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param isDone      indicates if this task is done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date        the duedate of the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Deadline(String description, boolean isDone, LocalDate date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.formattedDate \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getFormattedDate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this.formattedDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getFullDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return \"[D]\" + super.getDescriptionWithIsDone() + \" (by: \" + this.formattedDate + \")\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean isSimilarTask(Task task) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return super.getDescription().equals(deadline.getDescription()) \u0026\u0026 this.date.equals(deadline.getDate());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 34,
      "-": 7
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML. This control represents a dialog"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Circle circle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        circle.setFill(new ImagePattern(img));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@code getUserDialog}, except that the whole node is flipped"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * horizontally."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param text input string"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param img  input image"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return returns a {@code DialogBox}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 52,
      "-": 17
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This class is the main point of entry for this project."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the {@code Duke} class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            this.initialise();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (Exception err) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            err.printStackTrace();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String greet() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"Hello, I am Karen, your personal assistant.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Initialises Duke by reading the stored data from disk and storing the tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * in {@code TaskList}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private void initialise() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ArrayList\u003cString\u003e lines \u003d this.storage.readFromDisk();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            parser.parseDiskData(line);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            Command command \u003d parser.getCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (command \u003d\u003d Command.ADD_TODO) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                Todo todo \u003d new Todo(parser.getDescription(), parser.getIsDone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                this.taskList.addTask(todo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            } else if (command \u003d\u003d Command.ADD_DEADLINE) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                Deadline deadline \u003d new Deadline(parser.getDescription(), parser.getIsDone(), parser.getDate());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                this.taskList.addTask(deadline);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            } else if (command \u003d\u003d Command.ADD_EVENT) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                Event event \u003d new Event(parser.getDescription(), parser.getIsDone(), parser.getDate());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                this.taskList.addTask(event);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Relays the user input string {@code userInput} to a {@code Parser} object and"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * uses the parsed tokens to manipulate tasks and generate a response String."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param userInput the raw String input from the user"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @return the actual String response of Duke"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getResponse(String userInput) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            parser.parseUserInput(userInput.trim());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            Command command \u003d parser.getCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (command \u003d\u003d Command.LIST_TASKS) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                return this.taskList.listTasks();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            } else if (command \u003d\u003d Command.ADD_TODO) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                Todo todo \u003d new Todo(parser.getDescription(), false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                this.taskList.addTask(todo);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                this.storage.writeToDisk(\"T|0|\" + parser.getDescription());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                return \"Added: \" + todo.getFullDescription() + \"\\n\" + this.taskList.printNumTasks();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            } else if (command \u003d\u003d Command.ADD_DEADLINE) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                Deadline deadline \u003d new Deadline(parser.getDescription(), parser.getIsDone(), parser.getDate());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                this.taskList.addTask(deadline);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                this.storage.writeToDisk(\"D|0|\" + parser.getDescription() + \"|\" + parser.getDate().toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                return \"Added: \" + deadline.getFullDescription() + \"\\n\" + this.taskList.printNumTasks();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            } else if (command \u003d\u003d Command.ADD_EVENT) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                Event event \u003d new Event(parser.getDescription(), parser.getIsDone(), parser.getDate());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                this.taskList.addTask(event);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                this.storage.writeToDisk(\"E|0|\" + parser.getDescription() + \"|\" + parser.getDate().toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                return \"Added: \" + event.getFullDescription() + \"\\n\" + this.taskList.printNumTasks();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            } else if (command \u003d\u003d Command.MARK_TASK_AS_DONE) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                Task task \u003d this.taskList.markAsDone(parser.getTaskIndex());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                this.storage.markAsDone(parser.getTaskIndex());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                return \"Marked as done: \" + task.getFullDescription() + \"\\n\" + this.taskList.printNumTasks();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            } else if (command \u003d\u003d Command.DELETE_TASK) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                Task task \u003d this.taskList.removeTask(parser.getTaskIndex());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                this.storage.removeTask(parser.getTaskIndex());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                return \"Deleted: \" + task.getFullDescription() + \"\\n\" + this.taskList.printNumTasks();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            } else if (command \u003d\u003d Command.FIND_TASKS) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                return this.taskList.findTasks(parser.getDescription());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assert false; // this should be unreachable, all input cases should be handled by above"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 89,
      "-": 7
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public DukeException(String errorMsg) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        super(new String(Character.toChars(0x1F62D)) + \" \" + errorMsg);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This class represents an Event task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private String formattedDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the {@code Event} class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description description of the task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param isDone      indicates if this task is done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date        the duedate of the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Event(String description, boolean isDone, LocalDate date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.formattedDate \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getFormattedDate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this.formattedDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getFullDescription() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return \"[E]\" + super.getDescriptionWithIsDone() + \" (at: \" + this.formattedDate + \")\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean isSimilarTask(Task task) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return super.getDescription().equals(event.getDescription()) \u0026\u0026 this.date.equals(event.getDate());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 35,
      "-": 7
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 27
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(this.duke.greet(), this.dukeImage));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Duke\u0027s reply and then appends them to the dialog container. Clears the user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * input after processing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String input \u003d this.userInput.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String response \u003d this.duke.getResponse(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.dialogContainer.getChildren().addAll(DialogBox.getUserDialog(input, this.userImage),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                DialogBox.getDukeDialog(response, this.dukeImage));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.userInput.clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 51
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This class serves as a wrapper to parse and tokenize either user inputs or"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * the data stored on the user\u0027s hard disks. The tokens are then stored as"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * members of this class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Command command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Parses and tokenizes a String from the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param userInput the raw String given by the user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @throws DukeException if the command does not exist, or if the syntax of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *                       command is incorrect and/or missing essential details"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void parseUserInput(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String[] userInputSplit \u003d userInput.trim().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.command \u003d this.parseCommand(userInputSplit[0]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (this.command \u003d\u003d Command.ADD_DEADLINE) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            this.addDeadlineHandler(userInputSplit);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else if (this.command \u003d\u003d Command.ADD_EVENT) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            this.addEventHandler(userInputSplit);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else if (this.command \u003d\u003d Command.ADD_TODO) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            this.addTodoHandler(userInputSplit);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else if (this.command \u003d\u003d Command.MARK_TASK_AS_DONE) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            this.markTaskAsDoneHandler(userInputSplit);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else if (this.command \u003d\u003d Command.DELETE_TASK) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            this.deleteTaskHandler(userInputSplit);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else if (this.command \u003d\u003d Command.NOT_FOUND) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            this.commandNotFoundHandler(userInputSplit);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else if (this.command \u003d\u003d Command.FIND_TASKS) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            this.findTasksHandler(userInputSplit);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Tokenizes the {@code ADD_DEADLINE} command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param userInputSplit the array representing the user input string separated"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *                       by white spaces"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @throws DukeException if any of the task description, due date, or \u0027/by\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *                       keyword are missing"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private void addDeadlineHandler(String[] userInputSplit) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (userInputSplit.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new DukeException(\"Sorry! Please provide the description and due date.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else if (!userInputSplit[1].contains(\"/by\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new DukeException(\"Sorry! Make sure to use the \u0027/by\u0027 keyword.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String[] instructionSplit \u003d userInputSplit[1].split(\"/by\", 2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (instructionSplit[0].equals(\"\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new DukeException(\"Sorry! Description of a Deadline must not be empty.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else if (instructionSplit[1].equals(\"\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new DukeException(\"Sorry! Please provide a due date.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.description \u003d instructionSplit[0].trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            this.date \u003d LocalDate.parse(instructionSplit[1].trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new DukeException(\"Sorry! Make sure date is in YYYY-MM-DD format (eg. 2020-02-20)\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Tokenizes the {@code ADD_EVENT} command."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param userInputSplit the array representing the user input string separated"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *                       by white spaces"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @throws DukeException if any of the task description, due date, or \u0027/at\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *                       keyword are missing"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private void addEventHandler(String[] userInputSplit) throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (userInputSplit.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new DukeException(\"Sorry! Please provide the description and due date.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else if (!userInputSplit[1].contains(\"/at\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new DukeException(\"Sorry! Make sure to use the \u0027/at\u0027 keyword.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String[] instructionSplit \u003d userInputSplit[1].split(\"/at\", 2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (instructionSplit[0].equals(\"\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new DukeException(\"Sorry! Description of an Event must not be empty.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else if (instructionSplit[1].equals(\"\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new DukeException(\"Sorry! Please provide a date range.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.description \u003d instructionSplit[0].trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            this.date \u003d LocalDate.parse(instructionSplit[1].trim());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new DukeException(\"Sorry! Make sure date is in YYYY-MM-DD format (eg. 2020-02-20)\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Tokenizes the {@code ADD_TODO} command."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param userInputSplit the array representing the user input string separated"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *                       by white spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @throws DukeException if the task description is missing"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private void addTodoHandler(String[] userInputSplit) throws DukeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (userInputSplit.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new DukeException(\"Sorry! Description of a Todo must not be empty.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.description \u003d userInputSplit[1];"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Tokenizes the {@code MARK_TASK_AS_DONE} command."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param userInputSplit the array representing the user input string separated"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *                       by white spaces"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @throws DukeException if the input task number is missing, or not a number"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private void markTaskAsDoneHandler(String[] userInputSplit) throws DukeException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (userInputSplit.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new DukeException(\"Sorry! Please input a task number.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            this.taskIndex \u003d Integer.parseInt(userInputSplit[1]) - 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new DukeException(\"Sorry! Please enter a valid number.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Tokenizes the {@code DELETE_TASK} command."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param userInputSplit the array representing the user input string separated"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *                       by white spaces"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @throws DukeException if the input task number is missing, or not a number"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private void deleteTaskHandler(String[] userInputSplit) throws DukeException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (userInputSplit.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new DukeException(\"Sorry! Please input a task number.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            this.taskIndex \u003d Integer.parseInt(userInputSplit[1]) - 1;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new DukeException(\"Sorry! Please enter a valid number.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private void commandNotFoundHandler(String[] userInputSplit) throws DukeException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        throw new DukeException(\"Sorry! I don\u0027t know what you mean!\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Tokenizes the {@code FIND_TASKS} command."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param userInputSplit the array representing the user input string separated"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *                       by white spaces"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @throws DukeException if the input string to find is missing"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private void findTasksHandler(String[] userInputSplit) throws DukeException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (userInputSplit.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new DukeException(\"Sorry! Please provide something to find.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.description \u003d userInputSplit[1];"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Parses and tokenizes a String from the local hard disk."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eUnlike the {@code parseUserInput} method, this method does not throw any"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code DukeException} as the data stored on disk is guaranteed to be correct."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param data the raw String data from the local hard disk"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void parseDiskData(String data) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String[] dataSplit \u003d data.split(\"\\\\|\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assert dataSplit.length \u003e\u003d 3;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.command \u003d this.parseCommand(dataSplit[0]);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.description \u003d dataSplit[2];"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.isDone \u003d dataSplit[1].equals(\"1\") ? true : false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (this.command \u003d\u003d Command.ADD_DEADLINE) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            this.date \u003d LocalDate.parse(dataSplit[3].trim());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else if (this.command \u003d\u003d Command.ADD_EVENT) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            this.date \u003d LocalDate.parse(dataSplit[3].trim());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Parses and returns the correct {@code Command} enum value from the input"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * string {@code command}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param command string to match"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @return the correct {@code Command} enum value"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Command parseCommand(String command) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Command.EXIT_DUKE;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Command.LIST_TASKS;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else if (command.equals(\"done\")) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Command.MARK_TASK_AS_DONE;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else if (command.equals(\"todo\") || command.equals(\"T\")) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Command.ADD_TODO;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else if (command.equals(\"deadline\") || command.equals(\"D\")) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Command.ADD_DEADLINE;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else if (command.equals(\"event\") || command.equals(\"E\")) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Command.ADD_EVENT;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else if (command.equals(\"delete\")) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Command.DELETE_TASK;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else if (command.equals(\"find\")) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Command.FIND_TASKS;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return Command.NOT_FOUND;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public int getTaskIndex() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this.taskIndex;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 233,
      "-": 2
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This class handles all disk related functions, including writing to and"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * reading from disk."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final String fileDir \u003d \"./appData\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final String fileName \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final String filePath \u003d fileDir + \"/\" + fileName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private void createNewFile() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            File dir \u003d new File(this.fileDir);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            dir.mkdirs();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            File file \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Appends the String {@code data} provided with a new line to the file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code filePath}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param data String to be appended"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void writeToDisk(String data) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(this.filePath, true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            bufferedWriter.write(data);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            bufferedWriter.newLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Changes line {@code lineIdx} in file {@code filePath} from {@code 0} to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code 1} to indicate that the task has been marked as done."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param lineIdx the line number to change (zero-indexed)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void markAsDone(int lineIdx) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            ArrayList\u003cString\u003e lines \u003d this.readFromDisk();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(this.filePath, false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            int currIdx \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            for (String line : lines) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                if (currIdx \u003d\u003d lineIdx) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    bufferedWriter.write(line.replaceFirst(\"0\", \"1\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    bufferedWriter.write(line);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                bufferedWriter.newLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                currIdx++;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Removes line {@code lineIdx} in file {@code filePath}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param lineIdx the line number to remove (zero-indexed)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void removeTask(int lineIdx) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            ArrayList\u003cString\u003e lines \u003d this.readFromDisk();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(this.filePath, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            int currIdx \u003d 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            for (String line : lines) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                if (currIdx !\u003d lineIdx) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    bufferedWriter.write(line);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    bufferedWriter.newLine();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                currIdx++;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Reads the file {@code filePath} and returns an {@code ArrayList\u003cString\u003e} of"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * each individual line read."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * \u003cp\u003eIf the file does not exist yet, {@code createNewFile} will be called to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * create an empty file {@code filePath} to allow for subsequent writes to the"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * file."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @return an {@code ArrayList\u003cString\u003e} of each individual line read"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ArrayList\u003cString\u003e readFromDisk() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            FileReader fileReader \u003d new FileReader(this.filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            String line \u003d null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                lines.add(line);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            // file not found yet, create the file"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            this.createNewFile();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return lines;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 127
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This class is the base class for the {@code Todo}, {@code Deadline}, and"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * {@code Event} classes."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the {@code Task} class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description description of the task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param isDone      indicates if this task is done"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assert description !\u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); // return tick or X symbols"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getDescriptionWithIsDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.getDescription();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public abstract String getFullDescription();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public abstract boolean isSimilarTask(Task task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 38,
      "-": 6
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This class acts as a wrapper for an {@code ArrayList\u003cTask\u003e} which does all"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * the required manipulation of the tasks {@code Task} in the list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a task into the {@code TaskList} while checking for duplicates."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task the {@code Task} to add"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if a duplicate {@code Task} is found in"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       {@code TaskList}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void addTask(Task task) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (task.getClass() \u003d\u003d t.getClass() \u0026\u0026 task.isSimilarTask(t)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                throw new DukeException(\"Sorry! This task already exists!\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String printNumTasks() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return \"Number of tasks: \" + taskList.size();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns and removes the task at the specified position {@code index}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param index the index of the task to be removed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @return the task that was removed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @throws DukeException if the specified index is more than or equal to the"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *                       size of the list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Task removeTask(int index) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (index \u003e\u003d taskList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new DukeException(\"Sorry! Task does not exist!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return taskList.remove(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Marks the task at the specified position {@code index} as done."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param index the index of the task to be marked"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @return the task that was marked"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @throws DukeException if the specified index is more than or equal to the"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *                       size of the list or if the task has already been marked"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *                       as done"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Task markAsDone(int index) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (index \u003e\u003d taskList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new DukeException(\"Sorry! Task does not exist!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Task task \u003d taskList.get(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (task.getIsDone()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new DukeException(\"Sorry! Task is already marked as done.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code String} of the tasks currently in the list, where each"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * element (representing a task) is formatted to be human readable."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return {@code String} of the tasks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String listTasks() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"Nothing in the list, good job! \" + new String(Character.toChars(0x1F60A));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String lines \u003d \"Here are your tasks:\\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            lines +\u003d (i + 1) + \". \" + this.taskList.get(i).getFullDescription() + \"\\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return lines.trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code String} of the tasks with description matching that of the"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * input {@code description}, where each element (representing a task) is"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * formatted to be human readable."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return {@code String} of the tasks"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String findTasks(String description) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"Sorry, you don\u0027t seem to have any tasks yet.\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String lines \u003d \"\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (task.getDescription().contains(description)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                lines +\u003d index + \". \" + task.getFullDescription() + \"\\n\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (lines.isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"Sorry, nothing found.\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"Here\u0027s what I found\\n\" + lines.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 81,
      "-": 30
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This class represents a Todo task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getFullDescription() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return \"[T]\" + super.getDescriptionWithIsDone();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean isSimilarTask(Task task) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return super.getDescription().equals(task.getDescription());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 19
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"539\" prefWidth\u003d\"539\" type\u003d\"javafx.scene.layout.HBox\" "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns\u003d\"http://javafx.com/javafx/\" "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" lineSpacing\u003d\"1.0\" minHeight\u003d\"-Infinity\" maxWidth\u003d\"300\" style\u003d\"-fx-background-color: #6c5163; -fx-background-radius: 15px; -fx-border-color: #191919; -fx-border-radius: 10px; -fx-border-width: 2px;\" text\u003d\"Label\" textFill\u003d\"#fff0ef\" textOverrun\u003d\"CLIP\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets bottom\u003d\"4.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cCircle fx:id\u003d\"circle\" fill\u003d\"#24619a\" radius\u003d\"40.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 12,
      "-": 13
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"600.0\" prefWidth\u003d\"539.0\" style\u003d\"-fx-background-color: #390044;\" "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns\u003d\"http://javafx.com/javafx/\" "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"1.0\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"462.0\" promptText\u003d\"Type your message here!\" style\u003d\"-fx-background-color: #66545e; -fx-border-color: transparent; -fx-text-inner-color: #fff0ef;\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"463.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #390044; -fx-border-color: #ffe5e2; -fx-border-radius: 4px; -fx-border-width: 2px;\" text\u003d\"SEND\" textFill\u003d\"#ffe5e2\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" maxWidth\u003d\"539.0\" prefHeight\u003d\"558.0\" prefWidth\u003d\"539.0\" style\u003d\"-fx-background-color: transparent;\" vbarPolicy\u003d\"ALWAYS\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"556.0\" prefWidth\u003d\"383.0\" style\u003d\"-fx-background-color: #AA6F73;\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 14,
      "-": 7
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void parseDateAndFormatTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Event event \u003d new Event(\"DESCRIPTION\", false, LocalDate.parse(\"2020-02-15\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(event.getFormattedDate(), \"Feb 15 2020\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 13
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void addTodoMissingDescriptionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            parser.parseUserInput(\"todo \"); // should throw error"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            fail(); // should not be reachable"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            assertEquals(\"😭 Sorry! Description of a Todo must not be empty.\", ex.getMessage());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void addDeadlineMissingDescriptionDateException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            parser.parseUserInput(\"deadline \"); // should throw error"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            fail(); // should not be reachable"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            assertEquals(\"😭 Sorry! Please provide the description and due date.\", ex.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void addDeadlineMissingKeywordException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            parser.parseUserInput(\"deadline some description\"); // should throw error"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            fail(); // should not be reachable"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            assertEquals(\"😭 Sorry! Make sure to use the \u0027/by\u0027 keyword.\", ex.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 39
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "todo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "event"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "deadline nonsense"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "event nonsense"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "deadline /by"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "event /at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "deadline /by Monday"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "event /at 2-4pm"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "deadline some task /by"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "event some task /at"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "todo some todo"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "deadline some deadline /by Monday"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "event some event /at 2-4pm"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 22
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 34
    }
  }
]
