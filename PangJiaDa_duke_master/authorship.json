[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "duke.Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for duke.Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "PangJiaDa": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    implementation \u0027org.testng:testng:6.9.6\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "test {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "//    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "PangJiaDa": 38
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "E|1|be social|location"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "T|1|more work"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "T|0|it\u0027s never ending!"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "E|0|event|location"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "T|0|read books"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "T|0|return book"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 6
    }
  },
  {
    "path": "src/main/java/duke/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "class AddCommand implements Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private Task toAdd;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public AddCommand(Task toAdd) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        ui.printString(tasks.add(toAdd));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 19
    }
  },
  {
    "path": "src/main/java/duke/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public boolean isExit();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 7
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Constructs a Deadline task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param description string description of the deadline to be created"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param by due date in the format of yyyy-mm-dd"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        this.by \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public String toDatabaseString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return \"D\" + \"|\" + (this.isDone ? \"1\" : \"0\") + \"|\" + this.description"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                + \"|\" + this.by + \"\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 29
    }
  },
  {
    "path": "src/main/java/duke/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private int deleteIndex;  //deleteIndex is 0-indexed"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public DeleteCommand(int deleteIndex) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        this.deleteIndex \u003d deleteIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        //deleteIndex is 0-indexed"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        ui.printString(tasks.delete(deleteIndex));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 20
    }
  },
  {
    "path": "src/main/java/duke/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private int doneIndex;  //doneIndex is 0-indexed"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public DoneCommand(int doneIndex) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        this.doneIndex \u003d doneIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        //doneIndex is 0-indexed"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        ui.printString(tasks.done(doneIndex));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 20
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " * Duke provides a todo list functionality."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Constructor for duke.Duke"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param filePath provide a hardcoded directory path to the text file to be used as a database"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        ui \u003d new duke.Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        storage \u003d new duke.Storage(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            tasks \u003d new duke.TaskList(storage.load());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            System.out.println(\"file not found exception when loading database\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            tasks \u003d new duke.TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Runs the todo list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                duke.Command c \u003d duke.Parser.parse(fullCommand); //throws duke.DukeException"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            } catch (duke.DukeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                ui.showError(e.getErrorMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // saving tasks"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            ui.showSavingTasks();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            System.out.println(\"error saving tasks\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Entry point for the JVM."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param args default main method signature"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        new Duke(\"C:\\\\Users\\\\Pang Jia Da\\\\Desktop\\\\CS2103\\\\duke\\\\data\\\\duke.txt\").run();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 68
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public String getErrorMessage() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return \"vanilla duke exception. Extend me!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 7
    }
  },
  {
    "path": "src/main/java/duke/EmptyToDoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class EmptyToDoException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public String getErrorMessage() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return \"☹ OOPS!!! The description of a todo cannot be empty.!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 7
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public String toDatabaseString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return \"E\" + \"|\" + (this.isDone ? \"1\" : \"0\") + \"|\" + this.description"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                + \"|\" + this.at + \"\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 21
    }
  },
  {
    "path": "src/main/java/duke/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // do nothing"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 13
    }
  },
  {
    "path": "src/main/java/duke/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private String searchPhrase;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public FindCommand(String searchPhrase) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        this.searchPhrase \u003d searchPhrase;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        ui.printString(tasks.findAndPrint(searchPhrase));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 19
    }
  },
  {
    "path": "src/main/java/duke/InvalidCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class InvalidCommand implements Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        System.out.println(\"invalid command execute being called\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        System.out.println(\"invalid command isExit being called\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 14
    }
  },
  {
    "path": "src/main/java/duke/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        ui.printString(tasks.list());"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 13
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Parses a single string command from the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param fullCommand The the whole line of a user\u0027s input as read from Standard Input"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @return A Command that is capable of mutating the passed in TaskList, Ui, and Storage"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @throws DukeException a specialized DukeException that can be printed to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        int spaceIndex \u003d fullCommand.indexOf(\" \");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (spaceIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            // full command is only 1 word"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            if (fullCommand.equals(\"list\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            } else if (fullCommand.equals(\"bye\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            } else if (fullCommand.equals(\"todo\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                throw new EmptyToDoException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                throw new UndefinedCommandException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            // TODO add exception for invalid find method"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            String firstArg \u003d fullCommand.substring(0, spaceIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            String otherArgs \u003d fullCommand.substring(spaceIndex + 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            if (firstArg.equals(\"todo\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                return new AddCommand(new Todo(otherArgs));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            } else if (firstArg.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                String[] splitby \u003d otherArgs.split(\" /by \");    //note surrounding spaces"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                return new AddCommand(new Deadline(splitby[0], splitby[1]));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            } else if (firstArg.equals(\"event\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                String[] splitat \u003d otherArgs.split(\" /at \");    //note surrounding spaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                return new AddCommand(new Event(splitat[0], splitat[1]));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            } else if (firstArg.equals(\"done\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                // assumes command is only \"done\" and an int"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                // the input is 1-indexed. duke.DoneCommand takes in 0-indexed"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                return new DoneCommand(Integer.parseInt(otherArgs) - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            } else if (firstArg.equals(\"delete\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                // assumes command is only \"delete\" and an int"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                // the input is 1-indexed. duke.DeleteCommand takes in 0-indexed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                return new DeleteCommand(Integer.parseInt(otherArgs) - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            } else if (firstArg.equals(\"find\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                // assumes command is only \"find\" and a single word search phrase"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                // currently will search the remainder of the command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                return new FindCommand(otherArgs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                throw new UndefinedCommandException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 54
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Loads the data that is stored in the text file specified by it\u0027s filePath."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @return An ArrayList of tasks that is potentially empty."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @throws FileNotFoundException is thrown if file is unable to be opened."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            tasks.add(databaseStringToTask(s.nextLine()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    private static Task databaseStringToTask(String s) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        String[] split \u003d s.split(\"\\\\|\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        Task newTask \u003d new Todo(\"error in decoding database string\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        switch (split[0]) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            newTask \u003d new Todo(split[2]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            newTask \u003d new Deadline(split[2], split[3]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            newTask \u003d new Event(split[2], split[3]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            System.err.println(\"default case hit in decoding database string to task\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // set completion status"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        if (split[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            newTask.markAsDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Saves the state of the given TaskList into the local text file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param tasks The TaskList to be saved."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @throws IOException when call to underlying FileWrite has failed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void save(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        for (Task t : tasks.getTasks()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            fw.write(t.toDatabaseString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 71
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    abstract String toDatabaseString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 34
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Adds the given task to the TaskList and returns a response message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param toAdd the task to be added"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @return response message to be printed to the user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public String add(Task toAdd) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        tasks.add(toAdd);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        String responseMessage \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        responseMessage +\u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        responseMessage +\u003d toAdd.toString() + \"\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        responseMessage +\u003d \"Now you have \" + tasks.size() + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return responseMessage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Marks the task at doneIndex as done and returns a response message. doneIndex is 0-indexed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param doneIndex the 0-indexed index of the task to be marked as done."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @return response message to be printed to the user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public String done(int doneIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assert doneIndex \u003e\u003d 0 \u0026\u0026 doneIndex \u003c tasks.size() : \"done task index out of bounds\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        tasks.get(doneIndex).markAsDone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        String responseMessage \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        responseMessage +\u003d \"Nice! I\u0027ve marked this task as done: \\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        responseMessage +\u003d tasks.get(doneIndex).toString() + \"\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return responseMessage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Deletes the task at deleteIndex as done and returns a response message. deleteIndex is 0-indexed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param deleteIndex the 0-indexed index of the task to be deleted."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @return response message to be printed to the user"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public String delete(int deleteIndex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assert deleteIndex \u003e\u003d 0 \u0026\u0026 deleteIndex \u003c tasks.size() : \"delete task index out of bounds\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // deleteIndex is 0-indexed"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        String responseMessage \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        responseMessage +\u003d \"Noted. I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        responseMessage +\u003d tasks.remove(deleteIndex).toString() + \"\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        responseMessage +\u003d \"Now you have \" + tasks.size() + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return responseMessage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Returns the task list as a formatted string to be printed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @return the task list as a formatted string"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public String list() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        String listAsString \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            listAsString +\u003d (i + 1) + \". \" + tasks.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return listAsString;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Returns all the tasks whose descriptions contain the search phrase"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * provided as a formatted string to be printed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @param searchPhrase string to be searched in the task\u0027s description."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * @return the list of tasks that contain the search phrase, asa formatted string to be printed"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public String findAndPrint(String searchPhrase) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // filter tasks on description"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        List\u003cTask\u003e foundTasks \u003d this.tasks.stream()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                .filter(task -\u003e task.getDescription().toLowerCase().contains(searchPhrase.toLowerCase()))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        // print the tasks"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        String foundListAsString \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        for (int i \u003d 0; i \u003c foundTasks.size(); i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "            foundListAsString +\u003d (i + 1) + \". \" + foundTasks.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return foundListAsString;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 100
    }
  },
  {
    "path": "src/main/java/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public String toDatabaseString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return \"T\" + \"|\" + (this.isDone ? \"1\" : \"0\") + \"|\" + this.description + \"\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 17
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        System.out.println(\"Error loading from database. Starting with empty task list\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     * Displays the welcome message with ASCII text spelling Duke to welcome the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        System.out.println(\"Hello! I\u0027m duke.Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return new Scanner(System.in).nextLine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void showSavingTasks() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        System.out.println(\"Saving Tasks!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void printString(String s) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 44
    }
  },
  {
    "path": "src/main/java/duke/UndefinedCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class UndefinedCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public String getErrorMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        return \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 8
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import duke.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    String description \u003d \"desc\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    String by \u003d \"2020-01-01\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    Deadline deadline \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    void createdIncompleteTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertEquals(deadline.isDone(), false, \"deadline is initialized to incomplete\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    void toDatabaseString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertEquals(deadline.toDatabaseString(), \"D|0|\" + description + \"|\" + by + \"\\n\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                \"testing encoding of default deadline task\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 21
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 9
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import duke.Todo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "class TodoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    String description \u003d \"desc\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    void createdIncompleteTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertEquals(todo.isDone(), false, \"duke.Todo is initialized to incomplete\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    void toDatabaseString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "        assertEquals(todo.toDatabaseString(), \"T|0|\" + description + \"\\n\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "                \"testing encoding of default todo task\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 19
    }
  },
  {
    "path": "text-ui-test/ACTUAL.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "Hello! I\u0027m duke.Duke"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-("
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 11
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "abc"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "REM javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PangJiaDa"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "PangJiaDa": 22
    }
  }
]
