[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 27,
      "-": 20
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * The Deadline object extends the Task object in creating a task of type deadline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Constructor for a new Deadline object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param isDone whether the Task is marked as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskName the name of the Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskDateTime the end time of the Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Deadline(boolean isDone, String taskName, String taskDateTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        super(\u0027D\u0027, isDone, taskName, taskDateTime);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 17
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 52
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    List\u003cString\u003e log;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    TaskList tasklist;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.log \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.tasklist \u003d Storage.load();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        run();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static void run() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        List\u003cString\u003e log \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Ui.showLogo();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        TaskList tasklist \u003d Storage.load();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        System.out.println(Ui.WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        boolean didNotExit \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        while (didNotExit) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String thisResult \u003d Ui.readNextCommand(scanner, tasklist);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            log.add(thisResult);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (thisResult.equals(\"exit\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                if (log.isEmpty() || tasklist.getList().isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    didNotExit \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    didNotExit \u003d Ui.askBeforeQuitting(scanner, tasklist);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                System.out.println(thisResult);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            System.out.println(\"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        System.out.println(Ui.EXIT_MESSAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Label welcomeMessage \u003d new Label(Ui.WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Label startupUpcomingWeekView \u003d new Label(Parser.upcomingCommand(new String[] {\"upcoming\", \"7\"}, this.tasklist));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                DialogBox.getDukeDialog(welcomeMessage, new ImageView(duke)),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                DialogBox.getDukeDialog(startupUpcomingWeekView, new ImageView(duke))"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        );"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String commandInput \u003d userInput.getText();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Label userText \u003d new Label(commandInput);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(commandInput));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        );"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Processes the user input and returns a result."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return the result after processing the user input."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private String getResponse(String input) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return Ui.readNextCommand(input, this.tasklist);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 190,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * The Event object extends the Task object in creating a task of type event."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Constructor for a new Event object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param isDone whether the Task is marked as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskName the name of the Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskDateTime the end time of the Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Event(boolean isDone, String taskName, String taskDateTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        super(\u0027E\u0027, isDone, taskName, taskDateTime);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 17
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Application.launch(duke.Duke.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 12
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * The Parser class handles all methods relating to parsing and processing commands from user input. It internally"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * contains a set of available commands available for the user to use."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static HashSet\u003cString\u003e commandList \u003d new HashSet\u003cString\u003e("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            List.of(\"todo\", \"event\", \"deadline\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    \"list\", \"done\", \"delete\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    \"find\", \"update\", \"upcoming\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    \"view\", \"save\", \"exit\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Analyzes the user input and splits them into a String array:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * - Index 0 contains the action that the program should take."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * - Index 1 contains the message tagged to the program, if applicable."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * - Index 2 contains the date/time tagged to the program, if applicable."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param input the original user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a String array containing a segmentized version of the user input for processing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String[] parseInput(String input) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (!input.contains(\" \")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new String[] {input};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String[] s \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (!s[1].contains(\"/at\") \u0026\u0026 !s[1].contains(\"/by\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return s;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                String[] temp \u003d s[1].split(\"/at|/by\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return new String[] {s[0].strip(), temp[0].strip(), temp[1].strip()};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Processes the user command, and routes the command to their respective method for execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param command the String array representation of the user input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param tasklist the master TaskList object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a function call to their respective method for processing the function, or an exit message if the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *         command was \u0027exit\u0027, or a message indicating that the command is not found otherwise."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String processCommand(String[] command, TaskList tasklist) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (commandList.contains(command[0])) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            switch (command[0]) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return todoCommand(command, tasklist);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return eventCommand(command, tasklist);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return deadlineCommand(command, tasklist);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return listCommand(command, tasklist);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return doneCommand(command, tasklist);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return deleteCommand(command, tasklist);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return findCommand(command, tasklist);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"update\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return updateCommand(command, tasklist);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"upcoming\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return upcomingCommand(command, tasklist);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"view\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return viewCommand(command, tasklist);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"save\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return saveCommand(tasklist);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"exit\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return command[0];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return Ui.COMMAND_NOT_FOUND;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.COMMAND_NOT_FOUND;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Creates a new Todo object if the input line is valid, and adds into the master TaskList object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param command the String array representing the parsed input."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param tasklist the master TaskList object."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a function call to create a new Todo object, or an error if the input line is invalid."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String todoCommand(String[] command, TaskList tasklist) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (command.length \u003e 1) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return tasklist.newTodo(false, command[1]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return \"Oops! Unable to write to file due to \" + e + \"!\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.TASK_NEEDS_NAME;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Creates a new Event object if the input line is valid, and adds into the master TaskList object."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param command the String array representing the parsed input."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param tasklist the master TaskList object."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a function call to create a new Event object, or an error if the input line is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String eventCommand(String[] command, TaskList tasklist) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (command.length \u003e 2) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return tasklist.newEvent(false, command[1], command[2]);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return Ui.WRONG_DATE_TIME_FORMAT;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return \"Oops! Unable to write to file due to \" + e + \"!\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (command.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.TASK_NEEDS_DATE_TIME;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.TASK_NEEDS_NAME;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Creates a new Deadline object if the input line is valid, and adds into the master TaskList object."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param command the String array representing the parsed input."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param tasklist the master TaskList object."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a function call to create a new Deadline object, or an error if the input line is invalid."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String deadlineCommand(String[] command, TaskList tasklist) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (command.length \u003e 2) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return tasklist.newDeadline(false, command[1], command[2]);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return Ui.WRONG_DATE_TIME_FORMAT;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return \"Oops! Unable to write to file due to \" + e + \"!\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (command.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.TASK_NEEDS_DATE_TIME;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.TASK_NEEDS_NAME;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Lists the number of Tasks present in the TaskList."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param tasklist the target TaskList."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a message displaying the number of tasks in the list."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String listCommand(String[] command, TaskList tasklist) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (command.length \u003e 1 \u0026\u0026 !command[1].equals(\"all\")) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            TaskList query \u003d new TaskList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            for (Task t : tasklist.getList()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                if (command[1].equals(\"todo\") \u0026\u0026 t instanceof Todo) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    query.tempAdd(t);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                } else if (command[1].equals(\"deadline\") \u0026\u0026 t instanceof Deadline) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    query.tempAdd(t);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                } else if (command[1].equals(\"event\") \u0026\u0026 t instanceof Event) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    query.tempAdd(t);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (query.isEmpty()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return Ui.NO_MATCHING_TASK_IN_LIST;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return Ui.DISPLAY_MATCHING_TASK_LIST + \"\\n\" + query;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (tasklist.isEmpty()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.NO_TASK_IN_LIST;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.DISPLAY_TASK_LIST + \"\\n\" + tasklist;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Marks a Task at a specified index (relative to the list\u0027s output) as done."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param command the String array representing the parsed input."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param tasklist the master TaskList object."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a message displaying whether this command is successful."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String doneCommand(String[] command, TaskList tasklist) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int taskID \u003d Integer.parseInt(command[1]);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return tasklist.markDone(taskID);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.NO_TASK_FOUND;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return \"Oops! Unable to write to file due to \" + e + \"!\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Deletes a Task at a specified index (relative to the list\u0027s output)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param command the String array representing the parsed input."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param tasklist the master TaskList object."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a message displaying whether this command is successful."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String deleteCommand(String[] command, TaskList tasklist) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int taskID \u003d Integer.parseInt(command[1]);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return tasklist.deleteTask(taskID);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.NO_TASK_FOUND;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return \"Oops! Unable to write to file due to \" + e + \"!\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Creates a new temporary TaskList containing any Task with the same name as specified in the user input. If"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * no tasks in the master TaskList matches the input query, returns a message that no tasks matches the query."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param command the String array representing the parsed input."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param tasklist the master TaskList object."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return the new TaskList containing a filtered list of tasks."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String findCommand(String[] command, TaskList tasklist) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        TaskList query \u003d new TaskList();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        for (Task thisTask : tasklist.getList()) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (command.length \u003e 1 \u0026\u0026 thisTask.getTaskName().toLowerCase().contains(command[1].toLowerCase())) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                query.tempAdd(thisTask);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (query.isEmpty()) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.NO_MATCHING_TASK_IN_LIST;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.DISPLAY_MATCHING_TASK_LIST + \"\\n\" + query;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Updates the Task in the specified index of the TaskList"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param command the String array representing the parsed input."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param tasklist the master TaskList object."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a message displaying whether this command is successful."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String updateCommand(String[] command, TaskList tasklist) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (command.length \u003e 1) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                String[] s \u003d command[1].split(\" \", 2);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                if (s.length \u003c 2) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    return Ui.NO_FIELD_TO_UPDATE;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                int taskID \u003d Integer.parseInt(s[0]);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return tasklist.updateTask(taskID, s[1]);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return Ui.NO_TASK_FOUND;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return \"Oops! Unable to write to file due to \" + e + \"!\";"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.NO_FIELD_TO_UPDATE;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Views a range of Tasks, sorted by time, over a specified number of days."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param command the String array representing the parsed input."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param tasklist the master TaskList object."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a list of Event and Deadline objects occurring the specified number of days."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String upcomingCommand(String[] command, TaskList tasklist) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (command[1].equals(\"today\")) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            command[1] \u003d \"1\";"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (command[1].equals(\"tomorrow\")) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            command[1] \u003d \"2\";"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate TODAY \u003d LocalDate.now();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            TaskList upcomingEvents \u003d new TaskList();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            TaskList upcomingDeadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int dayRangeUntil \u003d Integer.parseInt(command[1]);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            for (Task t : tasklist.getList()) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                if (!t.getTaskDate().isBefore(TODAY) \u0026\u0026 t.getTaskDate().compareTo(TODAY) \u003c\u003d dayRangeUntil) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    if (t instanceof Event) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        upcomingEvents.tempAdd(t);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    } else if (t instanceof Deadline \u0026\u0026 !t.getDoneStatus()) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        upcomingDeadlines.tempAdd(t);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.displayUpcomingRange(dayRangeUntil, upcomingDeadlines, upcomingEvents);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.COMMAND_NOT_FOUND;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Views the schedule of a particular date."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param command the String array representing the parsed input."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param tasklist the master TaskList object."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a list of Event and Deadline objects occurring on the specified day."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String viewCommand(String[] command, TaskList tasklist) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate targetDate;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (command[1].equals(\"today\")) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                targetDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else if (command[1].equals(\"tomorrow\")) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                targetDate \u003d LocalDate.now().plusDays(1);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                targetDate \u003d LocalDate.parse(command[1], Task.DATE_FORMATTER);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            TaskList upcomingEvents \u003d new TaskList();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            TaskList upcomingDeadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            for (Task t : tasklist.getList()) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                if (t.getTaskDate().equals(targetDate)) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    if (t instanceof Event) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        upcomingEvents.tempAdd(t);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    } else if (t instanceof Deadline \u0026\u0026 !t.getDoneStatus()) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        upcomingDeadlines.tempAdd(t);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.displayUpcomingDay(targetDate.format(Task.DATE_FORMATTER), upcomingDeadlines, upcomingEvents);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.WRONG_DATE_TIME_FORMAT;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Saves the master TaskList, at its current state when the command was called, into the data file."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param tasklist the master TaskList object to save."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a message if the changes are successfully saved."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String saveCommand(TaskList tasklist) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            Storage.save(tasklist);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.CHANGES_SAVED;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return \"Oops! Unable to write to file due to \" + e + \"!\";"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 360
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * The Storage class handles all I/O in the software with two key methods, load() and save(). The load() method"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * handles loading of any existing saved data into the TaskList object, while the save() method handles saving the most"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * recent version of the TaskList object when the method is called."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static File savedData \u003d new File(\"data/duke.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static File thisLoc \u003d new File(System.getProperty(\"user.dir\") + \"/data\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * This method handles loading of an existing data file stored in the directory \u0027data\u0027, where the program is"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * located, and populate a new TaskList object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * If the directory is absent, a new directory is created."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * If the directory is created and the data file is absent, a new data file is created."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new TaskList object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static TaskList load() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        TaskList tasklist \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (thisLoc.mkdir()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                System.out.println(\"No save directory found.\\n\" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        \"Creating new directory at \" + thisLoc.toString() + \" ...\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (savedData.createNewFile()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                System.out.println(\"No save file found.\\n\" +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        \"Creating new file \u0027duke.txt\u0027 ...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            FileReader fr \u003d new FileReader(savedData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            System.out.println(\"Loading file \u0027duke.txt\u0027... \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            while (true) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    String line \u003d br.readLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    if (line \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    String[] taskContent \u003d line.split(\" ~ \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    boolean isDone \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    if (taskContent[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        isDone \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    if (taskContent[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        tasklist.newTodo(isDone, taskContent[2]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        if (taskContent[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                            tasklist.newDeadline(isDone, taskContent[2], taskContent[3]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        } else if (taskContent[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                            tasklist.newEvent(isDone, taskContent[2], taskContent[3]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    System.out.println(\"Oops! Unable to read save file due to \" + e + \"!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            System.out.println(\"Oops! Unable to create or load save file due to \" + e + \"!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return tasklist;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * This method saves a current TaskList object into the data file in the directory \u0027data\u0027, where the program"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * is located, assuming that the file has already been created before or during the launch of the program."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param tasklist the TaskList object to parse into the data file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static void save(TaskList tasklist) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        FileWriter fw \u003d new FileWriter(savedData);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        BufferedWriter bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        for (Task thisTask : tasklist.getList()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String taskStr \u003d thisTask.getTaskType() + \" ~ \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    + (thisTask.getDoneStatus() ? \"1\" : \"0\") + \" ~ \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    + thisTask.getTaskName() + \" ~ \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    + (thisTask.getTaskType() \u003d\u003d \u0027T\u0027 ? \"\" : thisTask.getTaskDateTime()) + \"\\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            bw.write(taskStr);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        bw.close();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 100
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * The Task object contains parameters and information which defines the Task, such as the name, time, and whether it"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * is done. This object also handles any editing to the contents of the Task."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "abstract class Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private char taskType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private LocalDate taskDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private LocalTime taskTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Constructor for a new generic Task object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskType defines the type of this Task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param isDone whether the Task is done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskName the name of the Task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskDateTime the given date-time of the Task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws DateTimeParseException if the date or time provided is in the wrong format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Task(char taskType, boolean isDone, String taskName, String taskDateTime) throws DateTimeParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.taskDate \u003d LocalDate.EPOCH;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.taskTime \u003d LocalTime.MAX;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (!taskDateTime.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String[] dateTime \u003d taskDateTime.split(\" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            this.taskDate \u003d LocalDate.parse(dateTime[0], DATE_FORMATTER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (dateTime.length \u003e 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                this.taskTime \u003d LocalTime.parse(dateTime[1], TIME_FORMATTER);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns if this Task is done."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return the status of the Task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean getDoneStatus() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns if this Task is done, in a unicode format."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return the status of the Task"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String getDoneStatusUnicode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns the name of this Task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return the name of the Task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.taskName;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns the type of this Task."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return the type of the Task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public char getTaskType() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.taskType;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns the date and time of this Task in a string format."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return the Date and Time of this Task."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String getTaskDateTime() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.getTaskDate().format(DATE_FORMATTER) + \" \" + this.getTaskTime().format(TIME_FORMATTER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns the end date of this Task in a String format."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return the end date of the Task."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public LocalDate getTaskDate() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.taskDate;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns the end time of this Task in a String format."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return the end time of the Task."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public LocalTime getTaskTime() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.taskTime;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Sets the name of this Task to a new name."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskName the name to change this Task to."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void setTaskName(String taskName) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Sets the end date of this Task to a new Date."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskDate the new Date."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws DateTimeParseException if the Date is in the wrong format."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void setTaskDate(String taskDate) throws DateTimeParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.taskDate \u003d LocalDate.parse(taskDate, DATE_FORMATTER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Sets the end time of this Task to a new Time."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskTime the new Time."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws DateTimeParseException if the Time is in the wrong format"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void setTaskTime(String taskTime) throws DateTimeParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.taskTime \u003d LocalTime.parse(taskTime, TIME_FORMATTER);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Marks this Task as done, if it has not already been marked as done."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a String message indicating if the Task has been marked done."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String markDone() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.TASK_ALREADY_DONE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return Ui.MARKED_AS_DONE + this;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (this.taskType \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return \"[\" + taskType + \"] \" + \"[\" + getDoneStatusUnicode() + \"] \" + this.taskName;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (this.taskType \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return \"[\" + taskType + \"] \" + \"[\" + getDoneStatusUnicode() + \"] \" + this.taskName + \" (by: \" + this.getTaskDateTime() + \")\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (this.taskType \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return \"[\" + taskType + \"] \" + \"[\" + getDoneStatusUnicode() + \"] \" + this.taskName + \" (at: \" + this.getTaskDateTime() + \")\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 159
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * The TaskList class is a class that encapsulates a list containing various tasks, and handles methods relating"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * to creating and deleting tasks."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * The constructor for a new TaskList object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.list \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Adds a new Task to this TaskList and saves the changes to the data file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param task the new Task to be added into this list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a String message indicating if the adding is successful."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws IOException if the changes are unable to be saved into the data file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String add(Task task) throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.list.add(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Storage.save(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return Ui.ADDED_NEW_TASK + task + Ui.taskCountMessage(this.list.size());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Adds a temporary Task to this TaskList but does not write to the data file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * This method should only be called when the \u0027find\u0027 or \u0027list ...\u0027 command is executed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param task the new Task to be added into this list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void tempAdd(Task task) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.list.add(task);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Adds a new Task of type Todo to this TaskList and saves the changes to the data file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param isDone if this Task is done."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskName the name of this Task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a function call to the add() function."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws IOException if the changes are unable to be saved into the data file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String newTodo(boolean isDone, String taskName) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Task task \u003d new Todo(isDone, taskName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.add(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Adds a new Task of type Event to this TaskList and saves the changes to the data file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param isDone if this Task is done."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskName the name of this Task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskDateTime the end date-time of this Task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a function call to the add() function."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws IOException if the changes are unable to be saved into the data file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String newEvent(boolean isDone, String taskName, String taskDateTime) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Task task \u003d new Event(isDone, taskName, taskDateTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.add(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Adds a new Task of type Deadline to this TaskList and saves the changes to the data file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param isDone if this Task is done."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskName the name of this Task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskDateTime the end date-time of this Task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a function call to the add() function."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws IOException if the changes are unable to be saved into the data file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String newDeadline(boolean isDone, String taskName, String taskDateTime) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Task task \u003d new Deadline(isDone, taskName, taskDateTime);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.add(task);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Marks a Task in this list as done and saves the changes to the data file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskID the position (starting from 1) of the task in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a function call to markDone() in the Task class."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws IOException if the changes are unable to be saved into the data file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String markDone(int taskID) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String output \u003d this.list.get(taskID - 1).markDone();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Storage.save(this);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Deletes a Task from this list and saves the changes to the data file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskID the position (starting from 1) of the task in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a String message indicating if the deletion is successful."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws IndexOutOfBoundsException if the specified taskID is not within the current range of the TaskList."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws IOException if the changes are unable to be saved into the data file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String deleteTask(int taskID) throws IndexOutOfBoundsException, IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String output \u003d Ui.DELETED_TASK + this.list.get(taskID - 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.list.remove(taskID - 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        output \u003d output + Ui.taskCountMessage(this.list.size());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Storage.save(this);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Updates a Task in this list and saves the changes to the data file"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskID the position (starting from 1) of the task in the list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param parameter the parameters of this command, separated with a regex \", \"."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a String message indicating if the update is successful."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws IndexOutOfBoundsException if the specified taskID is not within the current range of the TaskList."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws IOException if the changes are unable to be saved into the data file."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String updateTask(int taskID, String parameter) throws IndexOutOfBoundsException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String[] fields \u003d parameter.split(\", \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (fields.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.NO_FIELD_TO_UPDATE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (fields[0].equalsIgnoreCase(\"name\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            this.list.get(taskID - 1).setTaskName(fields[1]);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (fields[0].equalsIgnoreCase(\"date\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            this.list.get(taskID - 1).setTaskDate(fields[1]);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (fields[0].equalsIgnoreCase(\"time\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            this.list.get(taskID - 1).setTaskTime(fields[1]);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Storage.save(this);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return Ui.UPDATED_TASK + this.list.get(taskID - 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns the size of this list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return the size of the list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.list.size();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Checks if this list is empty"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a boolean if the list is empty."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.list.isEmpty();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns this list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return the list."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.list;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Sorts this list by task name in natural order."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void sortName() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.list.sort((a,b) -\u003e a.getTaskName().compareTo(b.getTaskName()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Sorts this list by task time in natural order."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void sortTime() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.list.sort((a,b) -\u003e a.getTaskTime().compareTo(b.getTaskTime()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Sorts this list by task date in natural order."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void sortDate() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.list.sort((a,b) -\u003e a.getTaskDate().compareTo(b.getTaskDate()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        for (int i \u003d 0; i \u003c this.list.size(); i++) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            output \u003d output + (i + 1) + \". \" + this.list.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 184
    }
  },
  {
    "path": "src/main/java/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * The Todo object extends the Task object in creating a task of type todo."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Constructor for a new Todo object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param isDone whether the Task is marked as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskName the name of the Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Todo(boolean isDone, String taskName) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        super(\u0027T\u0027, isDone, taskName, \"\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 16
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String COMMAND_NOT_FOUND \u003d \"Oops! Command not found!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String TASK_NEEDS_NAME \u003d \"Oops! This task needs a name!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String TASK_NEEDS_DATE_TIME \u003d \"Oops! This task needs a date/time!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String WRONG_DATE_TIME_FORMAT \u003d \"Oops! The date needs to be DD/MM/YYYY and time needs to be HHMM (24hr) format!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String NO_TASK_FOUND \u003d \"Oops! Task not found in the list!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String NO_TASK_IN_LIST \u003d \"Yay! There are no tasks in your list!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String DISPLAY_TASK_LIST \u003d \"Here are all the tasks in your list:\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String DISPLAY_MATCHING_TASK_LIST \u003d \"Here are your tasks that matched your query:\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String NO_MATCHING_TASK_IN_LIST \u003d \"Oops! There are no tasks that matches your query!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String CHANGES_SAVED \u003d \"Changes saved!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String MARKED_AS_DONE \u003d \"Marked this task as done:\\n    \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String TASK_ALREADY_DONE \u003d \"Oops! This task was already marked as done!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String ADDED_NEW_TASK \u003d \"New task has been added:\\n    \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String DELETED_TASK \u003d \"Removed this task:\\n    \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String UPDATED_TASK \u003d \"Updated this task to:\\n    \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String NO_FIELD_TO_UPDATE \u003d \"No field to update!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String WELCOME_MESSAGE \u003d \"Welcome to Duke! What can I do for you today?\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String EXIT_MESSAGE \u003d \"Thank you for using Duke.\\nHave a nice day!\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static void showLogo() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static boolean askBeforeQuitting(Scanner scanner, TaskList tasklist) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        System.out.println(\"Save before Quitting?\\nY: Save Changes\\nN: Discard Changes\\n\" +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \"Press any other key to Cancel and Return\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String choice \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (choice.equalsIgnoreCase(\"Y\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                Storage.save(tasklist);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                System.out.println(CHANGES_SAVED);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                System.out.println(\"Oops! Unable to write to file due to \" + e + \"!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return !(choice.equalsIgnoreCase(\"N\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String readNextCommand(Scanner scanner, TaskList tasklist) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        System.out.print(\"\u003e \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String input \u003d scanner.nextLine().strip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String[] command \u003d Parser.parseInput(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return Parser.processCommand(command, tasklist);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String readNextCommand(String input, TaskList tasklist) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String[] command \u003d Parser.parseInput(input.strip());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return Parser.processCommand(command, tasklist);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String taskCountMessage(int listSize) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return \"\\nNow you have \"+ listSize + (listSize \u003d\u003d 1 ? \" task\" : \" tasks\") + \" in the list.\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String displayUpcomingRange(int dayRangeUntil, TaskList upcomingDeadlines, TaskList upcomingEvents) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (upcomingDeadlines.isEmpty() \u0026\u0026 upcomingEvents.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return \"You have no upcoming tasks for the next \" + dayRangeUntil + \" day(s).\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String output \u003d \"\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (upcomingDeadlines.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                output \u003d output + \"You have no upcoming deadlines for the next \" + dayRangeUntil + \" day(s)!\\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                upcomingDeadlines.sortTime();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                output \u003d output + \"Your upcoming deadlines in the next \" + dayRangeUntil + \" day(s):\\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                output \u003d output + upcomingDeadlines + \"\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (upcomingEvents.isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                output \u003d output + \"You have no upcoming events for the next \" + dayRangeUntil + \" day(s)!\\n\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                upcomingEvents.sortTime();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                output \u003d output + \"Your upcoming events in the next \" + dayRangeUntil + \" day(s):\\n\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                output \u003d output + upcomingEvents + \"\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String displayUpcomingDay(String targetDate, TaskList upcomingDeadlines, TaskList upcomingEvents) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (upcomingDeadlines.isEmpty() \u0026\u0026 upcomingEvents.isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return \"You have no upcoming tasks on \" + targetDate;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String output \u003d \"\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (upcomingDeadlines.isEmpty()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                output \u003d output + \"You have no upcoming deadlines on \" + targetDate + \"!\\n\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                upcomingDeadlines.sortTime();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                output \u003d output + \"Your upcoming deadlines on \" + targetDate + \":\\n\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                output \u003d output + upcomingDeadlines + \"\\n\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (upcomingEvents.isEmpty()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                output \u003d output + \"You have no upcoming events on \" + targetDate + \"!\\n\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                upcomingEvents.sortTime();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                output \u003d output + \"Your upcoming events on \" + targetDate + \":\\n\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                output \u003d output + upcomingEvents + \"\\n\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 121
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Hello from"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "What can I do for you today?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Oops! Command not found!"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Oops! Command not found!"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Oops! Command not found!"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Oops! Command not found!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Yay! There are no tasks in your list!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e New task has been added:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    [T] [✘] Buy Textbooks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Now you have 1 task in the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e New task has been added:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    [T] [✘] Buy Eggs"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Here are your tasks in your list:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "1. [T] [✘] Buy Textbooks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "2. [T] [✘] Buy Eggs"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Oops! This task needs a name and date/time!"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e New task has been added:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    [D] [✘] Homework (by: Sunday)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Here are your tasks in your list:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "1. [T] [✘] Buy Textbooks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "2. [T] [✘] Buy Eggs"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "3. [D] [✘] Homework (by: Sunday)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Oops! This task needs a date/time!"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e New task has been added:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    [E] [✘] Project Meeting (at: 10/2/20 11:59am)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e New task has been added:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    [T] [✘] test10"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Here are your tasks in your list:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "1. [T] [✘] Buy Textbooks"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "2. [T] [✘] Buy Eggs"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "3. [D] [✘] Homework (by: Sunday)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "4. [E] [✘] Project Meeting (at: 10/2/20 11:59am)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "5. [T] [✘] test10"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Marked this task as done:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    [T] [✓] Buy Eggs"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Marked this task as done:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    [D] [✓] Homework (by: Sunday)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Oops! This task needs a date/time!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Here are your tasks in your list:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "1. [T] [✘] Buy Textbooks"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "2. [T] [✓] Buy Eggs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "3. [D] [✓] Homework (by: Sunday)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "4. [E] [✘] Project Meeting (at: 10/2/20 11:59am)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "5. [T] [✘] test10"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e New task has been added:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    [D] [✘] Finish Presentation Slides (by: 23/1/20)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Now you have 6 tasks in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Oops! This task was already marked as done!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Here are your tasks in your list:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "1. [T] [✘] Buy Textbooks"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "2. [T] [✓] Buy Eggs"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "3. [D] [✓] Homework (by: Sunday)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "4. [E] [✘] Project Meeting (at: 10/2/20 11:59am)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "5. [T] [✘] test10"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "6. [D] [✘] Finish Presentation Slides (by: 23/1/20)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Marked this task as done:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    [E] [✓] Project Meeting (at: 10/2/20 11:59am)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Oops! Task not found!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Here are your tasks in your list:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "1. [T] [✘] Buy Textbooks"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "2. [T] [✓] Buy Eggs"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "3. [D] [✓] Homework (by: Sunday)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "4. [E] [✓] Project Meeting (at: 10/2/20 11:59am)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "5. [T] [✘] test10"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "6. [D] [✘] Finish Presentation Slides (by: 23/1/20)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Removed this task:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    [T] [✓] Buy Eggs"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Removed this task:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    [E] [✓] Project Meeting (at: 10/2/20 11:59am)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Here are your tasks in your list:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "1. [T] [✘] Buy Textbooks"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "2. [D] [✓] Homework (by: Sunday)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "3. [T] [✘] test10"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "4. [D] [✘] Finish Presentation Slides (by: 23/1/20)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Thank you for using Duke."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Have a nice day!"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 116
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "hi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "test"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "add"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "add Buy Textbooks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "todo Buy Textbooks"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "todo Buy Eggs"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "deadline Homework /by Sunday"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "event Project Meeting"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "event Project Meeting /at 10/2/20 11:59am"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "todo test10"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "deadline Finish Presentation Slides"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "deadline Finish Presentation Slides /by 23/1/20"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "done 9"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "bye "
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 29
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 34
    }
  }
]
