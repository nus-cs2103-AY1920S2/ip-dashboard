[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    archiveVersion \u003d \"0.2\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        attributes \u0027Main-Class\u0027: \u0027duke.Launcher\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 33,
      "-": 20
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Welcome to Duke!"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Duke is a handy to-do list app that also allows you to keep track of your upcoming deadlines and events."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "### Create a to-do task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Adds a to-do item to your list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### Usages:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### `todo [task_name]`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Creates a to-do item in your to-do list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "* `todo Buy Eggs`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  Expected outcome: Adds `Buy Eggs` to the to-do list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "### Create a deadline task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Adds an item with a deadline to your list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### Usages:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### `deadline [task_name] /by [d/m/yyyy] [hhmm]`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Creates a deadline item in your to-do list. The `[hhmm]` time field can be excluded."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "* `deadline Finish Homework /by 26/2/2020`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  Expected outcome: Creates the task `Finish Homework` with the deadline on 26/2/2020 at the default time 11:59pm."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "* `deadline Finish Project /by 3/10/2020 1400`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  Expected outcome: Creates the task `Finish Project` with the deadline on 3/10/2020 at 2pm."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "### Create an event"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Adds an event to your list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### Usages:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### `event [task_name] /at [d/m/yyyy] [hhmm]`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Creates an event item in your to-do list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "* `event Project Meeting /at 23/2/2020 1500`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  Expected outcome: Creates the event `Project Meeting` on 23/2/2020, 3pm."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "### List tasks"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "You can view your full list, or specifically "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### Usages:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### `list [type]`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Views all items of the specified type in your to-do list. "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "* `list all`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Lists all items regardless of type."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "* `list todo`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "* `list deadline`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "* `list event`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Lists todo, deadline, or event items respectively."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "### Mark a task as done"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Mark any task as done."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### Usages:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### `done [task_type] [position]`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Mark the task at the specific position in any task list as done."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "* `done todo 3`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  Marks the 3rd task in your todo list as done."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "### Delete a task"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Delete any task from your list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### Usages:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### `delete [task_type] [position]`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Deletes the task at the specific position in any task list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "* `delete event 3`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  Deletes the 3rd task in your event list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "### Find a task"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Finds any task from your list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### Usages:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### `find [keyword]`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Finds all tasks that matches your specified keyword."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "* `find Homework`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  Finds all tasks that contains the keyword \u0027Homework\u0027."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "### Update a task"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Update the fields of any task."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### Usages:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### `update [task_type] [position] [field] [keyword]`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Updates the specified field of the event at the position to your new keyword."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "* `update todo 1 name Finish Homework`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  Updates the name of the 1st item in your todo list to `Finish Homework`."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "* `update deadline 4 time 1500`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  Updates the time of the 4th item in your deadline list to `1500`."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "### Sort a list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "You can sort any list by either name in alphabetical order, or by date in earliest first."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### Usages:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### `sort [task_type] [sorting_type]`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Sorts the specified list by the sorting type in ascending order."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "* `sort todo name`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Sorts the to-do list by name."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "* `sort event date`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Sorts the event list by date and time, earliest first."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "### View an overview of your tasks over a specified period"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "You can see your upcoming deadlines and events up to a specified number of days."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### Usages:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### `upcoming [number_of_days]`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Views a list of deadlines and events happening from your system date to your specified number of days."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "* `upcoming 4`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  Lists all your deadlines and events happening for the next 4 days."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "* `upcoming tomorrow`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  List all your deadlines and events happening for the next 2 days."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "### View an overview of your tasks on a specific date"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "You can see your upcoming deadlines and events at a specific date."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### Usages:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### `view [date]`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Views a list of deadlines and events happening at your specified date."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "* `view 26/2/2020`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  List all your deadlines and events happening on 26/2/2020."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "* `view today`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  List all your deadlines and events happening for the day."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "  "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "### Save your data"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "While each function automatically saves your data for you, you can also manually save the data yourself."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### Usages:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#### `save`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Saves your data to the directory `data/duke.txt`, located at where you launched the application."
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 185,
      "-": 19
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * The Deadline object extends the Task object in creating a task of type deadline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Constructor for a new Deadline object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param isDone whether the Task is marked as done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskName the name of the Task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskDateTime the end time of the Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Deadline(boolean isDone, String taskName, LocalDateTime taskDateTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        super(\u0027D\u0027, isDone, taskName, taskDateTime);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return \"[D] \" + \"[\" + super.getDoneStatusUnicode() + \"] \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                + super.getTaskName() + \" (by: \" + super.getTaskDateTime() + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 25
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 63
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    List\u003cString\u003e log;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    TaskList[] taskLists;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.log \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.taskLists \u003d Storage.load();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Processes the user input and returns a result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return the result after processing the user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return Ui.readNextCommand(input, taskLists);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 23,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * The Event object extends the Task object in creating a task of type event."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Constructor for a new Event object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param isDone whether the Task is marked as done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskName the name of the Task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskDateTime the end time of the Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Event(boolean isDone, String taskName, LocalDateTime taskDateTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        super(\u0027E\u0027, isDone, taskName, taskDateTime);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return \"[E] \" + \"[\" + super.getDoneStatusUnicode() + \"] \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                + super.getTaskName() + \" (at: \" + this.getTaskDateTime() + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 25
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 34
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // Initializes duke with an overview of upcoming tasks in the next 7 days."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String welcome \u003d Ui.WELCOME_MESSAGE + \"\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                + duke.getResponse(\"upcoming 7\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                DialogBox.getDukeDialog(welcome, dukeImage)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 63
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * The Parser class handles all methods relating to parsing and processing commands from user input. It internally"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * contains a set of available commands available for the user to use."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final LocalDate TODAY \u003d LocalDate.now();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/uuuu\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Analyzes the user input and splits them into a String array:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * - Index 0 contains the action that the program should take."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * - Index 1 contains the argument tagged to the action, if applicable."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * - Index 2 contains the date/time tagged to the action, if applicable."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param input the original user input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a String array containing a segmentized version of the user input for processing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String[] parseInput(String input) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (!input.contains(\" \")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new String[] {input};"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String[] s \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (!s[1].contains(\"/at\") \u0026\u0026 !s[1].contains(\"/by\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return s;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String[] temp \u003d s[1].split(\"/at|/by\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new String[] {s[0].strip(), temp[0].strip(), temp[1].strip()};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Parses the date and time given. If no time is given, a default time of 2359 is used,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskDateTime the given date and/or time of the Task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a LocalDateTime containing the date and time of the Task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws DateTimeParseException if the date or time provided is in the wrong format."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static LocalDateTime parseDateTime(String taskDateTime) throws DateTimeParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String[] dateTime \u003d taskDateTime.split(\" \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        LocalDate taskDate \u003d LocalDate.parse(dateTime[0], DATE_FORMATTER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (dateTime.length \u003e 1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalTime taskTime \u003d LocalTime.parse(dateTime[1], TIME_FORMATTER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return taskDate.atTime(taskTime);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return taskDate.atTime(23,59);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String[] parseNewTask(String[] command) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String type \u003d command[1];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String[] parameters \u003d type.split(\" \", 2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String[] description;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (parameters[1].contains(\"/at\") || parameters[1].contains(\"/by\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            description \u003d parameters[1].split(\"/at|/by\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            description \u003d parameters;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Processes the user command, and routes the command to their respective method for execution."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param command the String array representation of the user input."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskLists a master list of TaskLists."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a function call to their respective method for processing the function, or an exit message if the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *         command was \u0027exit\u0027, or a message indicating that the command is not found otherwise."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String processCommand(String[] command, TaskList[] taskLists) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        switch (command[0]) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return todoCommand(command, taskLists);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return deadlineCommand(command, taskLists);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return eventCommand(command, taskLists);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return listCommand(command, taskLists);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return doneCommand(command, taskLists);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return deleteCommand(command, taskLists);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return findCommand(command, taskLists);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"update\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return updateCommand(command, taskLists);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"sort\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return sortCommand(command, taskLists);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"upcoming\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return upcomingCommand(command, taskLists);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"view\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return viewCommand(command, taskLists);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"help\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return helpCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"save\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return saveCommand(taskLists);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return Ui.COMMAND_NOT_FOUND;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Creates a new Todo object if the input line is valid, and adds into the master TaskList object."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param command the String array representing the parsed input."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskLists an array of TaskLists."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a function call to create a new Todo object, or an error if the input line is invalid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String todoCommand(String[] command, TaskList[] taskLists) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assert command[0].equals(\"todo\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (command.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.TASK_NEEDS_NAME;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String result \u003d taskLists[0].newTodo(false, command[1]);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            Storage.save(taskLists);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return \"Oops! Unable to write to file due to \" + e + \"!\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Creates a new Deadline object if the input line is valid, and adds into the master TaskList object."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param command the String array representing the parsed input."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskLists an array of TaskLists."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a function call to create a new Deadline object, or an error if the input line is invalid."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String deadlineCommand(String[] command, TaskList[] taskLists) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assert command[0].equals(\"deadline\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (command.length \u003c\u003d 2) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return (command.length \u003d\u003d 2)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    ? Ui.TASK_NEEDS_DATE_TIME"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    : Ui.TASK_NEEDS_NAME;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDateTime taskDateTime \u003d parseDateTime(command[2]);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String result \u003d taskLists[1].newDeadline(false, command[1], taskDateTime);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            Storage.save(taskLists);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.WRONG_DATE_TIME_FORMAT;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return \"Oops! Unable to write to file due to \" + e + \"!\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Creates a new Event object if the input line is valid, and adds into the master TaskList object."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param command the String array representing the parsed input."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskLists an array of TaskLists."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a function call to create a new Event object, or an error if the input line is invalid."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String eventCommand(String[] command, TaskList[] taskLists) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assert command[0].equals(\"event\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (command.length \u003c\u003d 2) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return (command.length \u003d\u003d 2)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    ? Ui.TASK_NEEDS_DATE_TIME"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    : Ui.TASK_NEEDS_NAME;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDateTime taskDateTime \u003d parseDateTime(command[2]);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String result \u003d taskLists[2].newEvent(false, command[1], taskDateTime);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            Storage.save(taskLists);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.WRONG_DATE_TIME_FORMAT;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return \"Oops! Unable to write to file due to \" + e + \"!\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Lists the number of Tasks present in any TaskList."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskLists an array of TaskLists."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a message displaying the number of tasks in the list."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String listCommand(String[] command, TaskList[] taskLists) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assert command[0].equals(\"list\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (command.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.NOT_ENOUGH_PARAMETERS;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        TaskList thisList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        switch (command[1]) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                thisList \u003d taskLists[0];"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                thisList \u003d taskLists[1];"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                thisList \u003d taskLists[2];"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"all\":"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                thisList \u003d consolidateList(taskLists);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return Ui.COMMAND_NOT_FOUND;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return thisList.isEmpty()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                ? Ui.NO_TASK_IN_LIST"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                : (Ui.DISPLAY_TASK_LIST + \"\\n\" + thisList);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Marks a Task at a specified index (relative to the list\u0027s output) as done."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param command the String array representing the parsed input."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskLists an array of TaskLists."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a message displaying whether this command is successful."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String doneCommand(String[] command, TaskList[] taskLists) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assert command[0].equals(\"done\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (command.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.NO_FIELD_TO_UPDATE;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String[] parameters \u003d command[1].split(\" \", 2);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int taskID \u003d Integer.parseInt(parameters[1]);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String result;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            TaskList thisList;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            switch (parameters[0]) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    thisList \u003d taskLists[0];"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    thisList \u003d taskLists[1];"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    thisList \u003d taskLists[2];"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    return Ui.INVALID_FIELD;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            result \u003d thisList.markDone(taskID);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            Storage.save(taskLists);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.NO_TASK_FOUND;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return \"Oops! Unable to write to file due to \" + e + \"!\";"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Deletes a Task at a specified index (relative to the list\u0027s output)."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param command the String array representing the parsed input."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskLists an array of TaskLists."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a message displaying whether this command is successful."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String deleteCommand(String[] command, TaskList[] taskLists) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assert command[0].equals(\"delete\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (command.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.NO_FIELD_TO_UPDATE;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String[] parameters \u003d command[1].split(\" \", 2);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int taskID \u003d Integer.parseInt(parameters[1]);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String result;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            TaskList thisList;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            switch (parameters[0]) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    thisList \u003d taskLists[0];"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    thisList \u003d taskLists[1];"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    thisList \u003d taskLists[2];"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    return Ui.INVALID_FIELD;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            result \u003d thisList.deleteTask(taskID);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            Storage.save(taskLists);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.NO_TASK_FOUND;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return \"Oops! Unable to write to file due to \" + e + \"!\";"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Creates a new temporary TaskList containing any Task with the same name as specified in the user input. If"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * no tasks in the master TaskList matches the input query, returns a message that no tasks matches the query."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param command the String array representing the parsed input."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskLists an array of TaskLists."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return the new TaskList containing a filtered list of tasks."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String findCommand(String[] command, TaskList[] taskLists) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assert command[0].equals(\"find\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (command.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.NOT_ENOUGH_PARAMETERS;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        TaskList query \u003d new TaskList();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        for (TaskList thisList : taskLists) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            for (Task thisTask : thisList.getList()) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                boolean taskContainsKeyword \u003d thisTask.getTaskName()"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        .toLowerCase()"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        .contains(command[1].toLowerCase());"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                if (taskContainsKeyword) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    query.add(thisTask);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return query.isEmpty()"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                ? Ui.NO_MATCHING_TASK_IN_LIST"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                : (Ui.DISPLAY_MATCHING_TASK_LIST + \"\\n\" + query);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Updates the Task in the specified index of the TaskList"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param command the String array representing the parsed input."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskLists an array of TaskLists."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a message displaying whether this command is successful."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String updateCommand(String[] command, TaskList[] taskLists) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assert command[0].equals(\"update\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (command.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.NO_FIELD_TO_UPDATE;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String[] parameters \u003d command[1].split(\" \", 4);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (parameters.length \u003c 4) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return Ui.NO_FIELD_TO_UPDATE;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            TaskList thisList;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            switch (parameters[0]) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    thisList \u003d taskLists[0];"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    thisList \u003d taskLists[1];"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    thisList \u003d taskLists[2];"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    return Ui.INVALID_FIELD;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int taskID \u003d Integer.parseInt(parameters[1]);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String fieldType \u003d parameters[2];"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String fieldDescription \u003d parameters[3];"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String result \u003d thisList.updateTask(taskID, fieldType, fieldDescription);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            Storage.save(taskLists);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.NO_TASK_FOUND;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return \"Oops! Unable to write to file due to \" + e + \"!\";"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Sorts a TaskList by name or date, in its natural order"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param command the String array representing the parsed input."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskLists an array of TaskLists."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a message displaying whether this command is successful."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String sortCommand(String[] command, TaskList[] taskLists) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (command.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.NO_FIELD_TO_UPDATE;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String[] parameters \u003d command[1].split(\" \", 2);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (parameters.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.NOT_ENOUGH_PARAMETERS;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        boolean sortingTodoByDateTime \u003d parameters[0].equals(\"todo\") \u0026\u0026 parameters[1].equals(\"date\");"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (sortingTodoByDateTime) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.CANNOT_SORT_TODO_BY_DATE_TIME;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        TaskList thisList;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        switch (parameters[0]) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                thisList \u003d taskLists[0];"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                thisList \u003d taskLists[1];"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                thisList \u003d taskLists[2];"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return Ui.INVALID_FIELD;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String result;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        switch (parameters[1]) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"name\":"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                thisList.sortName();"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                result \u003d Ui.SORTED_BY_NAME;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"date\":"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                thisList.sortDateTime();"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                result \u003d Ui.SORTED_BY_DATE_TIME;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return Ui.INVALID_FIELD;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            Storage.save(taskLists);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return \"Oops! Unable to write to file due to \" + e + \"!\";"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Views a range of Tasks, sorted by time, over a specified number of days."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param command the String array representing the parsed input."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskLists an array of TaskLists."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a list of Event and Deadline objects occurring the specified number of days."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String upcomingCommand(String[] command, TaskList[] taskLists) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assert command[0].equals(\"upcoming\");"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (command.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.NEED_TO_SPECIFY_PERIOD;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (command[1].equals(\"today\")) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            command[1] \u003d \"0\";"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (command[1].equals(\"tomorrow\")) {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            command[1] \u003d \"1\";"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            TaskList upcomingEvents \u003d new TaskList();"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            TaskList upcomingDeadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int dayRangeUntil \u003d Integer.parseInt(command[1]);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            for (TaskList thisList : taskLists) {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                for (Task task : thisList.getList()) {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    if (taskIsInDateRange(task, TODAY, task.getTaskDate(), dayRangeUntil)) {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        populate(task, upcomingEvents, upcomingDeadlines);"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.displayUpcomingRange(dayRangeUntil, upcomingDeadlines, upcomingEvents);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.COMMAND_NOT_FOUND;"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Views the schedule of a particular date."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param command the String array representing the parsed input."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskLists an array of TaskLists."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a list of Event and Deadline objects occurring on the specified day."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String viewCommand(String[] command, TaskList[] taskLists) {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assert command[0].equals(\"view\");"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (command.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.NEED_TO_SPECIFY_DATE;"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        LocalDate targetDate;"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (command[1].equals(\"today\")) {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            targetDate \u003d TODAY;"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (command[1].equals(\"tomorrow\")) {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            targetDate \u003d TODAY.plusDays(1);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            targetDate \u003d LocalDate.parse(command[1], DATE_FORMATTER);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            TaskList upcomingEvents \u003d new TaskList();"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            TaskList upcomingDeadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int dayRangeUntil \u003d 0;"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            for (TaskList thisList : taskLists) {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                for (Task task : thisList.getList()) {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    if (taskIsInDateRange(task, TODAY, task.getTaskDate(), dayRangeUntil)) {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        populate(task, upcomingEvents, upcomingDeadlines);"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                }"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.displayViewDay(targetDate.format(DATE_FORMATTER), upcomingDeadlines, upcomingEvents);"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.WRONG_DATE_TIME_FORMAT;"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Gives a link to the main page for help."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String helpCommand() {"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return \"View the user guide here:\\nhttps://lsjxavier.github.io/duke/\";"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Saves the master TaskList, at its current state when the command was called, into the data file."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskLists an array of TaskLists."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a message if the changes are successfully saved."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String saveCommand(TaskList[] taskLists) {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            Storage.save(taskLists);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.CHANGES_SAVED;"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return \"Oops! Unable to write to file due to \" + e + \"!\";"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Populates a Event or Deadline TaskList with a Task. To be used when the upcoming or view commands are called."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param task The task to add."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param upcomingEvents A list of Events with the specified Date in the upcoming or view command."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param upcomingDeadlines A list of Deadlines with the specified Date in the upcoming or view command."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static void populate(Task task, TaskList upcomingEvents, TaskList upcomingDeadlines) {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (task instanceof Event) {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            upcomingEvents.add(task);"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (task instanceof Deadline \u0026\u0026 !task.isDone()) {"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            upcomingDeadlines.add(task);"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Checks if a date of a task is within a specified range by first calculating the difference between its date"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * and a specified start date, and returns true if it is and false if it is not."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * If the Task is an instance of Todo, this method will always return false."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param task The Task to check if its date is within range."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param startDate The start date to compare to. In the \u0027upcoming\u0027 command, this will always be default to"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *                  the current system date. In the \u0027view\u0027 command, this will always default to the queried"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *                  date by the user."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param endDate The date of the Task."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param dayRangeUntil The number of days specified to determine the range."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return True if the difference of endDate and startDate is between 0 and dayRangeUntil, both inclusive."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *         False if it falls outside the specified range, or if the Task is an instance of Todo."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static boolean taskIsInDateRange(Task task, LocalDate startDate, LocalDate endDate, int dayRangeUntil) {"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (!(task instanceof Todo)) {"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            long dateDifference \u003d ChronoUnit.DAYS.between(startDate, endDate);"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return dateDifference \u003e\u003d 0 \u0026\u0026 dateDifference \u003c\u003d dayRangeUntil;"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Consolidates the array of TaskLists into a single TaskList"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskLists a list of TaskLists."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a TaskList containing every task from the array of TaskLists."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static TaskList consolidateList(TaskList[] taskLists) {"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        TaskList master \u003d new TaskList();"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        for (TaskList thisList : taskLists) {"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            master.addAll(thisList);"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return master;"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 622
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * The Storage class handles all I/O in the software with two key methods, load() and save(). The load() method"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * handles loading of any existing saved data into the TaskList object, while the save() method handles saving the most"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * recent version of the TaskList object when the method is called."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final File savedData \u003d new File(\"data/duke.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final File thisLoc \u003d new File(System.getProperty(\"user.dir\") + \"/data\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String delimiter \u003d \" ~ \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * This method handles loading of an existing data file stored in the directory \u0027data\u0027, where the program is"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * located, and populate the respective TaskList with Tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * If the directory is absent, a new directory is created."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * If the directory is created and the data file is absent, a new data file is created."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a list of TaskList objects."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static TaskList[] load () {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        TaskList todoList \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        TaskList deadlineList \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        TaskList eventList \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            // Checks if the directory exists, and creates it if it does not exist."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            thisLoc.mkdir();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            // Checks if the file exists, and creates it if it does not exist."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            savedData.createNewFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new FileReader(savedData));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            System.out.println(\"Loading file \u0027duke.txt\u0027... \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            while (true) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    String line \u003d reader.readLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    if (line \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    Task thisTask \u003d createTaskFromFile(line);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    if (thisTask instanceof Todo) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        todoList.add(thisTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    } else if (thisTask instanceof Deadline) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        deadlineList.add(thisTask);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    } else if (thisTask instanceof Event) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        eventList.add(thisTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    System.out.println(\"Oops! Unable to read save file due to \" + e + \"!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    System.out.println(Ui.WRONG_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            System.out.println(\"Oops! Unable to create or load save file due to \" + e + \"!\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return new TaskList[] {todoList, deadlineList, eventList};"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * This method saves a current TaskList object into the data file in the directory \u0027data\u0027, where the program"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * is located, assuming that the file has already been created before or during the launch of the program."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param tasklists the task lists to parse into the data file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static void save(TaskList[] tasklists) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(savedData));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        for (TaskList thisList : tasklists) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            for (Task thisTask : thisList.getList()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                String taskStr \u003d thisTask.getTaskType() + delimiter"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        + (thisTask.isDone() ? \"1\" : \"0\") + delimiter"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        + thisTask.getTaskName() + delimiter"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        + (thisTask instanceof Todo ? \"\" : thisTask.getTaskDateTime()) + \"\\n\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                writer.write(taskStr);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Creates a new Task from each line in the data file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param line The input line from the data file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a Task object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws DateTimeParseException If the Date/Time is in the wrong format."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static Task createTaskFromFile(String line) throws DateTimeParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String[] taskContent \u003d line.split(delimiter);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        boolean isDone \u003d taskContent[1].equals(\"1\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        switch(taskContent[0]) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return new Todo(isDone, taskContent[2]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return new Deadline(isDone, taskContent[2], Parser.parseDateTime(taskContent[3]));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case\"E\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return new Event(isDone, taskContent[2], Parser.parseDateTime(taskContent[3]));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 118
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * The Task object contains parameters and information which defines the Task, such as the name, time, and whether it"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * is done. This object also handles any editing to the contents of the Task."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "abstract class Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private char taskType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private LocalDate taskDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private LocalTime taskTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Constructor for a new generic Task object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskType defines the type of this Task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param isDone whether the Task is done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskName the name of the Task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskDateTime the given date and/or time of the Task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws DateTimeParseException if the date or time provided is in the wrong format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Task(char taskType, boolean isDone, String taskName, LocalDateTime taskDateTime)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throws DateTimeParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assert taskDateTime !\u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.taskDate \u003d taskDateTime.toLocalDate();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.taskTime \u003d taskDateTime.toLocalTime();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns if this Task is done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return the status of the Task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns if this Task is done, in a unicode format."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return the status of the Task"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String getDoneStatusUnicode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns the name of this Task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return the name of the Task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.taskName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns the type of this Task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return the type of the Task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public char getTaskType() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.taskType;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns the date and time of this Task in a string format."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return the Date and Time of this Task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String getTaskDateTime() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.getTaskDate().format(Parser.DATE_FORMATTER) + \" \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                + this.getTaskTime().format(Parser.TIME_FORMATTER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns the end date of this Task in a String format."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return the end date of the Task."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public LocalDate getTaskDate() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.taskDate;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns the end time of this Task in a String format."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return the end time of the Task."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public LocalTime getTaskTime() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.taskTime;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Sets the name of this Task to a new name."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskName the name to change this Task to."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void setTaskName(String taskName) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Sets the end date of this Task to a new Date."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskDate the new Date."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws DateTimeParseException if the Date is in the wrong format."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void setTaskDate(String taskDate) throws DateTimeParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.taskDate \u003d LocalDate.parse(taskDate, Parser.DATE_FORMATTER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Sets the end time of this Task to a new Time."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskTime the new Time."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws DateTimeParseException if the Time is in the wrong format"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void setTaskTime(String taskTime) throws DateTimeParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.taskTime \u003d LocalTime.parse(taskTime, Parser.TIME_FORMATTER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Marks this Task as done, if it has not already been marked as done."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a String message indicating if the Task has been marked done."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String markDone() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.TASK_ALREADY_DONE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return Ui.MARKED_AS_DONE + this;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 134
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * The TaskList class is a class that encapsulates a list containing various tasks, and handles methods relating"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * to creating and deleting tasks."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Comparator\u003cTask\u003e compareName \u003d (a,b) -\u003e a.getTaskName().compareTo(b.getTaskName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Comparator\u003cTask\u003e compareDate \u003d (a,b) -\u003e a.getTaskDate().compareTo(b.getTaskDate());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Comparator\u003cTask\u003e compareTime \u003d (a,b) -\u003e a.getTaskTime().compareTo(b.getTaskTime());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * The constructor for a new TaskList object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.list \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Adds a new Task to this TaskList and saves the changes to the data file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param task the new Task to be added into this list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a String message indicating if the adding is successful."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws IOException if the changes are unable to be saved into the data file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String add(Task task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.list.add(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return Ui.ADDED_NEW_TASK + task + Ui.taskCountMessage(this.list.size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Appends otherList into this TaskList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param otherList the taskList to append to this list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void addAll(TaskList otherList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.list.addAll(otherList.getList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Adds a new Task of type Todo to this TaskList and saves the changes to the data file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param isDone if this Task is done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskName the name of this Task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a function call to the add() function."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws IOException if the changes are unable to be saved into the data file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String newTodo(boolean isDone, String taskName) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Task newTask \u003d new Todo(isDone, taskName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.add(newTask);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Adds a new Task of type Event to this TaskList and saves the changes to the data file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param isDone if this Task is done."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskName the name of this Task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskDateTime the end date-time of this Task."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a function call to the add() function."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws IOException if the changes are unable to be saved into the data file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String newEvent(boolean isDone, String taskName, LocalDateTime taskDateTime) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Task newTask \u003d new Event(isDone, taskName, taskDateTime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.add(newTask);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Adds a new Task of type Deadline to this TaskList and saves the changes to the data file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param isDone if this Task is done."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskName the name of this Task."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskDateTime the end date-time of this Task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a function call to the add() function."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws IOException if the changes are unable to be saved into the data file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String newDeadline(boolean isDone, String taskName, LocalDateTime taskDateTime) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Task newTask \u003d new Deadline(isDone, taskName, taskDateTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.add(newTask);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Marks a Task in this list as done and saves the changes to the data file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskID the position (starting from 1) of the task in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a function call to markDone() in the Task class."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws IOException if the changes are unable to be saved into the data file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String markDone(int taskID) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String output \u003d this.list.get(taskID - 1).markDone();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Deletes a Task from this list and saves the changes to the data file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskID the position (starting from 1) of the task in the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a String message indicating if the deletion is successful."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws IndexOutOfBoundsException if the specified taskID is not within the current range of the TaskList."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws IOException if the changes are unable to be saved into the data file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String deleteTask(int taskID) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String output \u003d Ui.DELETED_TASK + this.list.get(taskID - 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.list.remove(taskID - 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        output \u003d output + Ui.taskCountMessage(this.list.size());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Updates a Task in this list and saves the changes to the data file"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskID The position (starting from 1) of the task in the list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param fieldType The field to update."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param fieldDescription The description within the field to update."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a String message indicating if the update is successful."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws IndexOutOfBoundsException if the specified taskID is not within the current range of the TaskList."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws IOException if the changes are unable to be saved into the data file."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String updateTask(int taskID, String fieldType, String fieldDescription)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Task targetTask \u003d this.list.get(taskID - 1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        boolean assigningDateTimeForTodo \u003d targetTask instanceof Todo \u0026\u0026"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                (fieldType.equals(\"date\") || fieldType.equals(\"time\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (assigningDateTimeForTodo) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Ui.CANNOT_SET_DATE_TIME_TO_TODO;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        switch(fieldType) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"name\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                targetTask.setTaskName(fieldDescription);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"date\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                targetTask.setTaskDate(fieldDescription);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case \"time\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                targetTask.setTaskTime(fieldDescription);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return Ui.INVALID_FIELD;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return Ui.UPDATED_TASK + targetTask;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Checks if this list is empty"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a boolean if the list is empty."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.list.isEmpty();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns this list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return the list."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.list;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Sorts this list by task time in natural order."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void sortName() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.list.sort(compareName);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Sorts this list by task date and time in natural order."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void sortDateTime() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.list.sort(compareDate.thenComparing(compareTime));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        for (int i \u003d 0; i \u003c this.list.size(); i++) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            output \u003d output + (i + 1) + \". \" + this.list.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 185
    }
  },
  {
    "path": "src/main/java/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * The Todo object extends the Task object in creating a task of type todo."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Constructor for a new Todo object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param isDone whether the Task is marked as done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskName the name of the Task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Todo(boolean isDone, String taskName) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        super(\u0027T\u0027, isDone, taskName, LocalDateTime.MIN);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return \"[T] \" + \"[\" + super.getDoneStatusUnicode() + \"] \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                + super.getTaskName();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 24
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * The UI class handles all string messages to be shown by Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String COMMAND_NOT_FOUND \u003d \"Oops! Command not found!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String INVALID_FIELD \u003d \"Oops! Invalid field!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String TASK_NEEDS_NAME \u003d \"Oops! This task needs a name!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String TASK_NEEDS_DATE_TIME \u003d \"Oops! This task needs a date/time!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String WRONG_DATE_TIME_FORMAT \u003d \"Oops! Invalid date/time format or invalid date!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String NO_TASK_FOUND \u003d \"Oops! Task not found in the list!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String NO_TASK_IN_LIST \u003d \"Yay! There are no tasks in your list!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String DISPLAY_TASK_LIST \u003d \"Here are all the tasks in your list:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String DISPLAY_MATCHING_TASK_LIST \u003d \"Here are your tasks that matched your query:\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String NO_MATCHING_TASK_IN_LIST \u003d \"Oops! There are no tasks that matches your query!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String CHANGES_SAVED \u003d \"Changes saved!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String MARKED_AS_DONE \u003d \"Marked this task as done:\\n    \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String TASK_ALREADY_DONE \u003d \"Oops! This task was already marked as done!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String ADDED_NEW_TASK \u003d \"New task has been added:\\n    \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String DELETED_TASK \u003d \"Removed this task:\\n    \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String UPDATED_TASK \u003d \"Updated this task to:\\n    \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String NO_FIELD_TO_UPDATE \u003d \"No field to update!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String CANNOT_SET_DATE_TIME_TO_TODO \u003d \"Cannot set date or time to todo!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String CANNOT_SORT_TODO_BY_DATE_TIME \u003d \"Cannot sort todo by date/time!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String NEED_TO_SPECIFY_PERIOD \u003d \"Need to specify period!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String NEED_TO_SPECIFY_DATE \u003d \"Need to specify date!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String WELCOME_MESSAGE \u003d \"Welcome to Duke!\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String NOT_ENOUGH_PARAMETERS \u003d \"Not enough information to process your request!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String SORTED_BY_NAME \u003d \"Sorted your tasks by name.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    static final String SORTED_BY_DATE_TIME \u003d \"Sorted your tasks by date.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Reads a String line, parses it and sends to the main logic for processing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param input The full input by the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param taskLists An array of TaskLists"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return The output message from passing the input into the main logic"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String readNextCommand(String input, TaskList[] taskLists) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String[] command \u003d Parser.parseInput(input.strip());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return Parser.processCommand(command, taskLists);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Presents the number of tasks in any TaskList"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param listSize The size of the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return A message containing the number of tasks in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String taskCountMessage(int listSize) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return \"\\nNow you have \"+ listSize + (listSize \u003d\u003d 1 ? \" task\" : \" tasks\") + \" in the list.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * The main message when the user types in an \u0027upcoming\u0027 command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param dayRangeUntil The number of days in the range."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param upcomingDeadlines The list of upcoming deadlines occurring within the range."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param upcomingEvents The list of upcoming events occurring within the range."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a string representation of an overview of deadlines and events."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String displayUpcomingRange(int dayRangeUntil, TaskList upcomingDeadlines, TaskList upcomingEvents) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String deadlines \u003d messageUpcomingDeadlines(upcomingDeadlines) + \"for the next \" + dayRangeUntil + \" day(s).\\n\";;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (!upcomingDeadlines.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            deadlines \u003d deadlines + upcomingDeadlines + \"\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String events \u003d messageUpcomingEvents(upcomingEvents) + \"for the next \" + dayRangeUntil + \" day(s).\\n\";;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (!upcomingEvents.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            events \u003d events + upcomingEvents + \"\\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return deadlines + events;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param targetDate The target date the user requests."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param upcomingDeadlines The list of deadlines happening on the targetDate."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param upcomingEvents The list of events happening on the targetDate."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a string representation of an overview of deadlines and events."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String displayViewDay(String targetDate, TaskList upcomingDeadlines, TaskList upcomingEvents) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String deadlines \u003d messageUpcomingDeadlines(upcomingDeadlines) + \"on \" + targetDate + \".\\n\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (!upcomingDeadlines.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            deadlines \u003d deadlines + upcomingDeadlines + \"\\n\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String events \u003d messageUpcomingEvents(upcomingEvents) + \"on \" + targetDate + \".\\n\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (!upcomingEvents.isEmpty()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            events \u003d events + upcomingEvents + \"\\n\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return deadlines + events;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns the starting message of both \u0027upcoming\u0027 and \u0027view\u0027 commands for the deadline list. Also sorts the list"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * by date/time."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param upcomingDeadlines the list of upcoming deadlines."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a string message."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String messageUpcomingDeadlines(TaskList upcomingDeadlines) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (upcomingDeadlines.isEmpty()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return \"You have no upcoming deadlines \";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        upcomingDeadlines.sortDateTime();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return \"Your upcoming deadlines \";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns the starting message of both \u0027upcoming\u0027 and \u0027view\u0027 commands for the event list. Also sorts the list"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * by date/time."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param upcomingEvents the list of upcoming events."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a string message."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String messageUpcomingEvents(TaskList upcomingEvents) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (upcomingEvents.isEmpty()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return \"You have no upcoming events \";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        upcomingEvents.sortDateTime();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return \"Your upcoming events \";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 125
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" textFill\u003d\"#485f6b\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            \u003cInsets left\u003d\"4.0\" right\u003d\"4.0\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 19
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Hello from"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "What can I do for you today?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Oops! Command not found!"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Oops! Command not found!"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Oops! Command not found!"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Oops! Command not found!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Yay! There are no tasks in your list!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e New task has been added:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    [T] [✘] Buy Textbooks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Now you have 1 task in the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e New task has been added:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    [T] [✘] Buy Eggs"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Here are your tasks in your list:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "1. [T] [✘] Buy Textbooks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "2. [T] [✘] Buy Eggs"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Oops! This task needs a name and date/time!"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e New task has been added:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    [D] [✘] Homework (by: Sunday)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Here are your tasks in your list:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "1. [T] [✘] Buy Textbooks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "2. [T] [✘] Buy Eggs"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "3. [D] [✘] Homework (by: Sunday)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Oops! This task needs a date/time!"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e New task has been added:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    [E] [✘] Project Meeting (at: 10/2/20 11:59am)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e New task has been added:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    [T] [✘] test10"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Here are your tasks in your list:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "1. [T] [✘] Buy Textbooks"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "2. [T] [✘] Buy Eggs"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "3. [D] [✘] Homework (by: Sunday)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "4. [E] [✘] Project Meeting (at: 10/2/20 11:59am)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "5. [T] [✘] test10"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Marked this task as done:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    [T] [✓] Buy Eggs"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Marked this task as done:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    [D] [✓] Homework (by: Sunday)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Oops! This task needs a date/time!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Here are your tasks in your list:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "1. [T] [✘] Buy Textbooks"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "2. [T] [✓] Buy Eggs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "3. [D] [✓] Homework (by: Sunday)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "4. [E] [✘] Project Meeting (at: 10/2/20 11:59am)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "5. [T] [✘] test10"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e New task has been added:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    [D] [✘] Finish Presentation Slides (by: 23/1/20)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Now you have 6 tasks in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Oops! This task was already marked as done!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Here are your tasks in your list:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "1. [T] [✘] Buy Textbooks"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "2. [T] [✓] Buy Eggs"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "3. [D] [✓] Homework (by: Sunday)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "4. [E] [✘] Project Meeting (at: 10/2/20 11:59am)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "5. [T] [✘] test10"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "6. [D] [✘] Finish Presentation Slides (by: 23/1/20)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Marked this task as done:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    [E] [✓] Project Meeting (at: 10/2/20 11:59am)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Oops! Task not found!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Here are your tasks in your list:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "1. [T] [✘] Buy Textbooks"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "2. [T] [✓] Buy Eggs"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "3. [D] [✓] Homework (by: Sunday)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "4. [E] [✓] Project Meeting (at: 10/2/20 11:59am)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "5. [T] [✘] test10"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "6. [D] [✘] Finish Presentation Slides (by: 23/1/20)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Removed this task:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    [T] [✓] Buy Eggs"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Removed this task:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    [E] [✓] Project Meeting (at: 10/2/20 11:59am)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Here are your tasks in your list:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "1. [T] [✘] Buy Textbooks"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "2. [D] [✓] Homework (by: Sunday)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "3. [T] [✘] test10"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "4. [D] [✘] Finish Presentation Slides (by: 23/1/20)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003e Thank you for using Duke."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Have a nice day!"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 116
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "hi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "test"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "add"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "add Buy Textbooks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "todo Buy Textbooks"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "todo Buy Eggs"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "deadline Homework /by Sunday"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "event Project Meeting"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "event Project Meeting /at 10/2/20 11:59am"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "todo test10"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "deadline Finish Presentation Slides"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "deadline Finish Presentation Slides /by 23/1/20"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "done 9"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "bye "
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 29
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 34
    }
  }
]
