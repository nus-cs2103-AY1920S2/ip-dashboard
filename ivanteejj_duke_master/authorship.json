[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "`A-TextUiTesting` | [Text dukeui Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 1,
      "-": 38
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    archiveVersion \u003d \"v0.1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 22,
      "-": 19
    }
  },
  {
    "path": "gradle/wrapper/gradle-wrapper.properties",
    "fileType": "properties",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "#Mon Jan 20 01:49:13 SGT 2020"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "distributionUrl\u003dhttps\\://services.gradle.org/distributions/gradle-5.5.1-all.zip"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "distributionBase\u003dGRADLE_USER_HOME"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "distributionPath\u003dwrapper/dists"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "zipStorePath\u003dwrapper/dists"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "zipStoreBase\u003dGRADLE_USER_HOME"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 3,
      "-": 3
    }
  },
  {
    "path": "gradlew",
    "fileType": "gradlew",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "##############################################################################"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "##"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "##  Gradle start up script for UN*X"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "##"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "##############################################################################"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# Attempt to set APP_HOME"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "# Resolve links: $0 may be a link"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "PRG\u003d\"$0\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "# Need this for relative symlinks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "while [ -h \"$PRG\" ] ; do"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    ls\u003d`ls -ld \"$PRG\"`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    link\u003d`expr \"$ls\" : \u0027.*-\u003e \\(.*\\)$\u0027`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    if expr \"$link\" : \u0027/.*\u0027 \u003e /dev/null; then"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        PRG\u003d\"$link\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    else"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        PRG\u003d`dirname \"$PRG\"`\"/$link\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "done"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "SAVED\u003d\"`pwd`\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "cd \"`dirname \\\"$PRG\\\"`/\" \u003e/dev/null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "APP_HOME\u003d\"`pwd -P`\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "cd \"$SAVED\" \u003e/dev/null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "APP_NAME\u003d\"Gradle\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "APP_BASE_NAME\u003d`basename \"$0\"`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "DEFAULT_JVM_OPTS\u003d\u0027\"-Xmx64m\"\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "# Use the maximum available, or set MAX_FD !\u003d -1 to use that value."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MAX_FD\u003d\"maximum\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "warn () {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"$*\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "die () {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    echo"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"$*\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    echo"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "# OS specific support (must be \u0027true\u0027 or \u0027false\u0027)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "cygwin\u003dfalse"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "msys\u003dfalse"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "darwin\u003dfalse"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "nonstop\u003dfalse"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "case \"`uname`\" in"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "  CYGWIN* )"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    cygwin\u003dtrue"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    ;;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "  Darwin* )"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    darwin\u003dtrue"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    ;;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  MINGW* )"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    msys\u003dtrue"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    ;;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "  NONSTOP* )"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    nonstop\u003dtrue"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    ;;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "esac"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "CLASSPATH\u003d$APP_HOME/gradle/wrapper/gradle-wrapper.jar"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "# Determine the Java dukecommand to use to start the JVM."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -n \"$JAVA_HOME\" ] ; then"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        # IBM\u0027s JDK on AIX uses strange locations for the executables"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        JAVACMD\u003d\"$JAVA_HOME/jre/sh/java\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    else"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JAVACMD\u003d\"$JAVA_HOME/bin/java\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    if [ ! -x \"$JAVACMD\" ] ; then"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "location of your Java installation.\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    JAVACMD\u003d\"java\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    which java \u003e/dev/null 2\u003e\u00261 || die \"ERROR: JAVA_HOME is not set and no \u0027java\u0027 dukecommand could be found in your PATH."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "location of your Java installation.\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "# Increase the maximum file descriptors if we can."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "if [ \"$cygwin\" \u003d \"false\" -a \"$darwin\" \u003d \"false\" -a \"$nonstop\" \u003d \"false\" ] ; then"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    MAX_FD_LIMIT\u003d`ulimit -H -n`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    if [ $? -eq 0 ] ; then"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if [ \"$MAX_FD\" \u003d \"maximum\" -o \"$MAX_FD\" \u003d \"max\" ] ; then"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            MAX_FD\u003d\"$MAX_FD_LIMIT\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        fi"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        ulimit -n $MAX_FD"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if [ $? -ne 0 ] ; then"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            warn \"Could not set maximum file descriptor limit: $MAX_FD\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        fi"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    else"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "# For Darwin, add options to specify how the application appears in the dock"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "if $darwin; then"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    GRADLE_OPTS\u003d\"$GRADLE_OPTS \\\"-Xdock:name\u003d$APP_NAME\\\" \\\"-Xdock:icon\u003d$APP_HOME/media/gradle.icns\\\"\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "# For Cygwin, switch paths to Windows format before running java"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "if $cygwin ; then"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    APP_HOME\u003d`cygpath --path --mixed \"$APP_HOME\"`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    CLASSPATH\u003d`cygpath --path --mixed \"$CLASSPATH\"`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    JAVACMD\u003d`cygpath --unix \"$JAVACMD\"`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    # We build the pattern for arguments to be converted via cygpath"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ROOTDIRSRAW\u003d`find -L / -maxdepth 1 -mindepth 1 -type d 2\u003e/dev/null`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    SEP\u003d\"\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    for dir in $ROOTDIRSRAW ; do"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ROOTDIRS\u003d\"$ROOTDIRS$SEP$dir\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        SEP\u003d\"|\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    done"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    OURCYGPATTERN\u003d\"(^($ROOTDIRS))\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    # Add a user-defined pattern to the cygpath arguments"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    if [ \"$GRADLE_CYGPATTERN\" !\u003d \"\" ] ; then"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        OURCYGPATTERN\u003d\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    # Now convert the arguments - kludge to limit ourselves to /bin/sh"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    i\u003d0"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    for arg in \"$@\" ; do"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        CHECK\u003d`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CHECK2\u003d`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if [ $CHECK -ne 0 ] \u0026\u0026 [ $CHECK2 -eq 0 ] ; then                    ### Added a condition"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            eval `echo args$i`\u003d`cygpath --path --ignore --mixed \"$arg\"`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        else"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            eval `echo args$i`\u003d\"\\\"$arg\\\"\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        fi"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        i\u003d$((i+1))"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    done"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    case $i in"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        (0) set -- ;;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        (1) set -- \"$args0\" ;;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        (2) set -- \"$args0\" \"$args1\" ;;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    esac"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "# Escape application args"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "save () {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    for i do printf %s\\\\n \"$i\" | sed \"s/\u0027/\u0027\\\\\\\\\u0027\u0027/g;1s/^/\u0027/;\\$s/\\$/\u0027 \\\\\\\\/\" ; done"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \" \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "APP_ARGS\u003d$(save \"$@\")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "# Collect all arguments for the java dukecommand, following the shell quoting and substitution rules"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname\u003d$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "if [ \"$(uname)\" \u003d \"Darwin\" ] \u0026\u0026 [ \"$HOME\" \u003d \"$PWD\" ]; then"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "  cd \"$(dirname \"$0\")\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "exec \"$JAVACMD\" \"$@\""
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 3,
      "-": 169
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukecommand.DukeCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeexceptions.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukelist.DukeList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeparser.DukeParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukestorage.DukeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeui.DukeUI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * Represents a Duke object that runs the main function of the program"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * Will run until user inputs \u0027bye\u0027 command or force quits the program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private DukeList dl;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private DukeStorage ds;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private DukeUI ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private DukeParser parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Constructor for Duke. Each instantiation will create a new"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * DukeStorage, DukeList, DukeUI, DukeParser for the object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            ds \u003d new DukeStorage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            dl \u003d ds.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            ui \u003d new DukeUI();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            parser \u003d new DukeParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            System.out.println(ioe.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Drives the body of the code."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        ui.showWelcomeMessage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        boolean isMainExit \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        while (!isMainExit) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                command \u003d ui.readCommandString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                DukeCommand currCommand \u003d parser.handleCommand(command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                currCommand.execute(dl, ds, ui);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                isMainExit \u003d currCommand.getIsExit();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 57,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeUI/DukeUI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package dukeui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeexceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukelist.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * Represents a minial UI program that is used to interact with the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * Prints messages as well as obtains input when necessary"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class DukeUI {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private final String line \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private final String logo \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            \"     ____        _        \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            + \"    |  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            + \"    | | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            + \"    | |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            + \"    |____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public DukeUI() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public DukeUI(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public void printCustomMessage(String customM) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        System.out.println(customM);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Prints the welcome message for Duke."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public void showWelcomeMessage() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        printCustomMessage(logo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        System.out.println(\"    Hello I\u0027m Duke\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        System.out.println(\"    What can I do for you?\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Returns the user\u0027s written command as a string."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @return User-typed input String"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public String readCommandString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Prints out the error message from a DukeException."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param e DukeException"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public void showErrorMessage(DukeException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        System.out.println(\"    \" + e.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public void printListOfTasks(ArrayList\u003cString\u003e inputList) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        for (String curr : inputList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            this.printCustomMessage(curr);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 80
    }
  },
  {
    "path": "src/main/java/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "T|X|feed dog"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "T|X|meet friend"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "T|X|kiss cat"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "T|X|feed cat"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "D|X|tutorial|2020-12-30"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 5
    }
  },
  {
    "path": "src/main/java/dukecommand/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package dukecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeexceptions.InvalidEntryException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukelist.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukestorage.DukeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import duketasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeui.DukeUI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * Represents a command that adds a new Task into the DukeList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class AddCommand extends DukeCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private Task toBeAdded;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public AddCommand(Task tba) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        this.toBeAdded \u003d tba;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Executes the requested command by adding the task to the list, saving the changes in the storage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * and printing the success message of adding the task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param dl DukeList from the main Duke program"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param ds DukeStorage from the main Duke program"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param dui DukeUI from the main Duke program"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public void execute(DukeList dl, DukeStorage ds, DukeUI dui) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        dl.addTask(toBeAdded);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        ds.save(dl);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        dui.printCustomMessage(\"    Got it I\u0027ve added this task:\\n      \" + toBeAdded);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        System.out.printf(\"    Now you have %d tasks in the list.\\n\", dl.getNumOfTasks());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Returns a True boolean if this is a ByeCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @return False as this is not a ByeCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public boolean getIsExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 44
    }
  },
  {
    "path": "src/main/java/dukecommand/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package dukecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeexceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukelist.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukestorage.DukeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeui.DukeUI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * Represents a command that will end the Duke program after execution"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class ByeCommand extends DukeCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Executes the Bye Command by toggling the isExit boolean to true and printing the exit message via the DukeUI;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param dl DukeList from the main Duke program"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param ds DukeStorage from the main Duke program"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param dui DukeUI from the main Duke program"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public void execute(DukeList dl, DukeStorage ds, DukeUI dui) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        dui.printCustomMessage(\"    \" + \"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Returns a True boolean if this is a ByeCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @return True as this is a ByeCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public boolean getIsExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 41
    }
  },
  {
    "path": "src/main/java/dukecommand/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package dukecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeexceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukelist.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukestorage.DukeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import duketasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeui.DukeUI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * Represents a command that will delete a certain Task from the DukeList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class DeleteCommand extends DukeCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private int deleteIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public DeleteCommand(int deleteIndex) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        this.deleteIndex \u003d deleteIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Executes the delete command by removing the task from the DukeList according to index."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * DukeUI prints the deleted task if available and the number of remaining tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param dl DukeList from the main Duke program"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param ds DukeStorage from the main Duke program"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param dui DukeUI from the main Duke program"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @throws DukeException Thrown when the list is empty or index \u003e\u003d 0, index \u003e DukeList\u0027s size"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public void execute(DukeList dl, DukeStorage ds, DukeUI dui) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        Task removedTask \u003d dl.deleteTask(deleteIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        ds.save(dl);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        dui.printCustomMessage(\"    The task requested has been successfully removed:\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        dui.printCustomMessage(\"      \" + removedTask);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        int remainingNum \u003d dl.getNumOfTasks();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        if (remainingNum \u003d\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            dui.printCustomMessage(\"    There is \" + remainingNum + \" task left.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            dui.printCustomMessage(\"    There are \" + remainingNum + \" tasks left.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Returns a True boolean if this is a ByeCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @return False as this is not a ByeCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public boolean getIsExit() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 54
    }
  },
  {
    "path": "src/main/java/dukecommand/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package dukecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeexceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukelist.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukestorage.DukeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import duketasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeui.DukeUI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * Represents a command that will mark a certain Task as complete from the DukeList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class DoneCommand extends DukeCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private int doneIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public DoneCommand (int doneIndex) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        this.doneIndex \u003d doneIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Executes the done command by marking a task as done from the DukeList according to given index."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * DukeUI prints the marked task if available."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param dl DukeList from the main Duke program"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param ds DukeStorage from the main Duke program"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param dui DukeUI from the main Duke program"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @throws DukeException Thrown when the list is empty or index \u003e\u003d 0, index \u003e DukeList\u0027s size"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public void execute (DukeList dl, DukeStorage ds, DukeUI dui) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        Task curr \u003d dl.markTaskAsDone(doneIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        dui.printCustomMessage(\"    Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        dui.printCustomMessage(\"    \" + curr);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public boolean getIsExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 40
    }
  },
  {
    "path": "src/main/java/dukecommand/DukeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package dukecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeexceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukelist.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukestorage.DukeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeui.DukeUI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * Represents an abstract class which all over commands will extend from"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public abstract class DukeCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    protected boolean isExit \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public abstract void execute(DukeList dl, DukeStorage ds, DukeUI dui) throws DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public abstract boolean getIsExit();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 16
    }
  },
  {
    "path": "src/main/java/dukecommand/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package dukecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeexceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukelist.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukestorage.DukeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import duketasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeui.DukeUI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * Represents a Find Command that searches all tasks description to find the ones that matches"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * the specified keyword"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class FindCommand extends DukeCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    String keyword;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Searches iteratively in each task\u0027s description to find the keyword and prints out the list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * of tasks that contains the keyword"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param dl  DukeList from main Duke program"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param ds  DukeStorage from main Duke program"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param dui DukeUI from main Duke program"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public void execute(DukeList dl, DukeStorage ds, DukeUI dui) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        if (dl.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            dui.printCustomMessage(\"    There\u0027s no list for me to search from. Your list is empty!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            DukeList collectingDL \u003d new DukeList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            ArrayList\u003cTask\u003e searchSpace \u003d dl.getListOfTasks();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            for (Task curr : searchSpace) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                if (isKeyWordFoundInTask(keyword, curr)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                    collectingDL.addTask(curr);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            if (collectingDL.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                dui.printCustomMessage(\"    There\u0027s no task description that matches your keyword!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                dui.printCustomMessage(\"    Here\u0027s the list of tasks that contains your keyword!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                dui.printListOfTasks(collectingDL.getListForUI());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public boolean getIsExit() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private boolean isKeyWordFoundInTask(String target, Task currTask) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        String taskDesc \u003d currTask.getTaskName();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        String[] taskDescArr \u003d taskDesc.split(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        boolean isFound \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        for(String desc : taskDescArr) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            if(target.equals(desc)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                isFound \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return isFound;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 72
    }
  },
  {
    "path": "src/main/java/dukecommand/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package dukecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeexceptions.InvalidEntryException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukelist.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukestorage.DukeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeui.DukeUI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * Represents a command that will display the help message which contains"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * all available commands and their required format."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class HelpCommand extends DukeCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Executes the help command by having the DukeUI print out the help message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param dl DukeList from the main Duke program"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param ds DukeStorage from the main Duke program"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param dui DukeUI from the main Duke program"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public void execute(DukeList dl, DukeStorage ds, DukeUI dui) throws InvalidEntryException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        dui.printCustomMessage(helpString);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public boolean getIsExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private final String helpString \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            \"    All available commands are: \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                    + \"    1. \u0027help\u0027 to see all available commands.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                    + \"    2. \u0027list\u0027 to see all listed tasks.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                    + \"    3. \u0027todo x\u0027 where x is an event description to note a To-Do event.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                    + \"    4. \u0027deadline x /by y\u0027 where is x is a description and y is a date in YYYY-MM-DD format.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                    + \"    5. \u0027event x /at y\u0027 where x is an event description and y is a date in YYYY-MM-DD format.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                    + \"    6. \u0027delete x where x in the task in the list you want to delete (1-indexed.)\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 43
    }
  },
  {
    "path": "src/main/java/dukecommand/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package dukecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeexceptions.InvalidEntryException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukelist.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukestorage.DukeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeui.DukeUI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * Represents a command that will list out all current Tasks from DukeList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class ListCommand extends DukeCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    ArrayList\u003cString\u003e toBePrinted;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Prints out the current list of tasks from the DukeList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param dl DukeList from the main Duke program"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param ds DukeStorage from the main Duke program"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param dui DukeUI from the main Duke program"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @throws InvalidEntryException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public void execute(DukeList dl, DukeStorage ds, DukeUI dui) throws InvalidEntryException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        this.toBePrinted \u003d dl.getListForUI();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        if (toBePrinted.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            dui.printCustomMessage(\"    There are 0 tasks in your list.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            dui.printCustomMessage(\"    Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            dui.printListOfTasks(toBePrinted);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public boolean getIsExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 47
    }
  },
  {
    "path": "src/main/java/dukecommand/UnknownCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package dukecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeexceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeexceptions.UnknownCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukelist.DukeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukestorage.DukeStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeui.DukeUI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * Represents a command is not understood by Duke program"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class UnknownCommand extends DukeCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public UnknownCommand(){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Throws an UnknownCommandException as the command is not understood by the program"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param dl DukeList from the main Duke program"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param ds DukeStorage from the main Duke program"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param dui DukeUI from the main Duke program"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @throws DukeException Thrown to represent an unknown command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public void execute(DukeList dl, DukeStorage ds, DukeUI dui) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        throw new UnknownCommandException(\"Sorry! I don\u0027t understand that command.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public boolean getIsExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 34
    }
  },
  {
    "path": "src/main/java/dukeexceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public DukeException(String exceptionStr) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        super(exceptionStr);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 7
    }
  },
  {
    "path": "src/main/java/dukeexceptions/EmptyListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class EmptyListException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public EmptyListException(String exceptionStr) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        super(exceptionStr);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 7
    }
  },
  {
    "path": "src/main/java/dukeexceptions/InvalidEntryException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class InvalidEntryException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public InvalidEntryException(String exceptionStr) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        super(exceptionStr);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 7
    }
  },
  {
    "path": "src/main/java/dukeexceptions/InvalidFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class InvalidFormatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public InvalidFormatException(String exceptionStr) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        super(exceptionStr);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 7
    }
  },
  {
    "path": "src/main/java/dukeexceptions/MissingDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class MissingDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public MissingDescriptionException(String exceptionStr) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        super(exceptionStr);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 7
    }
  },
  {
    "path": "src/main/java/dukeexceptions/MissingTimingException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class MissingTimingException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public MissingTimingException(String exceptionStr) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        super(exceptionStr);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 7
    }
  },
  {
    "path": "src/main/java/dukeexceptions/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public UnknownCommandException(String exceptionStr) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        super(exceptionStr);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 7
    }
  },
  {
    "path": "src/main/java/dukelist/DukeList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package dukelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import duketasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeexceptions.EmptyListException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeexceptions.InvalidEntryException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * Represents a list of tasks that the user needs to complete"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class DukeList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private ArrayList\u003cTask\u003e listOfTasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    int numOfTasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public DukeList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        listOfTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        numOfTasks \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Takes in a Task and adds it into the list of Tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Increments the total number of tasks by 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param currTask Task to be added to the list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public void addTask(Task currTask) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        listOfTasks.add(currTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        numOfTasks++;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Returns number of tasks in the list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @return Total number of tasks in the list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public int getNumOfTasks() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return this.numOfTasks;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Marks a certain task in the list as done according to the taskIndex"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param taskIndex The current index of the tasks to be marked as done. Is 1-indexed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @return int representing numOfTasks"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @throws EmptyListException Thrown when list is empty"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @throws InvalidEntryException Thrown when index \u003c 1 and when index \u003e numOfTasks + 1"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public Task markTaskAsDone(int taskIndex) throws EmptyListException, InvalidEntryException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        if (numOfTasks \u003d\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            throw new EmptyListException(\"List is empty! Which task can you complete?!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else if (taskIndex \u003e numOfTasks) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            String exceptionOutput \u003d String.format(\"List only has %d item(s), \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                    + \"how to complete item no. %d\", numOfTasks, taskIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            throw new InvalidEntryException(exceptionOutput);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else if (taskIndex \u003c 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            throw new InvalidEntryException(\"Can only complete positive indexes!\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            Task completedTask \u003d listOfTasks.get(taskIndex - 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            completedTask.done();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            return completedTask;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Returns a formatted string of the list of tasks to be printed in the ListCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @return Formatted string of the lists of tasks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public ArrayList\u003cString\u003e getListForUI() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        ArrayList\u003cString\u003e toBePrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        for (int x \u003d 0; x \u003c numOfTasks; x++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            String output \u003d String.format(\"    %d.%s\", x + 1, listOfTasks.get(x).toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            toBePrint.add(output);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return toBePrint;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Deletes the task from the list if available and decrements the numOfTasks"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param index Index of tasks in the list to be deleted. 1-indexed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @return The deleted task"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @throws InvalidEntryException Thrown when index \u003c 1 or index \u003e numOfTasks + 1"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @throws EmptyListException Thrown when list is empty"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public Task deleteTask(int index) throws InvalidEntryException, EmptyListException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        if (numOfTasks \u003d\u003d 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            throw new EmptyListException(\"List is empty! How to delete?!\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else if (index \u003e numOfTasks) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            String exceptionOutput \u003d String.format(\"List only has %d item(s), \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                    + \"how to delete item no. %d\", numOfTasks, index);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            throw new InvalidEntryException(exceptionOutput);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else if (index \u003c 1) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            throw new InvalidEntryException(\"Can only remove positive indexes!\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            Task removedTask \u003d listOfTasks.remove(index - 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            numOfTasks--;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            return removedTask;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public ArrayList\u003cTask\u003e getListOfTasks() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return this.listOfTasks;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Returns a boolean for whether the list is empty"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @return true if list is empty, else false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        if(this.getNumOfTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 123
    }
  },
  {
    "path": "src/main/java/dukeparser/DukeCommandEnums.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package dukeparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * Represents all possible Duke Commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public enum DukeCommandEnums {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    BYE, DEADLINE, DELETE, DONE, EVENT, HELP, LIST, TODO, UNKNOWN, FIND"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 9
    }
  },
  {
    "path": "src/main/java/dukeparser/DukeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package dukeparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeexceptions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukecommand.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import duketasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import duketasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import duketasks.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukelist.DukeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukestorage.DukeStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeui.DukeUI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * Used to parse in each command input and returns a corresponding command object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class DukeParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public DukeParser() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Drives the main functioning of DukeParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Splits the input String by \u0027 \u0027 and obtains the Command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * For each command type, creates and returns their respective Command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param inputString String of user-typed command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public DukeCommand handleCommand(String inputString) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        String[] splitS \u003d inputString.split(\" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        String command \u003d splitS[0];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        DukeCommandEnums dukeCommand \u003d getEnum(command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        DukeCommand returnCommand \u003d new DukeCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            public void execute(DukeList dl, DukeStorage ds, DukeUI dui) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            public boolean getIsExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            switch (dukeCommand) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                int deletedIndex \u003d Integer.parseInt(splitS[1]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                returnCommand \u003d new DeleteCommand(deletedIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            case HELP:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                returnCommand \u003d new HelpCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                LocalDate eventAt \u003d findDeadline(inputString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                String eventDes \u003d findTaskDes(inputString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                Event newEvent \u003d new Event(eventDes, eventAt);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                returnCommand \u003d new AddCommand(newEvent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                LocalDate deadlineBy \u003d findDeadline(inputString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                String deadlineDes \u003d findTaskDes(inputString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                Deadline newDL \u003d new Deadline(deadlineDes, deadlineBy);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                returnCommand \u003d new AddCommand(newDL);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                String taskDes \u003d findTaskDes(inputString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                Todo newTask \u003d new Todo(taskDes);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                returnCommand \u003d new AddCommand(newTask);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                int doneIndex \u003d Integer.parseInt(splitS[1]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                returnCommand \u003d new DoneCommand(doneIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                returnCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                returnCommand \u003d new ByeCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                String keyword \u003d findKeyword(inputString);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                returnCommand \u003d new FindCommand(keyword);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            case UNKNOWN:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                returnCommand \u003d new UnknownCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                System.out.println(\"?\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return returnCommand;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Returns a LocalDate object from the /by or /at part of the input string"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param inputString String of the user\u0027s input"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @return LocalDate representing the deadline of the Deadline task or the Event task"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @throws MissingTimingException Thrown when after /at or /by is empty"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @throws InvalidFormatException Thrown when the date is formatted wrongly"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private LocalDate findDeadline(String inputString) throws MissingTimingException, InvalidFormatException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        String[] curr \u003d inputString.split(\"/\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return findDeadlineHelper(curr[1]);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private LocalDate findDeadlineHelper(String inputString) throws MissingTimingException, InvalidFormatException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        String[] help \u003d inputString.split(\" \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        int descriptionLength \u003d help.length;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        if (descriptionLength \u003d\u003d 1) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            throw new MissingTimingException(\"Hey! Your deadline/event has no timing! Please re-enter with timing!\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            String dateString \u003d help[1];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            return parseDate(dateString);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private String findKeyword(String inputString) throws InvalidEntryException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        String[] inputStrArr \u003d inputString.split(\" \");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        int arrLen \u003d inputStrArr.length;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        if(arrLen \u003e 2) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            throw new InvalidEntryException(\"Keyword can only be 1 word long. Please try again!\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else if(arrLen \u003c 2) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            throw new InvalidEntryException(\"Keyword can\u0027t be found. Please try again!\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            return inputStrArr[1];"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private LocalDate parseDate(String dateString) throws InvalidFormatException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            LocalDate result \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } catch (DateTimeException dte) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            throw new InvalidFormatException(dte.getMessage());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Obtains the task description string"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param inputString String of the user\u0027s input"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @return String comprising of task description"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @throws MissingDescriptionException Thrown when description is empty"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private String findTaskDes(String inputString) throws MissingDescriptionException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        if (inputString.indexOf(\"/\") \u003c\u003d 0) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            return findTaskDesHelper(inputString);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            String[] findingDes \u003d inputString.split(\"/\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            return findTaskDesHelper(findingDes[0]);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private String findTaskDesHelper(String inputString) throws MissingDescriptionException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        String[] help \u003d inputString.split(\" \");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        int descriptionLength \u003d help.length;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        if (descriptionLength \u003d\u003d 1) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            throw new MissingDescriptionException(\"Hey! Your command doesn\u0027t have a description! Please try again\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            String output \u003d help[1];"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            for (int x \u003d 2; x \u003c descriptionLength; x++) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                output +\u003d  \" \" + help[x];"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private DukeCommandEnums getEnum(String enumString) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        if (enumString.equals(\"bye\")) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            return DukeCommandEnums.BYE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else if (enumString.equals(\"list\")) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            return DukeCommandEnums.LIST;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else if (enumString.equals(\"done\")) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            return DukeCommandEnums.DONE;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else if (enumString.equals(\"todo\")) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            return DukeCommandEnums.TODO;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else if (enumString.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            return DukeCommandEnums.DEADLINE;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else if (enumString.equals(\"event\")) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            return DukeCommandEnums.EVENT;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else if (enumString.equals(\"help\")) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            return DukeCommandEnums.HELP;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else if (enumString.equals(\"delete\")) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            return DukeCommandEnums.DELETE;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else if (enumString.equals(\"find\")) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            return DukeCommandEnums.FIND;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            return DukeCommandEnums.UNKNOWN;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 199
    }
  },
  {
    "path": "src/main/java/dukestorage/DukeStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package dukestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import duketasks.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import duketasks.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import duketasks.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import duketasks.Todo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukelist.DukeList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * Storage function used to save tasks whenever there is a change in the list items"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * and load tasks when Duke program starts up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class DukeStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private static final String defaultPath \u003d \"data\\\\duke.txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public final Path path;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public DukeStorage(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public DukeStorage() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        this(defaultPath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Saves the input DukeList into a text file by first encoded each entry of the DukeList into"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * a special format of \u0027T/D/E-X/O-eventDesc(-eventDeadline)\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param dl The DukeList that is to be saved"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public void save(DukeList dl) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        ArrayList\u003cTask\u003e inputDL \u003d dl.getListOfTasks();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        List\u003cString\u003e outputList \u003d saveEncoder(inputDL);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            Path test \u003d Files.write(path, outputList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            System.out.println(ioe.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private List\u003cString\u003e saveEncoder(ArrayList\u003cTask\u003e alT) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        List\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        for (Task currTask : alT) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            output.add(currTask.getSaveString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Returns a DukeList regardless, content depends on whether the"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * designated text file has previously saved tasks"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @return An empty DukeList if text file is empty, else a DukeList with previously saved tasks"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @throws IOException Thrown by Files.readAllLines"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public DukeList load() throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        if (!Files.exists(path)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            return new DukeList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            DukeList output \u003d new DukeList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                List\u003cString\u003e input \u003d Files.readAllLines(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                return loadDecoder(input, output);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                throw ioe;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private DukeList loadDecoder(List\u003cString\u003e savedList, DukeList dl) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        for (String currSaveEntry : savedList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            String[] input \u003d currSaveEntry.split(\"\\\\|\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            String command \u003d input[0];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            String isDoneString \u003d input[1];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            String taskDesc \u003d input[2];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            if (command.equals(\"T\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                dl.addTask(new Todo(taskDesc, isDoneString));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            } else if (command.equals(\"E\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                LocalDate by \u003d LocalDate.parse(input[3]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                dl.addTask((new Event(taskDesc, by, isDoneString)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                LocalDate by \u003d LocalDate.parse(input[3]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                dl.addTask((new Deadline(taskDesc, by, isDoneString)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return dl;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 98
    }
  },
  {
    "path": "src/main/java/duketasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package duketasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * Represents a deadline object that the user has to complete by"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private static final String deadlineTaskCode \u003d \"D\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public Deadline(String desc, LocalDate by) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        super(desc, deadlineTaskCode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public Deadline(String desc, LocalDate by, String isDone) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        this(desc, by);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        if (isDone.equals(\"O\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            this.done();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Used to return a formatted string of the general status of this task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * that is used every time the details of the tasks needs to be printed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @return String of task details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return String.format(\"[%s]%s (by: %s)\", this.taskCode,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                super.toString(), by.format(DateTimeFormatter.ofPattern(\"MMM d yyy\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Return a formatted string to be used to save to file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @return String of task details in the preferred save format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public String getSaveString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return super.getSaveString() + \"|\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                + this.by.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 49
    }
  },
  {
    "path": "src/main/java/duketasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package duketasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * Represents a event object that the user has to complete by"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private static final String eventTaskCode \u003d \"E\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public Event(String desc, LocalDate by) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        super(desc, eventTaskCode);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public Event(String desc, LocalDate by, String isDone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        this(desc, by);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        if (isDone.equals(\"O\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            this.done();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Used to return a formatted string of the general status of this task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * that is used every time the details of the tasks needs to be printed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @return String of task details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return String.format(\"[%s]%s (at: %s)\", this.taskCode,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                super.toString(), this.by.format(DateTimeFormatter.ofPattern(\"MMM d yyy\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Return a formatted string to be used to save to file"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @return String of task details in the preferred save format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public String getSaveString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return super.getSaveString() + \"|\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "                + this.by.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 50
    }
  },
  {
    "path": "src/main/java/duketasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package duketasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * Represents a Task object that is the parent class of Deadline, Event and Todo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    protected String isDoneString;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    protected String taskName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    protected String taskCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Constructor for Task objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param taskName String of task description"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param taskCode String of the task code"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public Task(String taskName, String taskCode) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        this.isDoneString \u003d \"X\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        this.taskCode \u003d taskCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public void done() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        isDoneString \u003d \"O\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public String getIsDoneString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return isDoneString;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Return a formatted string to be used to save to file"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @return String of task details in the preferred save format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public String getSaveString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        String currEntry \u003d String.format(\"%s|%s|%s\", this.taskCode, this.getIsDoneString(), this.getTaskName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return currEntry;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Used to return a formatted string of the general status of this task"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * that is used every time the details of the tasks needs to be printed"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @return String of task details"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        String output \u003d String.format(\"[%s] %s\", isDoneString, taskName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 61
    }
  },
  {
    "path": "src/main/java/duketasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package duketasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " * Represents to-do object that the user has to complete. No deadline"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    private static final String todoTaskCode \u003d \"T\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public Todo(String taskName) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        super(taskName, todoTaskCode);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * Constructs a new To-do object based on the task name and whether it\u0027s done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param taskName String of task description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     * @param isDone boolean of whether the task is done or not"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public Todo(String taskName, String isDone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        this(taskName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        if (isDone.equals(\"O\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            this.done();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        return String.format(\"[%s]%s\", this.taskCode, super.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 31
    }
  },
  {
    "path": "src/test/java/dukelist/DukeListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package dukelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import duketasks.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import duketasks.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import dukeexceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import duketasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class DukeListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public void getNumOfTasksTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        DukeList test \u003d new DukeList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        test.addTask(new Todo(\"feed cat\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        test.addTask(new Deadline(\"2103 IP\", LocalDate.parse((\"2020-01-30\"))));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        assertEquals(2, test.numOfTasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public void markAsDoneTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        DukeList test \u003d new DukeList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        Todo feedCat \u003d new Todo(\"feed cat\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        Deadline IP \u003d new Deadline(\"2103 IP\", LocalDate.parse((\"2020-01-28\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        Event bday \u003d new Event(\"birthday\", LocalDate.parse(\"2020-01-30\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        test.addTask(feedCat);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        test.addTask(IP);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        test.addTask(bday);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "            assertEquals(bday, test.markTaskAsDone(3));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        } catch (DukeException de) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 39
    }
  },
  {
    "path": "src/test/java/duketasks/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package duketasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public void getSaveStringTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        String deadlineDesc \u003d \"2103 tutorial\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        LocalDate deadlineBy \u003d LocalDate.parse(\"2022-01-01\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        String ans \u003d \"D|X|2103 tutorial|2022-01-01\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        Deadline test \u003d new Deadline(deadlineDesc, deadlineBy);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        assertEquals(ans, test.getSaveString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 17
    }
  },
  {
    "path": "src/test/java/duketasks/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "package duketasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public void toStringNotDoneTest() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        String feedCat \u003d \"feed cat\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        Todo notDoneTodo \u003d new Todo(feedCat);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        String ans \u003d \"[T][X] feed cat\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        assertEquals(ans, notDoneTodo.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    public void toStringDoneTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        String feedDog \u003d \"feed dog\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        Todo doneTodo \u003d new Todo(feedDog);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        doneTodo.done();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        String ans \u003d \"[T][O] feed dog\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "        assertEquals(ans, doneTodo.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 23
    }
  },
  {
    "path": "text-ui-test/ACTUAL.TXT",
    "fileType": "TXT",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    Hello I\u0027m Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    What can I do for you?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    Got it I\u0027ve added this task:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "      [T][X] feed cat"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    Got it I\u0027ve added this task:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "      [D][X] submit NOC application (by: Sunday 10pm)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    Got it I\u0027ve added this task:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "      [E][X] project meeting (at: this thursday)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    ____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 19
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    Hello I\u0027m Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    What can I do for you?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    Got it I\u0027ve added this task:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "      [T][X] feed cat"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    Got it I\u0027ve added this task:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "      [D][X] submit NOC application (by: Sunday 10pm)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    Got it I\u0027ve added this task:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "      [E][X] project meeting (at: this thursday)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    ____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 19
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "todo feed cat"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "deadline submit NOC application /by Sunday 10pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "event project meeting /at this thursday"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 3
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "java -classpath ..\\bin; Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ivanteejj"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "ivanteejj": 21
    }
  }
]
