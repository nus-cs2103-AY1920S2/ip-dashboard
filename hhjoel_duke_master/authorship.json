[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "test {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "hhjoel": 42
    }
  },
  {
    "path": "src/main/java/CustomException/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "package CustomException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 7
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Deadline(String description, boolean isDone, LocalDate by) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String convert() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return \"D\" + super.convert() + \" | \" + by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 19
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import CustomException.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Represents a chatbot to store list of things to do. A \u003ccode\u003eDuke\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * a chatbot that stores a list of things to do."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Creates a Duke object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param filePath the filepath to the database.txt"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Duke duke \u003d new Duke(\"./src/main/java/database.txt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Starts running the Duke object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String intro() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return \" ____        _        \\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String getResponse(String input) throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return ui.promptGUI(storage, tasks, input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "hhjoel": 53
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Represents an Event Task. A \u003ccode\u003eEvent\u003c/code\u003e object corresponds to an Event to attend"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    protected LocalDate at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Event(String description, boolean isDone, LocalDate at) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns a string representation of the in the database format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @return a string in the form \"| 1 | description (at: 20-08-09)\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return \"[E]\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + super.toString()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + \" (at: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + at"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns a string representation of the in the database format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @return a string in the form \"| 1 | description | 2020-08-09\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String convert() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return \"E\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + super.convert()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + \" | \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + at;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 39
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Duke duke \u003d new Duke(\"./src/main/java/database.txt\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 27
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                DialogBox.getDukeDialog(duke.intro(), dukeImage)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private void handleUserInput() throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 55
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import CustomException.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * All static methods for parsing data are contained in this class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns a String of the first token input by the user"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param input the string the user types"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @return String of first token input by user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws DukeException if firstWord is not recognised"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static String getFirstWord(String input) throws DukeException{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        int firstSpaceIndex \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (int i \u003d 0; i \u003c input.length(); i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            if (input.charAt(i) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                firstSpaceIndex \u003d i;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        String firstWord;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (firstSpaceIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            firstWord \u003d input;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            firstWord \u003d input.substring(0, firstSpaceIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (!firstWord.equals(\"todo\") \u0026\u0026"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                !firstWord.equals(\"deadline\") \u0026\u0026"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                !firstWord.equals(\"event\") \u0026\u0026"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                !firstWord.equals(\"list\") \u0026\u0026"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                !firstWord.equals(\"listname\") \u0026\u0026"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                !firstWord.equals(\"listdate\") \u0026\u0026"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                !firstWord.equals(\"done\") \u0026\u0026"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                !firstWord.equals(\"delete\") \u0026\u0026"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                !firstWord.equals(\"bye\") \u0026\u0026"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                !firstWord.equals(\"find\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return firstWord;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns description of the task given an input and the starting index of the description"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param input the string the user types"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param start the index of the first character of the description in the string"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @return description of the task"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws DukeException if getSlash throws when there is no slash in input"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static String getDescription(String input, int start) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        int slashIndex \u003d Parser.getSlash(input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return input.substring(start, slashIndex - 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns the date in LocalDate format given an input"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param input the string the user types"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @return date in LocalDate format"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws DukeException if getSlash throws when there is no slash in input"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static LocalDate getDate(String input) throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        int slashIndex \u003d Parser.getSlash(input);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return LocalDate.parse(input.substring(slashIndex + 1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns the index of the slash in the input given an input"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param input the string the user types"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @return index of the slash which indicates the start of the date"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws DukeException if there is no slash in input"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private static int getSlash(String input) throws DukeException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (int i \u003d 0; i \u003c input.length(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            if (input.charAt(i) \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        throw new DukeException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns the index of the task in the list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param input the string the user types"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param type the nature of the command - done, or delete"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @return int index of the task in the list"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws DukeException if unable to parse from string to int"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public static int getIndex(String input, String type) throws DukeException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        int startPos;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (type.equals(\"done\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            startPos \u003d 5;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            startPos \u003d 7;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            String num \u003d input.substring(startPos);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return Integer.parseInt(num) - 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 119
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Represents a wrapper for a File database. A \u003ccode\u003eStorage\u003c/code\u003e object corresponds to a database"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private File database;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Storage(String fileName) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        database \u003d new File(fileName);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns an array of String of all tasks read from the database"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @return an array of String"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws IOException when the file is unable to be read properly"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    // returns an array of String"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public ArrayList\u003cString\u003e load() throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new FileReader(database));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ArrayList\u003cString\u003e contents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        String str;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        while ((str \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            contents.add(str);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return contents;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Writes from memory to the database"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param list represents the list of tasks to be done"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws IOException if unable to create new BufferedWriter from database, or unable to write"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void save(ArrayList\u003cTask\u003e list) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        BufferedWriter bw \u003d new BufferedWriter(new FileWriter(database));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            bw.write(task.convert() + \"\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        bw.flush();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 47
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Represents a task to be done. It stores the description of the task and whether it has been"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * done or not."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns a symbol representing whether the task has been completed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @return a tick (if done) or a cross (if not done)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Marks the task as done"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns a string representation of the task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @return a string representation of the task in the format \"[X] Description\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return \"[\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + getStatusIcon()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + \"] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Returns a string representation of the in the database format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @return a string in the form \"| 1 | description\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String convert() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        int done \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return \" | \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + done"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + \" | \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "class NameComp implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int compare(Task t1, Task t2) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return t1.description.compareTo(t2.getDescription());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return this \u003d\u003d obj;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "class DateComp implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int compare(Task t1, Task t2) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (t1 instanceof ToDo \u0026\u0026 t2 instanceof ToDo) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return t1.description.compareTo(t2.getDescription());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } else if (t1 instanceof ToDo) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } else if (t2 instanceof ToDo) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            LocalDate d1, d2;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            if (t1 instanceof Event) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                d1 \u003d ((Event) t1).at;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                d1 \u003d ((Deadline) t1).by;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            if (t2 instanceof Event) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                d2 \u003d ((Event) t2).at;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                d2 \u003d ((Deadline) t2).by;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return d1.compareTo(d2);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return this \u003d\u003d obj;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 104
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import CustomException.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Represents the task list in memory. A \u003ccode\u003eTaskList\u003c/code\u003e object corresponds to a task list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public TaskList(ArrayList\u003cString\u003e contents) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        load(contents);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Parse all information read from the database into memory"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param contents the array of Strings representing per line in the database"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws DukeException if there\u0027s anything wrong with loading from the contents into memory"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private void load(ArrayList\u003cString\u003e contents) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            for (String str : contents) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                char type \u003d str.charAt(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                boolean done \u003d Boolean.parseBoolean(str.substring(4, 5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                String description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                String byAt;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                // To Do"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                if (type \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    description \u003d str.substring(8);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    list.add(new ToDo(description, done));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    int lastIndex \u003d findThirdStrike(str) - 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    description \u003d str.substring(8, lastIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    byAt \u003d str.substring(lastIndex + 3);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    if (type \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        list.add(new Deadline(description, done, LocalDate.parse(byAt)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    } else if (type \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        list.add(new Event(description, done, LocalDate.parse(byAt)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void save(Storage storage) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        storage.save(list);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private int findThirdStrike(String str) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        int count \u003d 3;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (int i \u003d 0; i \u003c str.length(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            if (str.charAt(i) \u003d\u003d \u0027|\u0027) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                count--;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String displayGUI() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        StringBuilder ret \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            ret.append(i + 1).append(\". \").append(list.get(i).toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return ret.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String displayGUI(char key) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (key \u003d\u003d \u0027n\u0027) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            list.sort(new NameComp());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } else if (key \u003d\u003d \u0027d\u0027) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            list.sort(new DateComp());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        StringBuilder ret \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            ret.append(i + 1).append(\". \").append(list.get(i).toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return ret.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String displayGUI(ArrayList\u003cInteger\u003e indices) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        StringBuilder ret \u003d new StringBuilder(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (int i \u003d 0; i \u003c indices.size(); i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            ret.append(i + 1).append(\". \").append(list.get(indices.get(i)).toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return ret.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void add(String description, boolean isDone) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        list.add(new ToDo(description, isDone));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void add(char type, String description, boolean isDone, LocalDate date) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        if (type \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            list.add(new Deadline(description, isDone, date));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } else if (type \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            list.add(new Event(description, isDone, date));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            System.out.println(\"Error: type must be \u0027D\u0027 or \u0027E\u0027\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Task get(int i) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return list.get(i);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void markAsDone(int index) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        list.get(index).markAsDone();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Task delete(int index) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return list.remove(index);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String find(String key) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ArrayList\u003cInteger\u003e indices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            String desc \u003d list.get(i).getDescription();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            if (desc.contains(key)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                indices.add(i);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return displayGUI(indices);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 154
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String convert() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return \"T\" + super.convert();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 14
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import CustomException.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " * Represents the main UI for communicating with user. A \u003ccode\u003eUi\u003c/code\u003e object corresponds to a UI"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Prints when an exception is caught during loading"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        System.out.println(\"Loading Error\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Prints the task added when a task has been successfully added to the task list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param tasks the list of tasks in memory"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    private String printAddedGUI(TaskList tasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        String ret \u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ret +\u003d \"\\t\" + tasks.get(tasks.size() - 1).toString() + \"\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ret +\u003d \"Now you have \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + tasks.size()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + \"tasks in the list.\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * Main loop of the chatbot, continuously loops to ask for input until user inputs \"bye\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param storage the storage media, representing the .txt file as database"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @param tasks the list of tasks in memory"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     * @throws IOException if tasks.save() throws an exception"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public String promptGUI(Storage storage, TaskList tasks, String userInput) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        String firstWord;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        // Guarantees 1st word is legitimate"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            firstWord \u003d Parser.getFirstWord(userInput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return \"Oops!! I\u0027m sorry, but I don\u0027t know what that means :(\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        switch (firstWord) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return tasks.displayGUI();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        case \"listname\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return tasks.displayGUI(\u0027n\u0027);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        case \"listdate\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return tasks.displayGUI(\u0027d\u0027);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            if (userInput.length() \u003e 5) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                int original \u003d tasks.size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                tasks.add(userInput.substring(5), false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                assert tasks.size() \u003d\u003d original + 1: \"Task list not updated\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                tasks.save(storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                return printAddedGUI(tasks);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                return \"No todo task specified!\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        case \"deadline\":    // deadline description /yyyy-mm-dd"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            if (userInput.length() \u003e 9) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    String description \u003d Parser.getDescription(userInput, 9);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    LocalDate date \u003d Parser.getDate(userInput);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    int original \u003d tasks.size();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    tasks.add(\u0027D\u0027, description, false, date);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    assert tasks.size() \u003d\u003d original + 1: \"Task list not updated\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    tasks.save(storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    return printAddedGUI(tasks);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    return \"Error: incorrect format to add deadline task\\n\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                return \"No deadline task specified!\\n\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        case \"event\":   // event description /yyyy-mm-dd"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            if (userInput.length() \u003e 6) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    String description \u003d Parser.getDescription(userInput, 6);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    LocalDate date \u003d Parser.getDate(userInput);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    int original \u003d tasks.size();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    tasks.add(\u0027E\u0027, description, false, date);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    assert tasks.size() \u003d\u003d original + 1: \"Task list not updated\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    tasks.save(storage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    return printAddedGUI(tasks);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                    return \"Error: incorrect format to add deadline task\\n\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                return \"Error: no deadline task specified\\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                int index \u003d Parser.getIndex(userInput, \"done\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                tasks.markAsDone(index);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                return \"Nice! I\u0027ve marked this task as done: \\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        + \"\\t\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        + tasks.get(index).toString()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        + \"\\n\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                return \"Error: invalid (out of bounds) or non-integer entered\\n\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                int original \u003d tasks.size();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                int index \u003d Parser.getIndex(userInput, \"delete\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                Task rm \u003d tasks.delete(index);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                tasks.save(storage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                assert tasks.size() \u003d\u003d original - 1: \"Task list not updated\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                return \"Noted. I\u0027ve removed this task: \\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        + \"\\t\" + rm.toString()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        + \"Now you have \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        + tasks.size()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                        + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                System.out.println(\"Error: invalid (out of bounds) or non-integer entered\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            if (userInput.length() \u003e 5) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                String key \u003d userInput.substring(5);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                return tasks.find(key);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "                return \"No search string specified!\\n\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "            return \"Oops!! I\u0027m sorry, but I don\u0027t know what that means :(\\n\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 150
    }
  },
  {
    "path": "src/main/java/database.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "T | 0 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "D | 0 | return book | 2020-11-11"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "E | 0 | project meeting | 2020-06-06"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "T | 0 | join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "T | 0 | helloworld"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "E | 0 | safasf | 2020-04-02"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 6
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.141\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.141\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 19
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void dummyTest() throws IOException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Deadline test1 \u003d new Deadline(\"Run\", true, LocalDate.parse(\"2020-09-09\"));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertEquals(\"[D][✓] Run (by: 2020-09-09)\", test1.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertEquals(\"D | 1 | Run | 2020-09-09\", test1.convert());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 14
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import org.junit.jupiter.api.DynamicTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void dummyTest() throws IOException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        Duke duke \u003d new Duke(\"./src/main/java/database.txt\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 14
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    public void dummyTest() throws IOException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        ToDo test1 \u003d new ToDo(\"Run\", false);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertEquals(\"[T][✘] Run\", test1.toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "        assertEquals(\"T | 0 | Run\", test1.convert());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 13
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "Hello from"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "Bye. Hope to see you again soon!"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 8
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hhjoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hhjoel"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "hhjoel": 21
    }
  }
]
