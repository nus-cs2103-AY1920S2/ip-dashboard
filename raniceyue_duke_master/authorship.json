[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "duke.Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for duke.Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "raniceyue": 2,
      "-": 37
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\tid \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\ttoolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\tString javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "test {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 43,
      "-": 19
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "[D][ ] assignment /by 2020-02-01 2359"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "[E][ ] formal dinner /at 2020-02-01 1800"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 2
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "This guide covers the features and usage of the Aeugh, Ranice\u0027s Duke Project... application."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "1. [Purpose](#purpose)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "2. [Features](#features)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "3. [Usage](#usage)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "   1. [Adding Tasks](#adding-tasks)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "      1. [`todo`](#todo---adds-to-do-task-into-task-list)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "      2. [`deadline`](#deadline---adds-deadline-task-into-task-list)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "      3. [`event`](#event---adds-event-task-into-task-list)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "   2. [Task List Manipulation](#task-list-manipulation)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "      1. [`list`](#list---prints-out-entire-task-list)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "      2. [`find`](#find---helps-to-search-for-a-task-in-the-task-list-given-keywords)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "      3. [`done`](#done---marks-a-task-as-done-in-the-task-list)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "      4. [`delete`](#delete---deletes-a-task-from-the-task-list)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "## Purpose"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "Aeugh, Ranice\u0027s Duke Project... is a simple task managing application. It features a simple Graphical User Interface (GUI) and Command Line Interface (CLI) for user commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003cimg src\u003d\"Ui.png\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "This application was developed for the CS2103T individual project assignment."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "+ ### Task Types: To Dos, Deadlines, and Events"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "There are 3 different types of tasks that can recorded by the task list: To Dos, Deadlines, and Events. To Dos are tasks that are not bounded by a date and time. Deadlines and Events are bounded by a date and time. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "+ ### Task List "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "This application has an in bult task list that keeps track of all tasks. Each task is assigned an index number dependant on the time at which the task was added into the list, in ascending order. The task list also keeps track of the status of each task, if the task has been completed or not. Tasks can be mark as done, as well as removed from the list. The task list can be printed out into the GUI for user viewing, and the task list features a simple search function to search for tasks in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "+ ### Data Saving"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "When first using this application, a data file named `dukeData.txt` will be created alongside the executable, for storing data. Task list data is written into this file to be loaded into the application in every session. At the end of the session, all changes to the task list will be written back to the data file for use in subsequent sessions."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "This application is used through a command line interface. You are required to enter commands into a text box to add tasks and manipulate the task list. Entered commands will be echoed into the chat box, afterwhich, the application will output the outcome of your command. "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "### Adding Tasks"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "+ #### `todo` - Adds \u0027To Do\u0027 task into task list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  This command adds a To Do type task into the task list. \u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  It has 1 parameter, `task name`, for the name of the task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  Example of Usage: "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  |Syntax|Example|"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  |------|-------|"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  |`todo (task name)`| `todo homework`|"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  Example of Outcome:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  The program will confirm the addition of the task and echo the details of the added task in the chat box.\u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  It will also output the resultant number of tasks in your task list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003cimg src\u003d\"images/todoDemo.png\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "+ #### `deadline` - Adds \u0027Deadline\u0027 task into task list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  This command adds a Deadline type task into the task list. \u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  It has 3 parameters, `task name`, for the name of the task, `date` and `time` for the deadline."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  Example of Usage: "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  |Syntax|Example|"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  |------|-------|"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  |`deadline (task name)` **`/by`** `[date] [time]`|`deadline assignment` **`/by`** `2020-02-01 2359`||"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003e \u0026#10071; **Important to Note** \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003e Please enter the date and time in the `YYYY-MM-DD HHMMM` format."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  Example of Outcome:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  The program will confirm the addition of the task and echo the details of the added task in the chat box.\u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  It will also output the resultant number of tasks in your task list.\u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003cimg src\u003d\"images/deadlineDemo.png\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "+ #### `event` - Adds \u0027Event\u0027 task into task list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  This command adds an Event type task into the task list. \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  It has 3 parameters, `task name`, for the name of the task, `date` and `time` of the event."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  Example of Usage: "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  |Syntax|Example|"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  |------|-------|"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  |`event (task name)` **`/at`** `[date] [time]`|`event formal dinner` **`/at`** `2020-02-01 2359`||"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003e \u0026#10071; **Important to Note** \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003e Please enter the date and time in the `YYYY-MM-DD HHMMM` format."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  Example of Outcome:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  The program will confirm the addition of the task and echo the details of the added task in the chat box. \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  It will also output the resultant number of tasks in your task list.\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003cimg src\u003d\"images/eventDemo.png\"\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "### Task List Manipulation"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "+ #### `list` - Prints out entire task list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  This command helps to display entire task list for user viewing in the GUI."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  Example of Usage:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  |Syntax|Example|"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  |------|-------|"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  |`list`| `list`|"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  Example of Outcome:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  The program will print out the entire task list into the chat box, including the index and status of the task.\u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003cimg src\u003d\"images/listDemo.png\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "+ #### `find` - Helps to search for a task in the task list given keywords."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  This command helps to search for a task in the task list given a singular keyword. \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  The tasks are searched by their task names, and any task with a task name containing the specified keyword, will be listed out in the GUI for user viewing."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  Example of Usage:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  |Syntax|Example|"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  |------|-------|"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  |`find [keyword]`| `find dinner`|"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  Example of Outcome:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  The program will print out a list of results containing tasks with tasknames containing the `keyword` substring.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003cimg src\u003d\"images/findDemo.png\"\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "+ #### `done` - Marks a task as \u0027done\u0027 in the task list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  This command helps to mark a task as \u0027done\u0027 in the task list, given the index of the task to be marked as \u0027done\u0027."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  Example of Usage:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  |Syntax|Example|"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  |------|-------|"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  |`delete [task index]`| `done 1`|"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003e \u0026#10071; **Important to Note** \u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003e Please enter an index that is within the number of items in the task list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  Example of Outcome:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  The program will confirm the completion of the task and echo the details of the task.\u003cbr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003cimg src\u003d\"images/doneDemo.png\"\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "+ #### `delete` - Deletes a task from the task list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  This command helps to delete tasks from the task list, given the index of the task to be deleted."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  Example of Usage:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  |Syntax|Example|"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  |------|-------|"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  |`delete [task index]`| `delete 1`|"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003e \u0026#10071; **Important to Note** \u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003e Please enter an index that is within the number of items in the task list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  Example of Outcome:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  The program will confirm the deletion of the task and echo the details of the deleted task.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003cimg src\u003d\"images/deleteDemo.png\"\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "raniceyue": 176,
      "-": 14
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        dialog.setMinHeight(Region.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Creates a dialog box for Duke."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param text String to be displayed"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param img Image representing Duke."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return DialogBox to be displayed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 67
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * A GUI for duke.Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            VBox ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            stage.getIcons().add(new Image(\"/images/crab1.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            stage.setTitle(\"Aeugh, Ranice\u0027s Duke Project..\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 33
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Image greetingImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/vibe_check.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/pufferfish.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/doyoufart.jpg\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Initializes chat box GUI with welcome message and welcome image."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(Ui.welcomeMsg(), greetingImage));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing duke.Duke\u0027s reply and then appends them"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 57
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Initializes and creates new Duke object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Processes user input and returns a string containing response of Duke program."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param input user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return string to be printed onto chat box GUI."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            assert !input.isEmpty() : \"YOU DIDN\u0027T SAY ANYTHING!!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            Command c \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return c.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 44
    }
  },
  {
    "path": "src/main/java/duke/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents the command \u0027bye\u0027."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Executes \u0027bye\u0027 command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskList task list in running program."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param ui ui handling running program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param storage storage handling running program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return ui.exitMsg();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Compares and checks if commands are equal."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param command object to compare command to."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return boolean stating if this command and command are equal."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object command) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return command instanceof ByeCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 31
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeBadIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeDuplicateTaskException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeWriteFailException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public abstract String execute("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            TaskList taskList, Ui ui, Storage storage) throws DukeBadIndexException, DukeWriteFailException,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            DukeDuplicateTaskException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 15
    }
  },
  {
    "path": "src/main/java/duke/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeDuplicateTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeWriteFailException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents the command \u0027deadline\u0027."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    String taskName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    String dateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Creates a command to create a Deadline task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskName name of deadline."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param dateTime date and time of deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DeadlineCommand(String taskName, String dateTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assert !taskName.isEmpty();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Executes \u0027deadline\u0027 command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskList task list in running program."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param ui ui handling running program."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param storage storage handling running program."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws DukeWriteFailException in the event that new task cannot be written back to file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            TaskList taskList, Ui ui, Storage storage) throws DukeWriteFailException, DukeDuplicateTaskException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Deadline t \u003d new Deadline(taskName, dateTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!taskList.isDuplicate(t)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            taskList.addTask(t);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            storage.write(taskList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return Ui.setBorder(\"ADDED : \\n\\n\" + t.toString() + \"\\n\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    + \"\\tYou now have \" + taskList.numTasks() + \" item(s) on your list.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DukeDuplicateTaskException(t);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Compares and checks if commands are equal."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param command object to compare command to."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return boolean stating if this command and command are equal."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object command) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (command instanceof DeadlineCommand) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (((DeadlineCommand) command).taskName.equals(this.taskName)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return ((DeadlineCommand) command).dateTime.equals(this.dateTime);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 66
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeBadIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeWriteFailException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Executes \u0027delete\u0027 command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskList task list in running program."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param ui ui handling running program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param storage storage handling running program."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws DukeWriteFailException in the event that new task cannot be written back to file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws DukeBadIndexException if index is \u003c\u003d0 or greater than the number of tasks in the task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            TaskList taskList, Ui ui, Storage storage) throws DukeBadIndexException, DukeWriteFailException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!(index \u003e taskList.numTasks())) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            String t \u003d taskList.getList().get(index - 1).toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            taskList.deleteTask(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            storage.write(taskList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return Ui.setBorder(\"OK, I\u0027ve removed the task:\\n\\n\" + t + \"\\n\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    + \"\\tYou now have \" + (taskList.getList().size()) + \" task(s) on your list.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DukeBadIndexException(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Compares and checks if commands are equal."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param command object to compare command to."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return boolean stating if this command and command are equal."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object command) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (command instanceof DeleteCommand) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return this.index \u003d\u003d ((DeleteCommand) command).index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 51
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeBadIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeWriteFailException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Executes \u0027done\u0027 command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskList task list in running program."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param ui ui handling running program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param storage storage handling running program."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws DukeWriteFailException in the event that new task cannot be written back to file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws DukeBadIndexException if index is \u003c\u003d0 or greater than the number of tasks in the task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            TaskList taskList, Ui ui, Storage storage) throws DukeBadIndexException, DukeWriteFailException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        taskList.setDone(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        storage.write(taskList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return Ui.setBorder(\"I\u0027ve marked (\" + index + \") as done!\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + \"\\t(\" + index + \") \" + taskList.getList().get(index - 1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Compares and checks if commands are equal."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param command object to compare command to."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return boolean stating if this command and command are equal."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object command) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (command instanceof DoneCommand) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return this.index \u003d\u003d ((DoneCommand) command).index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 45
    }
  },
  {
    "path": "src/main/java/duke/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeDuplicateTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeWriteFailException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents the command \u0027event\u0027."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected String taskName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected String dateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructor for EventCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskName name of event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param dateTime date and time of event occurrence."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public EventCommand(String taskName, String dateTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assert !taskName.isEmpty();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Executes \u0027event\u0027 command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskList task list in running program."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param ui ui handling running program."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param storage storage handling running program."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws DukeWriteFailException if the program fails to write the modified data to the storage file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            TaskList taskList, Ui ui, Storage storage) throws DukeWriteFailException, DukeDuplicateTaskException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Event t \u003d new Event(taskName, dateTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!taskList.isDuplicate(t)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            taskList.addTask(t);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            storage.write(taskList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return Ui.setBorder(\"ADDED : \\n\\n\" + t.toString() + \"\\n\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    + \"\\tYou now have \" + taskList.numTasks() + \" item(s) on your list.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DukeDuplicateTaskException(t);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Compares and checks if commands are equal."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param command object to compare command to."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return boolean stating if this command and command are equal."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object command) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (command instanceof EventCommand) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (((EventCommand) command).taskName.equals(this.taskName)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return ((EventCommand) command).dateTime.equals(this.dateTime);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 65
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    String keyword;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assert !keyword.isEmpty();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Executes \u0027find\u0027 command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskList task list in running program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param ui ui handling running program."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param storage storage handling running program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        TaskList results \u003d taskList.search(keyword);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String toPrint \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (results.numTasks() \u003e 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            toPrint +\u003d \"Here are the matching tasks in your list!!\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            for (int i \u003d 0; i \u003c results.numTasks(); i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                toPrint +\u003d \"(\" + (i + 1) + \") \" + results.getList().get(i) + \"\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else if (results.numTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            toPrint +\u003d \"There are no matching results in your list.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else if (taskList.numTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            toPrint +\u003d \"You have nothing on your list.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return Ui.setBorder(toPrint);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Compares and checks if commands are equal."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param command object to compare command to."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return boolean stating if this command and command are equal."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object command) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return command instanceof FindCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 46
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents the command \u0027list\u0027."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructor for ListCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Executes \u0027list\u0027 command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskList task list in running program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param ui ui handling running program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param storage storage handling running program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return taskList.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Compares and checks if commands are equal."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param command object to compare command to."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return boolean stating if this command and command are equal."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object command) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return command instanceof ListCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 38
    }
  },
  {
    "path": "src/main/java/duke/commands/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeDuplicateTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeWriteFailException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents the command \u0027todo\u0027."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    String taskName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructor for ToDoCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskName name of task to be done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ToDoCommand(String taskName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assert !taskName.isEmpty();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Executes\u0027todo\u0027 command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskList task list in running program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param ui ui handling running program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param storage storage handling running program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws DukeWriteFailException if the program fails to write the modified data to the storage file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String execute("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            TaskList taskList, Ui ui, Storage storage) throws DukeWriteFailException, DukeDuplicateTaskException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ToDo t \u003d new ToDo(taskName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!taskList.isDuplicate(t)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            taskList.addTask(t);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            storage.write(taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return Ui.setBorder(\"ADDED : \\n\\n\" + t.toString() + \"\\n\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    + \"\\tYou now have \" + taskList.numTasks() + \" item(s) on your list.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DukeDuplicateTaskException(t);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Compares and checks if commands are equal."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param command object to compare command to."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return boolean stating if this command and command are equal."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object command) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (command instanceof ToDoCommand) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return this.taskName.equals(((ToDoCommand) command).taskName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 58
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeBadDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Handles date inputs that are not formatted correctly."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeBadDateException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeBadDateException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.message \u003d \"The date you have entered is in a bad format!\\n\\tPlease use the format YYYY-MM-DD.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 10
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeBadDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Handles date and time inputs that are not formatted correctly."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeBadDateTimeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeBadDateTimeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.message \u003d \"The date and time you entered is in a bad format!\\n\\tPlease use the format YYYY-MM-DD HHMM.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 10
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeBadFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Handles when text in data file is not formatted correctly."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeBadFileException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeBadFileException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.message \u003d \"The file you are trying to load is not in the correct format!!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 10
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeBadIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Handles indices that are out of range."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeBadIndexException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Method to customise exception message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param index of input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeBadIndexException(int index) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (index \u003c 0) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            super.message \u003d \"You can\u0027t enter a negative index!!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else if (index \u003d\u003d 0) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            super.message \u003d \"There is no index 0 ://\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            super.message \u003d \"I don\u0027t think you have that many tasks my dude.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 20
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeBadPathException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Handles event where path to data file does not exist."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeBadPathException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeBadPathException(Path path) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.message \u003d \"The path \" + path + \" does not exist!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 12
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeDuplicateTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Handles event where user tries to add a duplicate task to task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeDuplicateTaskException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Customises exception message according to task specified."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param t task specified."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeDuplicateTaskException(Task t) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (t instanceof Event) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            super.message \u003d \"DUPLICATE TASK!!\\n\" + t.getTaskName() + \" @ \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    + ((Event) t).getDateTime() + \" is already in the task list!!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            super.message \u003d \"DUPLICATE TASK!!\\n\" + t.getTaskName() + \" by \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    + ((Deadline) t).getDateTime() + \" is already in the task list!!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            super.message \u003d \"DUPLICATE TASK!!\\n\" + t.getTaskName() + \" is already in the task list!!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 26
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Generalises exceptions for the duke.Duke program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected String message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String output \u003d Ui.setBorder(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 16
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeFileCreationException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeFileCreationException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeFileCreationException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.message \u003d \"Data file could not be created!!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 7
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeNoDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Handles event where command is missing date input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeNoDateException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Customises exception message according to task name."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskName name of task with missing date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeNoDateException(String taskName) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (taskName.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            super.message \u003d \"Doesn\u0027t a deadline have a date?? Aren\u0027t you forgetting something??\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            super.message \u003d \"When is this even supposed to happen? You forgot the date!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 18
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeNoDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Handles event where command to create task has no description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeNoDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeNoDescriptionException(String taskName) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.message \u003d \"You need to specify more details for task \" + taskName + \"!!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 10
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeNoIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Handles event where commands to manipulate list have no index provided."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeNoIndexException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructor for DukeNoIndexException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param command string indicating command to be used in custom exception message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeNoIndexException(String command) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (command.equals(\"delete\")) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            super.message \u003d \"You forgot to tell me what to delete!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            super.message \u003d \"You forgot to tell me what to mark as done!!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 19
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeNoKeywordException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeNoKeywordException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeNoKeywordException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.message \u003d \"You forgot to tell me what to look for!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 7
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeUnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Handles unexpected input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeUnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeUnknownCommandException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.message \u003d \"What the hell are you saying?? I don\u0027t get you...\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 10
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeWriteFailException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Handles event where modified data cannot be written back into data file."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeWriteFailException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeWriteFailException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.message \u003d \"For some reason, I was unable to write the changes back to the data file!! :O\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 10
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected String rawDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructor for Deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskName name of deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param dateTime date and time of deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Deadline(String taskName, String dateTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String[] dt \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.rawDate \u003d dt[0];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.date \u003d LocalDate.parse(getRawDate());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.time \u003d dt[1];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return getDate() + \" @ \" + getTime();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getRawDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return rawDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return \"[D]\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String writeFormat() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return getType() + getStatus() + \" \" + getTaskName() + \" /by \" + getRawDate() + \" \" + getTime();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object task) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (((Deadline) task).getTaskName().equals(this.getTaskName())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return ((Deadline) task).getDateTime().equals(this.getDateTime());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return \"[D]\" + super.toString() + \" (due by: \" + getDateTime() + \")\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 65
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected String rawDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructor for Event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskName name of event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param dateTime date and time when event occurs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Event(String taskName, String dateTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String[] dt \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.rawDate \u003d dt[0];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.date \u003d LocalDate.parse(getRawDate());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.time \u003d dt[1];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return getDate() + \" @ \" + getTime();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getRawDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return rawDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return \"[E]\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String writeFormat() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return getType() + getStatus() + \" \" + getTaskName() + \" /at \" + getRawDate() + \" \" + getTime();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object task) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (task instanceof Event) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (((Event)task).getTaskName().equals(this.getTaskName())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return (((Event) task).getDateTime().equals(this.getDateTime()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + getDateTime() + \")\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 65
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected String taskName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected Boolean status;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructs new task object with name taskName."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskName name of new task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Task(String taskName) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assert !taskName.isEmpty();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.status \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Method to get status of a task as a string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return string indicating if the task is done or not."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (status) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return \"[X]\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return \"[ ]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.status \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (status) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return \"[X] \" + getTaskName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return \"[ ] \" + getTaskName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 45
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeBadIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public int numTasks() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public int getTaskIndex(Task t) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return getList().indexOf(t) + 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Method to add a task into the task list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param task task to be added into list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        getList().add(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Method to mark task at a specified index as done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param index of task to be marked as done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws DukeBadIndexException if the index is negative or out of range."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setDone(int index) throws DukeBadIndexException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (index \u003e numTasks()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DukeBadIndexException(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        getList().get(index - 1).setDone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Method to delete task at a specified index."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param index of task to be deleted."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws DukeBadIndexException if the index is negative or out of range."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void deleteTask(int index) throws DukeBadIndexException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (index \u003e numTasks()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DukeBadIndexException(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Task t \u003d getList().get(index - 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        getList().remove(t);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Method to search for tasks in a task list that have a task name that matches a keyword."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param keyword to be searched for."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return TaskList containing tasks with task name that contains keyword."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TaskList search(String keyword) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ArrayList\u003cTask\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (t.getTaskName().contains(keyword)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                results.add(t);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return new TaskList(results);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Checks if task list contains task task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param task to be checked"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return boolean indicating if diplicate exists in task list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean isDuplicate(Task task) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        boolean isDuplicate \u003d false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        for (Task e : getList()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (e.equals(task)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                isDuplicate \u003d true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return isDuplicate;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String toPrint \u003d \"\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (numTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            toPrint \u003d Ui.setBorder(\"You have nothing on your list.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            StringBuilder msg \u003d new StringBuilder(\"Here is your list:\\n\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            for (Task e : list) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                msg.append(\"(\").append(getTaskIndex(e)).append(\") \").append(e.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            toPrint +\u003d Ui.setBorder(msg.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return toPrint;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 109
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ToDo(String taskName) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return \"[T]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return ((ToDo) task).getTaskName().equals(this.getTaskName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 26
    }
  },
  {
    "path": "src/main/java/duke/util/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.commands.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.commands.EventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.commands.ToDoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeBadDateException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeBadDateTimeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeBadFileException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeBadIndexException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeNoDateException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeNoDescriptionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeNoIndexException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeNoKeywordException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeUnknownCommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Parses single command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param s string to be parsed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return parsed command as a Command object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws DukeException if the command is invalid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static Command parseCommand(String s) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Scanner sc \u003d new Scanner(s);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String w1 \u003d sc.next();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        switch (w1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (sc.hasNext()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return new FindCommand(sc.next());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                throw new DukeNoKeywordException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (sc.hasNextInt()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                int index \u003d sc.nextInt();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                isValidIndex(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return new DoneCommand(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                throw new DukeNoIndexException(w1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (sc.hasNextInt()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                int index \u003d sc.nextInt();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                isValidIndex(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return new DeleteCommand(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                throw new DukeNoIndexException(w1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (!sc.hasNextLine()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                throw new DukeNoDescriptionException(w1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return new ToDoCommand(sc.nextLine());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (!sc.hasNextLine()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                throw new DukeNoDescriptionException(w1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                String task \u003d sc.nextLine().strip();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                String[] details \u003d task.split(\" /at \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                if (details.length \u003c 2) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    throw new DukeNoDateException(w1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    isValidDateTime(details[1]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    return new EventCommand(details[0], details[1]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (!sc.hasNextLine()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                throw new DukeNoDescriptionException(w1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                String task \u003d sc.nextLine().strip();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                String[] details \u003d task.split(\" /by \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                if (details.length \u003c 2) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    throw new DukeNoDateException(w1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    isValidDateTime(details[1]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    return new DeadlineCommand(details[0], details[1]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Parses a line in the storage file."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param e string to be parsed."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return parsed data in storage file as a Task object."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws DukeException if the data in the file is in the wrong format and cannot be parsed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static Task parseFileLine(String e) throws DukeException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            assert !e.isEmpty() : \"FILE CONTAINS EMPTY STRING!\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            String taskType \u003d e.substring(0, 3);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            String taskStatus \u003d e.substring(3, 6);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            String taskDetails \u003d e.substring(7);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            Task t;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            case \"[T]\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                t \u003d new ToDo(taskDetails);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            case \"[E]\": {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                String[] details \u003d taskDetails.split(\" /at \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                t \u003d new Event(details[0], details[1]);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            case \"[D]\": {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                String[] details \u003d taskDetails.split(\" /by \");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                t \u003d new Deadline(details[0], details[1]);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                throw new DukeBadFileException();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (taskStatus.equals(\"[X]\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                t.setDone();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return t;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } catch (Exception t) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DukeBadFileException();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    IMPORTANT: parseFileLine incomplete, not all edge cases accounted for."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Checks if index input by user is within a valid range."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param index to be checked."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws DukeBadIndexException if the index is out of range."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static void isValidIndex(int index) throws DukeBadIndexException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DukeBadIndexException(index);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Checks if date and time input by user is in the correct format."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param dateTime string to be checked"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws DukeBadDateException if the date is in the wrong format."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws DukeBadDateTimeException if the date and time are in the wrong format."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private static void isValidDateTime(String dateTime) throws DukeBadDateException, DukeBadDateTimeException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String[] p \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (p.length \u003c 2) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DukeBadDateTimeException();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            String date \u003d p[0];"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            String time \u003d p[1];"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            int timeInt \u003d Integer.parseInt(time);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            assert (timeInt \u003e\u003d 0 \u0026\u0026 timeInt \u003c 2400) : \"Time is in the wrong format\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            String[] dateParsed \u003d date.split(\"-\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (dateParsed.length \u003c 3) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                throw new DukeBadDateException();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 179
    }
  },
  {
    "path": "src/main/java/duke/util/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeBadPathException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeFileCreationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeWriteFailException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents object that handles storage and loading of data from storage file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Path dataFilePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructor for Storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Storage() throws IOException, DukeFileCreationException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String home \u003d System.getProperty(\"user.dir\");                   // Path to current directory."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.dataFilePath \u003d Paths.get(home, \"duke.txt\"); // Create Path object for data/duke.txt"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (!Files.exists(dataFilePath)) {                              // if file does not exist yet"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            File dataFile \u003d new File(dataFilePath.toString());          // create new file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (!dataFile.createNewFile()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                throw new DukeFileCreationException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Loads data from the storage file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return array list containing tasks loaded from storage file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws DukeException if the path is invalid and data cannot be loaded."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            List\u003cString\u003e loadedData \u003d Files.readAllLines(dataFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            for (String e : loadedData) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                if (loadedData.isEmpty() || e.isBlank()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                list.add(Parser.parseFileLine(e));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DukeBadPathException(dataFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Writes changes back into storage file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskList task list to be written back into file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws DukeWriteFailException if the data fails to be written into file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void write(TaskList taskList) throws DukeWriteFailException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        StringBuilder toWrite \u003d new StringBuilder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        for (Task e : taskList.getList()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (e instanceof ToDo) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                toWrite.append(e.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else if (e instanceof Event) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                toWrite.append(((Event) e).writeFormat()).append(\"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else if (e instanceof Deadline) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                toWrite.append(((Deadline) e).writeFormat()).append(\"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            FileWriter fw \u003d new FileWriter(dataFilePath.toFile());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            bw.write(toWrite.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DukeWriteFailException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 92
    }
  },
  {
    "path": "src/main/java/duke/util/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String border \u003d \"\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d\\n\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static String setBorder(String msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return border + \"\\n\\t\" + msg + \"\\n\\n\" + border;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Returns string containing welcome message for start of program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static String welcomeMsg() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return \"Greetings mortal, my name is\\n\" + logo + \"How may I help you?\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String exitMsg() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return setBorder(\"See u the next time you test ur code :P\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 30
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" wrapText\u003d\"true\" maxHeight\u003d\"Infinity\" rotate\u003d\"2.0\" text\u003d\"Label\" textFill\u003d\"#cd3d3d\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003cInsets left\u003d\"20.0\" right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 22
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.effect.InnerShadow?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.shape.*?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003cVBox prefHeight\u003d\"593.0\" prefWidth\u003d\"808.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    \u003cAnchorPane maxHeight\u003d\"-1.0\" maxWidth\u003d\"-1.0\" prefHeight\u003d\"-1.0\" prefWidth\u003d\"-1.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003cAnchorPane layoutX\u003d\"2.0\" layoutY\u003d\"28.0\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"565.0\" prefWidth\u003d\"798.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"15.0\" layoutY\u003d\"524.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"27.0\" prefWidth\u003d\"448.0\" AnchorPane.bottomAnchor\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u003cButton fx:id\u003d\"sendButton\" depthTest\u003d\"ENABLE\" layoutX\u003d\"477.0\" layoutY\u003d\"523.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"27.0\" prefWidth\u003d\"72.0\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                        \u003cFont name\u003d\"DejaVu Sans Mono Bold\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                        \u003cInnerShadow /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                  \u003c/Button\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutX\u003d\"14.0\" layoutY\u003d\"9.0\" prefHeight\u003d\"505.0\" prefWidth\u003d\"543.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"502.0\" prefWidth\u003d\"519.0\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                           \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                              \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                           \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                           \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                              \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                           \u003c/padding\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                     \u003c/content\u003e\u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                  \u003cText layoutX\u003d\"566.0\" layoutY\u003d\"136.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Bruh im just gonna level with u, it aint easy being the pacman.. my wife and kids have left me, send help\" wrappingWidth\u003d\"217.8740234375\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                  \u003cArc fill\u003d\"#e3cc4f\" layoutX\u003d\"624.0\" layoutY\u003d\"63.0\" length\u003d\"270.0\" radiusX\u003d\"51.0\" radiusY\u003d\"49.0\" startAngle\u003d\"45.0\" stroke\u003d\"#e3cc4f\" strokeType\u003d\"INSIDE\" type\u003d\"ROUND\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                  \u003cCylinder cullFace\u003d\"FRONT\" drawMode\u003d\"LINE\" height\u003d\"100\" layoutX\u003d\"617.0\" layoutY\u003d\"247.0\" radius\u003d\"20\" rotate\u003d\"45.0\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                     \u003crotationAxis\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                        \u003cPoint3D x\u003d\"100.0\" y\u003d\"50.0\" z\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                     \u003c/rotationAxis\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                  \u003c/Cylinder\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                  \u003cCylinder drawMode\u003d\"LINE\" height\u003d\"100\" layoutX\u003d\"636.0\" layoutY\u003d\"277.0\" radius\u003d\"20\" rotate\u003d\"90.0\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                     \u003crotationAxis\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                        \u003cPoint3D x\u003d\"100.0\" y\u003d\"200.0\" z\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                     \u003c/rotationAxis\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                  \u003c/Cylinder\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                  \u003cPolygon fill\u003d\"DODGERBLUE\" layoutX\u003d\"686.0\" layoutY\u003d\"60.0\" points\u003d\"-48.0, 42.0, -23.0, 52.0, -23.0, 26.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                  \u003cPolygon fill\u003d\"DODGERBLUE\" layoutX\u003d\"592.0\" layoutY\u003d\"61.0\" points\u003d\"25.0, 51.0, 50.0, 40.0, 25.0, 26.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                  \u003cSphere cullFace\u003d\"FRONT\" drawMode\u003d\"LINE\" layoutX\u003d\"711.0\" layoutY\u003d\"234.0\" opacity\u003d\"0.34\" radius\u003d\"50\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                     \u003c/effect\u003e\u003c/Sphere\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                  \u003cCylinder disable\u003d\"true\" focusTraversable\u003d\"true\" height\u003d\"100\" layoutX\u003d\"630.0\" layoutY\u003d\"323.0\" opacity\u003d\"0.18\" radius\u003d\"20\" rotate\u003d\"170.0\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                     \u003crotationAxis\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                        \u003cPoint3D x\u003d\"30.0\" y\u003d\"150.0\" z\u003d\"-360.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                     \u003c/rotationAxis\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                  \u003c/Cylinder\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                  \u003cBox depth\u003d\"100\" drawMode\u003d\"LINE\" height\u003d\"100\" layoutX\u003d\"692.0\" layoutY\u003d\"312.0\" rotate\u003d\"50.0\" scaleX\u003d\"0.5\" scaleY\u003d\"0.5\" width\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                     \u003crotationAxis\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                        \u003cPoint3D x\u003d\"32.0\" y\u003d\"54.0\" z\u003d\"64.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                     \u003c/rotationAxis\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                  \u003c/Box\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003cText fill\u003d\"WHITE\" fontSmoothingType\u003d\"LCD\" layoutX\u003d\"16.0\" layoutY\u003d\"28.0\" stroke\u003d\"TRANSPARENT\" strokeLineJoin\u003d\"ROUND\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Welcome to Ranice\u0027s Duke Project.. No racism allowed.\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                  \u003cFont name\u003d\"Ubuntu\" size\u003d\"21.0\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "               \u003ceffect\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                  \u003cDropShadow spread\u003d\"0.53\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "               \u003c/effect\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            \u003c/Text\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 83
    }
  },
  {
    "path": "src/test/java/duke/tasks/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected ToDo testToDo \u003d new ToDo(\"TestTask\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void testGetType() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(\"[T]\", testToDo.getType());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(true, testToDo.equals(new ToDo(\"TestTask\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 18
    }
  },
  {
    "path": "src/test/java/duke/util/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.commands.EventCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void testParseCommand_validCommand_success() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(Parser.parseCommand(\"done 2\"), new DoneCommand(2));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(Parser.parseCommand(\"event school dance /at 2020-02-01 1800\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                new EventCommand(\"school dance\", \"2020-02-01 1800\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(Parser.parseCommand(\"deadline do work /by 2020-03-05 1800\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                new DeadlineCommand(\"do work\", \"2020-03-05 1800\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void testParseCommand_doneNegativeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            String t1 \u003d \"done -1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            assertEquals(Parser.parseCommand(t1), new DoneCommand(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            assertEquals(Ui.setBorder(\"You can\u0027t enter a negative index!!\"), e.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void testParseFileLine_validLine_success() throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Event e1 \u003d new Event(\"school dance\", \"2020-01-20 1800\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        final ToDo e2 \u003d new ToDo(\"eat food\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Deadline e3 \u003d new Deadline(\"study\", \"2020-02-18 1700\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        e1.setDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        e3.setDone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(e1, Parser.parseFileLine(\"[E][X] school dance /at 2020-01-20 1800\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(e2, Parser.parseFileLine(\"[T][ ] eat food\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(e3, Parser.parseFileLine(\"[D][X] study /by 2020-02-18 1700\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    To Do:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseCommand_invalidCommand_exceptionThrown()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseCommand_ToDoNoDescription_exceptionThrown()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseCommand_deleteNoIndex_exceptionThrown()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseCommand_deleteNegativeIndex_exceptionThrown()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseCommand_deleteNonexistentIndex_exceptionThrown()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseCommand_eventNoDescription_exceptionThrown()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseCommand_eventNoDate_exceptionThrown()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseCommand_eventInvalidDateTime_exceptionThrown()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseCommand_deadlineNoDescription_exceptionThrown()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseCommand_deadlineNoDate_exceptionThrown()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseCommand_deadlineInvalidDateTime_exceptionThrown()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseFileLine_invalidLine_exceptionThrown()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseFileLine_validLine_success()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    isValidIndex_nonexistentIndex_exceptionThrown()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    isValidIndex_validIndex_success()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 73
    }
  },
  {
    "path": "src/test/java/duke/util/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void testLoad() throws IOException, DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        File temp \u003d File.createTempFile(\"temp\", \".txt\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        BufferedWriter out \u003d new BufferedWriter(new FileWriter(temp));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String testInput \u003d \"[E][X] school dance /at 2020-01-20 1800\\n\" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                            \"[T][O] eat food\\n\" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                            \"[D][X] study /by 2020-02-18 1700\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        out.write(testInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        temp.deleteOnExit();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        out.close();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ArrayList\u003cTask\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        test.add(new Event(\"school dance\", \"2020-01-20 1800\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        test.add(new ToDo(\"eat food\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        test.add(new Deadline(\"study\", \"2020-02-18 1700\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(test, new Storage(temp.toString()).load());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void testWrite() throws IOException, DukeWriteFailException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        File temp \u003d File.createTempFile(\"temp\", \".txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        temp.deleteOnExit();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        BufferedWriter out \u003d new BufferedWriter(new FileWriter(temp));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        out.write(\"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Storage test \u003d new Storage(temp.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ArrayList\u003cTask\u003e testArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Event t1 \u003d new Event(\"school dance\", \"2020-01-20 1800\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ToDo t2 \u003d new ToDo(\"eat food\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Deadline t3 \u003d new Deadline(\"study\", \"2020-02-18 1700\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        t1.setDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        t3.setDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        testArrayList.add(t1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        testArrayList.add(t2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        testArrayList.add(t3);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        TaskList testTaskList \u003d new TaskList(testArrayList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        test.write(testTaskList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        List\u003cString\u003e expectedText \u003d Arrays.asList(\"[E][X] school dance /at 20 January 2020 1800\\n\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                                                    \"[T][O] eat food\\n\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                                                    \"[D][X] study /by 18 February 2020 1700\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        System.out.println(expectedText.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        out.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(expectedText, Files.readAllLines(temp.toPath()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 55
    }
  },
  {
    "path": "src/test/java/duke/util/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void testSetBorder() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String expected \u003d Ui.border + \"\\n\\ttesting border\\n\\n\" + Ui.border;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(expected, Ui.setBorder(\"testing border\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 17
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "Greetings mortal, my name is"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "How may I help you?"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\tADDED : [D][ ]  revise for 2103T  (due by:  today, 12pm)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\tADDED : [E][ ]  school dance (at:  2nd Feb 2020)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\tADDED : [T][ ]  clean room"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\tADDED : bruhhh"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\tHere is your list:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\t(1) [D][ ]  revise for 2103T  (due by:  today, 12pm)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\t(2) [E][ ]  school dance (at:  2nd Feb 2020)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\t(3) [T][ ]  clean room"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\t(4) [ ] bruhhh"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\tI\u0027ve marked (4) as done!"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\t(4) [X] bruhhh"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\tYou have entered an invalid index."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\tHere is your list:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\t(1) [D][ ]  revise for 2103T  (due by:  today, 12pm)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\t(2) [E][ ]  school dance (at:  2nd Feb 2020)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\t(3) [T][ ]  clean room"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\t(4) [X] bruhhh"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\tSee u the next time you test ur code :P"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "raniceyue": 72
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "deadline revise for 2103T /by today, 12pm"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "event school dance /at 2nd Feb 2020"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "todo clean room"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "bruhhh"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 9
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 21
    }
  }
]
