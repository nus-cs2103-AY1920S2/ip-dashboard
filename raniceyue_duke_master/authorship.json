[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\tid \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\ttoolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "test {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 20,
      "-": 20
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "[E][X] read book /at 2020-02-02 1800"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 1
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Duke(String fileName) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.storage \u003d new Storage(fileName);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void run() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ui.printWelcomeMsg();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                Command c \u003d Parser.parseCommand(fullCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                c.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                System.out.println(e.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static void main(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        new Duke(\"duke.txt\").run();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 39,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents the command \u0027bye\u0027."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Method to check if command is the exit command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return boolean stating if command is an exit command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Method to execute \u0027bye\u0027 command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskList task list in running program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param ui ui handling running program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param storage storage handling running program."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ui.printExitMsg();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Method to compare 2 commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param command object to compare command to."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return boolean stating if this command and command are equal."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object command) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return command instanceof ByeCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 39
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeBadIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeWriteFailException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public abstract void execute("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            TaskList taskList, Ui ui, Storage storage) throws DukeBadIndexException, DukeWriteFailException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 14
    }
  },
  {
    "path": "src/main/java/duke/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeWriteFailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents the command \u0027deadline\u0027."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    String taskName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    String dateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Creates a command to create a Deadline task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskName name of deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param dateTime date and time of deadline."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DeadlineCommand(String taskName, String dateTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Method to check if command is the exit command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return boolean stating if command is an exit command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Method to execute \u0027deadline\u0027 command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskList task list in running program."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param ui ui handling running program."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param storage storage handling running program."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeWriteFailException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        taskList.addTask(new Deadline(taskName, dateTime));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        storage.write(taskList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Method to compare 2 commands."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param command object to compare command to."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return boolean stating if this command and command are equal."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object command) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (command instanceof DeadlineCommand) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (((DeadlineCommand) command).taskName.equals(this.taskName)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return ((DeadlineCommand) command).dateTime.equals(this.dateTime);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 63
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeBadIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeWriteFailException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void execute("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            TaskList taskList, Ui ui, Storage storage) throws DukeBadIndexException, DukeWriteFailException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        taskList.deleteTask(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        storage.write(taskList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object command) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (command instanceof DeleteCommand) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return this.index \u003d\u003d ((DeleteCommand) command).index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 35
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeBadIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeWriteFailException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void execute("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            TaskList taskList, Ui ui, Storage storage) throws DukeBadIndexException, DukeWriteFailException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        taskList.setDone(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        storage.write(taskList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object command) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (command instanceof DoneCommand) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return this.index \u003d\u003d ((DoneCommand) command).index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 34
    }
  },
  {
    "path": "src/main/java/duke/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeWriteFailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents the command \u0027event\u0027."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected String taskName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected String dateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructor for EventCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskName name of event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param dateTime date and time of event occurrence."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public EventCommand(String taskName, String dateTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Method to check if command is the exit command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return boolean stating if command is an exit command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Method to execute \u0027deadline\u0027 command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskList task list in running program."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param ui ui handling running program."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param storage storage handling running program."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws DukeWriteFailException if the program fails to write the modified data to the storage file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeWriteFailException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        taskList.addTask(new Event(taskName, dateTime));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        storage.write(taskList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Method to compare 2 commands."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param command object to compare command to."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return boolean stating if this command and command are equal."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object command) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (command instanceof EventCommand) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (((EventCommand) command).taskName.equals(this.taskName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return ((EventCommand) command).dateTime.equals(this.dateTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 63
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    String keyword;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        TaskList results \u003d taskList.search(keyword);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String toPrint \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (results.numTasks() \u003e 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            toPrint +\u003d \"Here are the matching tasks in your list!!\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            for (int i \u003d 0; i \u003c results.numTasks(); i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                toPrint +\u003d \"\\t(\" + (i + 1) + \") \" + results.getList().get(i) + \"\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else if (results.numTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            toPrint +\u003d \"There are no matching results in your list.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else if (taskList.numTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            toPrint +\u003d \"You have nothing on your list.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        System.out.println(Ui.setBorder(toPrint));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object command) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return command instanceof FindCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 40
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents the command \u0027list\u0027."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructor for ListCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ListCommand() { }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Method to check if command is the exit command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return boolean stating if command is an exit command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Method to execute \u0027list\u0027 command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskList task list in running program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param ui ui handling running program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param storage storage handling running program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        System.out.println(taskList.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Method to compare 2 commands."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param command object to compare command to."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return boolean stating if this command and command are equal."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object command) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return command instanceof ListCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 44
    }
  },
  {
    "path": "src/main/java/duke/commands/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeWriteFailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents the command \u0027todo\u0027."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    String taskName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructor for ToDoCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskName name of task to be done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ToDoCommand(String taskName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Method to check if command is the exit command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return boolean stating if command is an exit command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Method to execute \u0027todo\u0027 command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskList task list in running program."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param ui ui handling running program."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param storage storage handling running program."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws DukeWriteFailException if the program fails to write the modified data to the storage file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeWriteFailException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        taskList.addTask(new ToDo(taskName));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        storage.write(taskList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Method to compare 2 commands."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param command object to compare command to."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return boolean stating if this command and command are equal."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object command) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (command instanceof ToDoCommand) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return this.taskName.equals(((ToDoCommand) command).taskName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 56
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeBadDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Exception to handle date inputs that are not formatted correctly."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeBadDateException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeBadDateException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.message \u003d \"The date you have entered is in a bad format!\\n\\tPlease use the format YYYY-MM-DD.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 10
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeBadDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Exception to handle date and time inputs that are not formatted correctly."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeBadDateTimeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeBadDateTimeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.message \u003d \"The date and time you entered is in a bad format!\\n\\tPlease use the format YYYY-MM-DD HHMM.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 10
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeBadFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Exception to handle when text in data file is not formatted correctly."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeBadFileException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeBadFileException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.message \u003d \"The file you are trying to load is not in the correct format!!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 10
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeBadIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Exception to handle indices that are out of range."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeBadIndexException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeBadIndexException(int index) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (index \u003c 0) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            super.message \u003d \"You can\u0027t enter a negative index!!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            super.message \u003d \"I don\u0027t think you have that many tasks my dude.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 14
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeBadPathException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Exception to handle event where path to data file does not exist."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeBadPathException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeBadPathException(Path path) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.message \u003d \"The path \" + path + \" does not exist!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 12
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Superclass to generalise exceptions for the Duke program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected String message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String output \u003d Ui.setBorder(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 16
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeNoDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Exception to handle event where command is missing date input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeNoDateException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeNoDateException(String taskName) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (taskName.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            super.message \u003d \"Doesn\u0027t a deadline have a date?? Aren\u0027t you forgetting something??\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            super.message \u003d \"When is this even supposed to happen? You forgot the date!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 14
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeNoDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Exception to handle event where command to create task has no description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeNoDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeNoDescriptionException(String taskName) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.message \u003d \"You need to specify more details for task \" + taskName + \"!!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 10
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeNoIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Exception to handle event where commands to manipulate list have no index provided."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeNoIndexException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeNoIndexException(String command) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (command.equals(\"delete\")) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            super.message \u003d \"You forgot to tell me what to delete!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            super.message \u003d \"You forgot to tell me what to mark as done!!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 14
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeNoKeywordException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeNoKeywordException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeNoKeywordException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.message \u003d \"You forgot to tell me what to look for!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 7
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeUnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Exception to handle unexpected input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeUnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeUnknownCommandException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.message \u003d \"What the hell are you saying?? I don\u0027t get you...\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 10
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeWriteFailException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Exception to handle event where modified data cannot be written back into data file."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class DukeWriteFailException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public DukeWriteFailException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super.message \u003d \"For some reason, I was unable to write the changes back to the data file!! :O\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 10
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected String rawDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Deadline(String taskName, String dateTime) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String[] dt \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.rawDate \u003d dt[0];"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.date \u003d LocalDate.parse(getRawDate());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.time \u003d dt[1];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return getDate() + \" \" + getTime();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getRawDate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return rawDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return \"[D]\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String writeFormat() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return getType() + getStatus() + \" \" + getTaskName() + \" /by \" + getRawDate() + \" \" + getTime();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object task) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (((Deadline) task).getTaskName().equals(this.getTaskName())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                if (((Deadline) task).getDateTime().equals(this.getDateTime())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    return ((Deadline) task).getStatus() \u003d\u003d this.getStatus();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return \"[D]\" + super.toString() + \" (due by: \" + getDateTime() + \")\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 64
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected String rawDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Event(String taskName, String dateTime) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String[] dt \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.rawDate \u003d dt[0];"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.date \u003d LocalDate.parse(getRawDate());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.time \u003d dt[1];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return getDate() + \" \" + getTime();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getRawDate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return rawDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return \"[E]\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String writeFormat() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return getType() + getStatus() + \" \" + getTaskName() + \" /at \" + getRawDate() + \" \" + getTime();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object task) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (task instanceof Event) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (((Event)task).getTaskName().equals(this.getTaskName())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                if (((Event) task).getDateTime().equals(this.getDateTime())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    return ((Event) task).getStatus() \u003d\u003d this.getStatus();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + getDateTime() + \")\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 64
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected String taskName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected Boolean status;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Task(String taskName) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.status \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (status) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return \"[X]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return \"[ ]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.status \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (status) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return \"[X] \" + getTaskName();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return \"[ ] \" + getTaskName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 36
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeBadIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public int numTasks() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public int getTaskIndex(Task t) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return getList().indexOf(t) + 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        getList().add(t);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String toPrint \u003d Ui.setBorder(\"ADDED : \" + t + \"\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + \"\\tYou now have \" + numTasks() + \" item(s) on your list.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        System.out.println(toPrint);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void setDone(int n) throws DukeBadIndexException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (n \u003e numTasks()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DukeBadIndexException(n);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        getList().get(n - 1).setDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String toPrint \u003d Ui.setBorder(\"I\u0027ve marked (\" + n + \") as done!\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + \"\\t(\" + n + \") \" + getList().get(n - 1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        System.out.println(toPrint);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void deleteTask(int n) throws DukeBadIndexException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (n \u003e numTasks()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DukeBadIndexException(n);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Task t \u003d getList().get(n - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        getList().remove(n - 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String toPrint \u003d Ui.setBorder(\"OK, I\u0027ve removed the task:\\n\\t\\t\" + t + \"\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                        + \"\\tYou now have \" + (getList().size()) + \" task(s) on your list.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        System.out.println(toPrint);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public TaskList search(String keyword) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ArrayList\u003cTask\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (t.getTaskName().contains(keyword)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                results.add(t);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return new TaskList(results);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String toPrint \u003d \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (numTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            toPrint \u003d Ui.setBorder(\"You have nothing on your list.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            StringBuilder msg \u003d new StringBuilder(\"Here is your list:\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            for (Task e : list) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                msg.append(\"\\t(\").append(getTaskIndex(e)).append(\") \").append(e.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            toPrint +\u003d Ui.setBorder(msg.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return toPrint;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 83
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ToDo(String taskName) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return \"[T]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public boolean equals(Object task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (((ToDo) task).getTaskName().equals(this.getTaskName())) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return ((ToDo) task).getStatus() \u003d\u003d this.getStatus();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 30
    }
  },
  {
    "path": "src/main/java/duke/util/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static Command parseCommand(String s) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Scanner sc \u003d new Scanner(s);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String w1 \u003d sc.next();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        switch (w1) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return new ByeCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                if (sc.hasNext()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    return new FindCommand(sc.next());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    throw new DukeNoKeywordException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                if (sc.hasNextInt()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    int index \u003d sc.nextInt();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    isValidIndex(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    return new DoneCommand(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    throw new DukeNoIndexException(w1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                if (sc.hasNextInt()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    int index \u003d sc.nextInt();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    isValidIndex(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    return new DeleteCommand(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    throw new DukeNoIndexException(w1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                if (!sc.hasNextLine()) throw new DukeNoDescriptionException(w1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    return new ToDoCommand(sc.nextLine());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                if (!sc.hasNextLine()) throw new DukeNoDescriptionException(w1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    String task \u003d sc.nextLine().strip();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    String[] details \u003d task.split(\" /at \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    if (details.length \u003c 2) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                        throw new DukeNoDateException(w1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                        isValidDateTime(details[1]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                        return new EventCommand(details[0], details[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                if (!sc.hasNextLine()) throw new DukeNoDescriptionException(w1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    String task \u003d sc.nextLine().strip();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    String[] details \u003d task.split(\" /by \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    if (details.length \u003c 2) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                        throw new DukeNoDateException(w1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                        isValidDateTime(details[1]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                        return new DeadlineCommand(details[0], details[1]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static Task parseFileLine(String e) throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String task_type \u003d e.substring(0, 3);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String task_status \u003d e.substring(3, 6);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String task_details \u003d e.substring(7);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Task t;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        switch (task_type) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            case \"[T]\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                t \u003d new ToDo(task_details);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            case \"[E]\": {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                String[] details \u003d task_details.split(\" /at \");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                t \u003d new Event(details[0], details[1]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            case \"[D]\": {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                String[] details \u003d task_details.split(\" /by \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                t \u003d new Deadline(details[0], details[1]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                throw new DukeBadFileException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (task_status.equals(\"[X]\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            t.setDone();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    IMPORTANT: parseFileLine incomplete, not all edge cases accounted for."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static void isValidIndex(int index) throws DukeBadIndexException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (index \u003d\u003d 0 || index \u003c 0) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DukeBadIndexException(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static void isValidDateTime(String dateTime) throws DukeBadDateException, DukeBadDateTimeException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String[] p \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        if (p.length \u003c 2) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DukeBadDateTimeException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            String date \u003d p[0];"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            String time \u003d p[1];"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            String[] date_parsed \u003d date.split(\"-\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (date_parsed.length \u003c 3) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                throw new DukeBadDateException();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 131
    }
  },
  {
    "path": "src/main/java/duke/util/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeBadPathException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeWriteFailException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " * Represents object that handles storage and loading of data from storage file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static String home \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected Path projectRootPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected Path dataFilePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Constructor for Storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param filePath path of storage file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.projectRootPath \u003d Paths.get(home);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        this.dataFilePath \u003d Paths.get(projectRootPath.toString(), \"data\", filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Method that loads data from the storage file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @return array list containing tasks loaded from storage file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws DukeException if the path is invalid and data cannot be loaded."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            List\u003cString\u003e loadedData \u003d Files.readAllLines(dataFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            for (String e : loadedData) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                if (loadedData.isEmpty() || e.isBlank()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                list.add(Parser.parseFileLine(e));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DukeBadPathException(dataFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * Method to write changes back into storage file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @param taskList task list to be written back into file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     * @throws DukeWriteFailException if the data fails to be written into file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void write(TaskList taskList) throws DukeWriteFailException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        StringBuilder toWrite \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        for (Task e : taskList.getList()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            if (e instanceof ToDo) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                toWrite.append(e.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else if (e instanceof Event) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                toWrite.append(((Event) e).writeFormat()).append(\"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            } else if (e instanceof Deadline) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                toWrite.append(((Deadline) e).writeFormat()).append(\"\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            FileWriter fw \u003d new FileWriter(dataFilePath.toFile());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            bw.write(toWrite.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            throw new DukeWriteFailException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 87
    }
  },
  {
    "path": "src/main/java/duke/util/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static final String border \u003d \"\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d\\n\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String command \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            command \u003d sc.nextLine().strip();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /*Wraps border around msg*/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static String setBorder(String msg) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        return border + \"\\n\\t\" + msg + \"\\n\\n\" + border;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static void printWelcomeMsg() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        System.out.println(\"Greetings mortal, my name is\\n\" + logo + \"How may I help you?\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public static void printExitMsg() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String toPrint \u003d setBorder(\"See u the next time you test ur code :P\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        System.out.println(toPrint);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 41
    }
  },
  {
    "path": "src/test/java/duke/tasks/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    protected ToDo testToDo \u003d new ToDo(\"TestTask\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void testGetType() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(\"[T]\", testToDo.getType());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(true, testToDo.equals(new ToDo(\"TestTask\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 18
    }
  },
  {
    "path": "src/test/java/duke/util/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.commands.EventCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void testParseCommand_validCommand_success() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(Parser.parseCommand(\"done 2\"), new DoneCommand(2));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(Parser.parseCommand(\"event school dance /at 2020-02-01 1800\"), new EventCommand(\"school dance\", \"2020-02-01 1800\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(Parser.parseCommand(\"deadline do work /by 2020-03-05 1800\"), new DeadlineCommand(\"do work\", \"2020-03-05 1800\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void testParseCommand_doneNegativeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            String t1 \u003d \"done -1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            assertEquals(Parser.parseCommand(t1), new DoneCommand(-1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "            assertEquals(Ui.setBorder(\"You can\u0027t enter a negative index!!\"), e.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void testParseFileLine_validLine_success() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String t1 \u003d \"[E][X] school dance /at 2020-01-20 1800\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String t2 \u003d \"[T][ ] eat food\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String t3 \u003d \"[D][X] study /by 2020-02-18 1700\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Event e1 \u003d new Event(\"school dance\", \"2020-01-20 1800\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ToDo e2 \u003d new ToDo(\"eat food\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Deadline e3 \u003d new Deadline(\"study\", \"2020-02-18 1700\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        e1.setDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        e3.setDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(e1, Parser.parseFileLine(t1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(e2, Parser.parseFileLine(t2));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(e3, Parser.parseFileLine(t3));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    To Do:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseCommand_invalidCommand_exceptionThrown()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseCommand_ToDoNoDescription_exceptionThrown()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseCommand_deleteNoIndex_exceptionThrown()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseCommand_deleteNegativeIndex_exceptionThrown()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseCommand_deleteNonexistentIndex_exceptionThrown()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseCommand_eventNoDescription_exceptionThrown()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseCommand_eventNoDate_exceptionThrown()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseCommand_eventInvalidDateTime_exceptionThrown()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseCommand_deadlineNoDescription_exceptionThrown()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseCommand_deadlineNoDate_exceptionThrown()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseCommand_deadlineInvalidDateTime_exceptionThrown()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseFileLine_invalidLine_exceptionThrown()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    testParseFileLine_validLine_success()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    isValidIndex_nonexistentIndex_exceptionThrown()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    isValidIndex_validIndex_success()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 75
    }
  },
  {
    "path": "src/test/java/duke/util/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void testLoad() throws IOException, DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        File temp \u003d File.createTempFile(\"temp\", \".txt\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        BufferedWriter out \u003d new BufferedWriter(new FileWriter(temp));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String testInput \u003d \"[E][X] school dance /at 2020-01-20 1800\\n\" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                            \"[T][O] eat food\\n\" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                            \"[D][X] study /by 2020-02-18 1700\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        out.write(testInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        temp.deleteOnExit();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        out.close();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ArrayList\u003cTask\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        test.add(new Event(\"school dance\", \"2020-01-20 1800\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        test.add(new ToDo(\"eat food\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        test.add(new Deadline(\"study\", \"2020-02-18 1700\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(test, new Storage(temp.toString()).load());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void testWrite() throws IOException, DukeWriteFailException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        File temp \u003d File.createTempFile(\"temp\", \".txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        temp.deleteOnExit();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        BufferedWriter out \u003d new BufferedWriter(new FileWriter(temp));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        out.write(\"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Storage test \u003d new Storage(temp.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ArrayList\u003cTask\u003e testArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Event t1 \u003d new Event(\"school dance\", \"2020-01-20 1800\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        ToDo t2 \u003d new ToDo(\"eat food\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        Deadline t3 \u003d new Deadline(\"study\", \"2020-02-18 1700\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        t1.setDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        t3.setDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        testArrayList.add(t1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        testArrayList.add(t2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        testArrayList.add(t3);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        TaskList testTaskList \u003d new TaskList(testArrayList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        test.write(testTaskList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        List\u003cString\u003e expectedText \u003d Arrays.asList(\"[E][X] school dance /at 20 January 2020 1800\\n\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                                                    \"[T][O] eat food\\n\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "                                                    \"[D][X] study /by 18 February 2020 1700\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        System.out.println(expectedText.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        out.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(expectedText, Files.readAllLines(temp.toPath()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 55
    }
  },
  {
    "path": "src/test/java/duke/util/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    public void testSetBorder() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        String expected \u003d Ui.border + \"\\n\\ttesting border\\n\\n\" + Ui.border;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "        assertEquals(expected, Ui.setBorder(\"testing border\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 17
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "Greetings mortal, my name is"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "How may I help you?"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\tADDED : [D][ ]  revise for 2103T  (due by:  today, 12pm)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\tADDED : [E][ ]  school dance (at:  2nd Feb 2020)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\tADDED : [T][ ]  clean room"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\tADDED : bruhhh"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\tHere is your list:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\t(1) [D][ ]  revise for 2103T  (due by:  today, 12pm)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\t(2) [E][ ]  school dance (at:  2nd Feb 2020)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\t(3) [T][ ]  clean room"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\t(4) [ ] bruhhh"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\tI\u0027ve marked (4) as done!"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\t(4) [X] bruhhh"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\tYou have entered an invalid index."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\tHere is your list:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\t(1) [D][ ]  revise for 2103T  (due by:  today, 12pm)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\t(2) [E][ ]  school dance (at:  2nd Feb 2020)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\t(3) [T][ ]  clean room"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\t(4) [X] bruhhh"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\tSee u the next time you test ur code :P"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "\u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "raniceyue": 72
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "deadline revise for 2103T /by today, 12pm"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "event school dance /at 2nd Feb 2020"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "todo clean room"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "bruhhh"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 9
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raniceyue"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raniceyue"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "raniceyue": 21
    }
  }
]
