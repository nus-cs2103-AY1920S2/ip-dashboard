[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.2.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "sourceCompatibility\u003dJavaVersion.VERSION_11"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "targetCompatibility\u003dJavaVersion.VERSION_11"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "group \u0027sharadhr.duke\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "version \u00270.2\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    mainClassName \u003d \"sharadhr.duke.DukeLauncher\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    archiveVersion \u003d \"0.2\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "test {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 45,
      "-": 17
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "### Add tasks"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "You can add tasks of type **Todo** (which only has a description) **Deadline** (with a single date-time group as the deadline), or **Event** (with two date-time groups as the start/end instants respectively), using the `todo`, `deadline`, and `event` commands respectively."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "### List tasks"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "You can list tasks using the command `list`. "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "### Delete tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "You can delete previously-added tasks using the `delete` command. "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "### Find task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "You can find tasks using keywords, with the `find` command. "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "### File output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "The task file is saved as a `.csv` for easy viewing in \u003ckbd\u003eMicrosoft Excel\u003c/kbd\u003e and other spreadsheet programs. "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "### `todo \u003cwhat is to be done\u003e` — Creates a To-Do"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "Creates a To-Do, set by default as incomplete. "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "### `deadline \u003cwhat is due\u003e \u003c/by | /at\u003e \u003cdue date/time\u003e` — Creates a Deadline"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "Creates a Deadline, set by default as incomplete, with the due date/time as given.  _Some_ natural date-time groups are accepted (but some are still buggy):"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "- `24th Feb 2020`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "- `Monday 5 pm` (buggy, as this goes to the *current* week\u0027s Monday, and not the next)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "- `11:40`, or `4:20pm`, or `12am SGT`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "- `11/2/2020` or `22/7/2020` or even `14-3-2020` (European format: `dd/MM/uuuu`)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "- `tomorrow` is not legit."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003e Example use:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003e - `deadline return book /by 7 pm`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003e - `deadline complete CS2103T iP /by Tuesday 18/2/2020 23:59`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "### `event \u003cevent name\u003e /from \u003cstart instant\u003e /to \u003cend instant\u003e` — Creates an Event from `start instant` to `end instant`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "As for Deadlines, natural dates/times are accepted, and the same bugs apply."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "### `list`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "Lists all the tasks."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "### `find \u003ckeyword\u003e` — Finds tasks"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "Finds all tasks that have a detail which contain `keyword`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003e Example of usage: `find book`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "### `delete \u003ctask number\u003e`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "Deletes the task at the given `number`."
      }
    ],
    "authorContributionMap": {
      "sharadhr": 50,
      "-": 12
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.command.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeEmptyDetailException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Output;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Duke"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static TaskList tasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static Input input;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static Output output;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static Storage fileRW;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static PrintStream outputPS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static ByteArrayInputStream baIS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static ByteArrayOutputStream baOS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Duke(String... filePath)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        fileRW \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        assert fileRW !\u003d null || input !\u003d null || output !\u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        baOS \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            outputPS \u003d new PrintStream(baOS, true, \"UTF-8\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (UnsupportedEncodingException e)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            ;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        System.setOut(outputPS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        output \u003d new Output(outputPS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        input \u003d new Input();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        tasks \u003d fileRW.loadFromFile();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Runs the main program loop."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return {@code false} when the user says \u0027bye\u0027; otherwise, never returns."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static boolean programLoop() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                Optional\u003cCommand\u003e possibleCommand \u003d input.nextLine().getCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                if (!possibleCommand.isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                    output.say(\"Input cannot be empty; please enter a command.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                possibleCommand.get().execute(tasks, fileRW, output);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                isExit \u003d possibleCommand.get().willTerminate();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            catch (DukeInvalidArgumentException | DukeInvalidCommandException | DukeEmptyDetailException | DukeInvalidDateTimeException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                output.sayError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Cleans up objects and quits the program by calling {@link System#exit(int)}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static void exit() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        output.sayGoodBye();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        input.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        output.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //new Duke(\"data\", \"duke.csv\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        output.sayHello();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // Creates the task list"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (programLoop()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            exit();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String getResponse()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            Optional\u003cCommand\u003e possibleCommand \u003d input.getCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            if (!possibleCommand.isPresent()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                output.say(\"Input cannot be empty; please enter a command.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                possibleCommand.get().execute(tasks, fileRW, output);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                isExit \u003d possibleCommand.get().willTerminate();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (DukeInvalidArgumentException | DukeInvalidCommandException | DukeEmptyDetailException | DukeInvalidDateTimeException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            output.sayError(e);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (isExit) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            exit();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        String returnable \u003d baOS.toString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        baOS.reset();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return returnable;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void redirect(String inputString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        input.setFromString(inputString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 128,
      "-": 8
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/DukeLauncher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class DukeLauncher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 12
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.ui.MainWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * Main"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private Duke duke \u003d new Duke(\"data\", \"tasks.csv\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 32
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeEmptyDetailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Output;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * AddCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public AddCommand(String detail, CommandName commandName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(detail);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.commandName \u003d commandName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public AddCommand(String detail, String timeString, CommandName commandName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(detail, timeString);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.commandName \u003d commandName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public AddCommand(String detail, String startString, String endString,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                      CommandName commandName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(detail, startString, endString);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.commandName \u003d commandName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override public void execute(TaskList tasks, Storage storage, Output output)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        throws DukeEmptyDetailException, DukeInvalidDateTimeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        switch (this.commandName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            tasks.addTask(new Todo(this.argumentTokens[0]));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            tasks.addTask("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                new Event(this.argumentTokens[0], this.argumentTokens[1], this.argumentTokens[2]));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            tasks.addTask(new Deadline(this.argumentTokens[0], this.argumentTokens[1]));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 50
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Output;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * ByeCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private final CommandName commandName \u003d CommandName.BYE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public ByeCommand(String[] argumentTokens) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (argumentTokens.length !\u003d 0) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throw new DukeInvalidArgumentException(\"Bye command should have no arguments.\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                                                   argumentTokens, this.commandName,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                                                   this.getClass().getSimpleName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override public void execute(TaskList tasks, Storage storage, Output output) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Duke.output.sayGoodBye();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override public boolean willTerminate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 30
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeEmptyDetailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Output;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * Models a possible user command to the Duke program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected CommandName commandName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected String[] argumentTokens;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Creates a {@link Command}, with a {@link String}[] that contains the tokenised arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * to the command, from the user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param argumentTokens the tokenised input from the user minus the first token"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Command(String... argumentTokens) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.argumentTokens \u003d argumentTokens;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static CommandName whichCommand(String token) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        for (CommandName cmdname : CommandName.values()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            if (token.equalsIgnoreCase(cmdname.toString())) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                return cmdname;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            } else if (token.isBlank()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                return CommandName.EMPTY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return CommandName.INVALID;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Executes this command, by calling appropriate methods from the objects passed to this"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * {@link Command}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param tasks   A {@link TaskList} to be operated upon"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param storage A {@link Storage} object for file I/O"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param output  An {@link Output} object to write to the standard output"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeEmptyDetailException     If the detail in this command is empty"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeInvalidDateTimeException If the date in this command cannot be parsed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeInvalidArgumentException"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public abstract void execute(TaskList tasks, Storage storage, Output output)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        throws DukeEmptyDetailException, DukeInvalidDateTimeException, DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public boolean willTerminate() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public enum CommandName {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        TODO, DEADLINE, EVENT, LIST, DONE, FIND, DELETE, FROM, BY, AT, ON, EMPTY, INVALID, BYE"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 62
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Output;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private int position;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Creates a Command that deletes a {@link sharadhr.duke.task.TaskList}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param argumentTokens The arguments provided to this {@link sharadhr.duke.command.Command}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeInvalidArgumentException If more than one argument is supplied, or the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                                      supplied argument is not strictly numerical and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                                      positive."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public DeleteCommand(String[] argumentTokens) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(argumentTokens);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (argumentTokens.length !\u003d 1 || !argumentTokens[0].matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throw new DukeInvalidArgumentException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                \"Delete command should have only one positive number as argument.\", argumentTokens,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                commandName, this.getClass().getSimpleName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.position \u003d Integer.parseInt(this.argumentTokens[0]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override public void execute(TaskList tasks, Storage storage, Output output) throws DukeInvalidArgumentException"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (this.position \u003e\u003d 1 \u0026\u0026 this.position \u003c\u003d tasks.numberOfTasks())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            output.sayTaskDeleted(tasks.getTaskAtPosition(position));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            tasks.deleteTaskAtPosition(position);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        else"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throw new DukeInvalidArgumentException(\"This item cannot be deleted.\", argumentTokens, commandName,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                    this.getClass().getSimpleName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 43
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Output;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * DoneCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private int position;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param argumentTokens"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeInvalidArgumentException"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public DoneCommand(String[] argumentTokens) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(argumentTokens);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (argumentTokens.length !\u003d 1 || !argumentTokens[0].matches(\"\\\\d+\"))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throw new DukeInvalidArgumentException(\"Done command should have only one positive number as argument.\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                    argumentTokens, commandName, this.getClass().getSimpleName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.position \u003d Integer.parseInt(this.argumentTokens[0]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override public void execute(TaskList tasks, Storage storage, Output output) throws DukeInvalidArgumentException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if ((this.position \u003e\u003d 1) \u0026\u0026 this.position \u003c\u003d tasks.numberOfTasks())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            Task toComplete \u003d tasks.getTaskAtPosition(position);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            if (toComplete.markComplete())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                output.sayTaskMarkedComplete(toComplete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        throw new DukeInvalidArgumentException(\"There is no such item in the list.\", argumentTokens, commandName,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                this.getClass().getSimpleName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 42
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeEmptyDetailException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Output;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * FindCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public FindCommand(String[] argumentTokens) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(argumentTokens);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (argumentTokens.length !\u003d 1) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throw new DukeInvalidArgumentException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                \"Find command should have only one word as argument.\", argumentTokens, commandName,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                this.getClass().getSimpleName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override public void execute(TaskList tasks, Storage storage, Output output)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        throws DukeEmptyDetailException, DukeInvalidDateTimeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Duke.output.add("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            String.format(\"These tasks match or contain the keyword \u0027%s\u0027:\", argumentTokens[0]));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Duke.output.say("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            Stream.of(Duke.tasks.findTasksWithKeyword(argumentTokens[0])).map(Task::toString)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                  .toArray(String[]::new));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 37
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Output;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * ListCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param commandTokens"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeInvalidCommandException"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public ListCommand(String[] commandTokens) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(commandTokens);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.commandName \u003d CommandName.LIST;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (commandTokens.length !\u003d 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throw new DukeInvalidArgumentException(\"List command must have no arguments.\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                                                   commandTokens, this.commandName,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                                                   this.getClass().getSimpleName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override public void execute(TaskList tasks, Storage storage, Output output) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        tasks.listTasks(output);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 32
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/exception/DukeEmptyDetailException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * An exception thrown when the {@code detail} {@link String} passed to a"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * {@link sharadhr.duke.task.Task} constructor is empty."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class DukeEmptyDetailException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final long serialVersionUID \u003d 1127957475772724808L;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public DukeEmptyDetailException(String thrownBy) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(\"Task detail cannot be empty.\", thrownBy);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"%s%nThrown by: %s\", this.getMessage(), this.thrownBy);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 17
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * An exception thrown to denote that an expected, but invalid program state has"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * been reached. These exceptions are straightforward, and should be caught and"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * handled."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final long serialVersionUID \u003d 7354097854189773198L;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected String thrownBy;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public DukeException(String message, String thrownBy) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.thrownBy \u003d thrownBy;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"Message: %s%nStack trace: %s\", this.getMessage(), getStackTrace());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 20
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/exception/DukeInvalidArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.command.Command.CommandName;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Thrown when arguments to a command are invalid, and not as specified in the docs"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class DukeInvalidArgumentException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final long serialVersionUID \u003d 5221851007504557801L;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private CommandName cmdName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private String argumentString;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public DukeInvalidArgumentException(String message, String[] arguments, CommandName command,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                                        String thrownBy) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(message, thrownBy);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.argumentString \u003d String.join(\" \", arguments);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.cmdName \u003d command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"%s%nCommand: %s%nArguments: %s%nThrown by: %s\", this.getMessage(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                             this.cmdName, this.argumentString, this.thrownBy);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 24,
      "-": 1
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/exception/DukeInvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * Thrown when user input is incorrect for a given correct command, or the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * command does not exist (i.e. the user command resolves to"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * {@link CommandName#INVALID}.)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class DukeInvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final long serialVersionUID \u003d 5862830938541195307L;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public DukeInvalidCommandException(String command, String thrownBy) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(\"Invalid command: \" + command, thrownBy);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"%s%nThrown by: %s\", this.getMessage(), this.thrownBy);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 18
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/exception/DukeInvalidDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * DukeInvalidDateException"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class DukeInvalidDateTimeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final long serialVersionUID \u003d 1967070878565904626L;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public DukeInvalidDateTimeException(String thrownBy, String dateString) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(\"Invalid date format: \" + dateString, thrownBy);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"%s%nThrown by: %s\", this.getMessage(), this.thrownBy);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 16
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/io/Input.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A class to accept and parse user inputs from the input stream."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Input {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final Pattern whitespace \u003d Pattern.compile(\"\\\\s+\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final Pattern slashCommands \u003d Pattern"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        .compile(\"(?i)\\\\/((from)|(to)|(at)|(by)|(on))\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static BufferedReader reader;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected String line;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /////////////////////////////////////////////////////////////////////////"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    // Instance"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /////////////////////////////////////////////////////////////////////////"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected String[] tokens;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Input() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        reader \u003d new BufferedReader(new InputStreamReader(System.in));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Input(InputStream is) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        reader \u003d new BufferedReader(new InputStreamReader(is));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    static String readline() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return reader.readLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (Exception e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            System.err.println(\"I/O exception occurred.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void setFromString(String input) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.line \u003d input;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.tokens \u003d input.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Gets the next line in the input stream, and stores it. Returns this object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * for method chaining."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return this {@link Input} object, with the cursor advanced by one line."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Input nextLine() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.line \u003d readline();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.tokens \u003d whitespace.split(this.line.trim());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns the current line of input as a {@link String} array of tokens, where"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * the {@link String} is trimmed and separated by any whitespace character."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return the current line, tokenised."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String[] getTokens() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.tokens \u003d this.tokens.length \u003d\u003d 0 ? whitespace.split(this.line.trim()) : this.tokens;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.tokens;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns the current line of input as a {@link Stream} of {@link String}s,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * trimmed and tokenised by any whitespace character."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return the current line of input as a {@link Stream}\u003c{@link String}\u003e."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Stream\u003cString\u003e getTokenStream() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return Stream.of(this.getTokens());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    String getFirstToken() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.getTokens()[0];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns a {@link Command}, using the first token in the user input,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * appropriately parsed with the rest of the user input."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return the user input as an executable {@link Command} object, containing the parsed and"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * tokenised input."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeInvalidArgumentException if the arguments to the command are incorrect"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeInvalidCommandException  if the command itself is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Optional\u003cCommand\u003e getCommand()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        throws DukeInvalidArgumentException, DukeInvalidCommandException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        String commandString \u003d this.getFirstToken();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Command.CommandName cmd \u003d Command.whichCommand(commandString);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        switch (cmd) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return Optional.of(new AddCommand(this.getDetail(), cmd));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return Optional.of(new AddCommand(this.getDetail(), this.getFirstTimeString(), cmd));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return Optional.of(new AddCommand(this.getDetail(), this.getFirstTimeString(),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                                              this.getNextTimeString(), cmd));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return Optional.of(new ListCommand(this.tokensWithoutFirst()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return Optional.of(new DoneCommand(this.tokensWithoutFirst()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return Optional.of(new FindCommand(this.tokensWithoutFirst()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return Optional.of(new DeleteCommand(this.tokensWithoutFirst()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case EMPTY:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case INVALID:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throw new DukeInvalidCommandException(commandString, this.getClass().getName());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return Optional.of(new ByeCommand(this.tokensWithoutFirst()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns all of this {@link Input}\u0027s tokens minus the first, as a {@link String}[]."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return a {@link String}[] of tokens"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String[] tokensWithoutFirst() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.getTokenStream().skip(1).toArray(String[]::new);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns all of this {@link Input}\u0027s tokens minus the first, as a single {@link String},"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * delimited by a single space."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return a single string of space-delimited tokens"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String inputWithoutFirstToken() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.getTokenStream().skip(1).collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns this {@link Input}\u0027s {@code detail} as a single string, with the tokens"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return A"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String getDetail() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.getTokenStream().skip(1).takeWhile(slashCommands.asMatchPredicate().negate())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                   .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String getFirstTimeString() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.getTokenStream().dropWhile(slashCommands.asMatchPredicate().negate()).skip(1)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                   .takeWhile(slashCommands.asMatchPredicate().negate())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                   .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String getNextTimeString() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.getTokenStream().dropWhile(slashCommands.asMatchPredicate().negate()).skip(1)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                   .dropWhile(slashCommands.asMatchPredicate().negate()).skip(1)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                   .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            System.err.println(\"I/O Exception occurred.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 186
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/io/Output.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.OutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.OutputStreamWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A class to neatly format and write any output from the organiser chat bot,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * Duke, to the standard output."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Output"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final String LOGO \u003d \"\\n ____        _        \\n\" "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                                     + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                                     + \"| | | | | | | |/ / _ \\\\\\n\" "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                                     + \"| |_| | |_| |   \u003c  __/\\n\" "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                                     + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    BufferedWriter writer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Output()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.writer \u003d new BufferedWriter(new OutputStreamWriter(System.out));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Output(OutputStream os)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.writer \u003d new BufferedWriter(new OutputStreamWriter(os, \"UTF-8\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (UnsupportedEncodingException e)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.sayError(e);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /////////////////////////////////////////////////////////////////////////"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    // Instance"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /////////////////////////////////////////////////////////////////////////"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    static void ioException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        System.err.println(\"I/O Error occurred.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    void appendWithNewline(String string) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.writer.append(string);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.writer.newLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            ioException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    void appendWithNewline(String... strings) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Arrays.asList(strings).forEach(this::appendWithNewline);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Appends {@code message} to this {@link sharadhr.duke.io.Output} object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param message the {@link String} to append to this object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void add(String message) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.writer.append(message);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (Exception e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            ioException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Flushes the contents of this writer\u0027s buffer to the standard output."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void say() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.writer.flush();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (Exception e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            ioException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Writes a {@code String}) to the standard output."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param message The message to be written"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void say(String message) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.appendWithNewline(message);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.writer.flush();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            ioException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Writes multiple messages to the standard output. These messages are given as"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * a comma-separated list of {@link String}s."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param messages The list of messages to be written to standard output"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void say(String... messages) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.appendWithNewline(messages);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            writer.flush();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (IOException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            ioException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void sayError(Exception e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.say(\"**********************ERROR**********************\", e.toString(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                 \"**********************ERROR**********************\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Greets the user."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void sayHello()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.say(\"Hello, this is\" + LOGO + \"How can I help?\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String helloString() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return \"Hello, this is\" + LOGO + \"How can I help?\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Bids the user farewell; should be called when program is exiting."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void sayGoodBye() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.say(\"Goodbye, then; see you soon!\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Given a task, tells the user that the task was added to the task list,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * formatted appropriately."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param task The task that was added to the task list"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void sayTaskAdded(Task task) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.say(\"This task was added: \", task.toString());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Given a task, tells the user that the task was marked complete, formatted"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * appropriately."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param task The task that was marked complete"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void sayTaskMarkedComplete(Task task) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.say(\"This task has been marked done:\", task.toString());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void sayTaskDeleted(Task task) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.say(\"This task has been deleted:\", task.toString());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Closes this writer."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (Exception e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            ioException();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 180
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/io/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.parse.DateParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.nio.file.StandardOpenOption;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A class to handle file read/write operations by the Duke program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private Path taskFile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private BufferedWriter writer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Creates a new {@link Storage} object for working with the data file as saved by Duke,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * using the provided {@code filePath}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param filePath a comma-separated list of the file directory structure"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Storage(String... filePath) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.taskFile \u003d Paths.get(\".\", filePath).normalize().toAbsolutePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            Files.createDirectories(this.taskFile.getParent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            if (Files.notExists(this.taskFile)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                Files.createFile(this.taskFile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.writer \u003d Files.newBufferedWriter(this.taskFile, StandardOpenOption.WRITE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                                                  StandardOpenOption.APPEND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            Files.newBufferedReader(this.taskFile);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns a possible {@link Task} after decoding {@code line}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param line A line from the file"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return A possible task; returns {@link Optional#empty()} if line cannot be decoded"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    static Optional\u003cTask\u003e decodeLine(String line) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        String[] tokens \u003d line.split(\",\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            switch (tokens[0]) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                return tokens.length \u003d\u003d 3 ? Optional"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                    .of(new Todo(tokens[2], Boolean.parseBoolean(tokens[1]))) : Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                return tokens.length \u003d\u003d 4 ? Optional"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                    .of(new Deadline(tokens[2], Boolean.parseBoolean(tokens[1]),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                                     DateParser.decodeString(tokens[3]))) : Optional.empty();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                return tokens.length \u003d\u003d 5 ? Optional"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                    .of(new Event(tokens[2], Boolean.parseBoolean(tokens[1]),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                                  DateParser.decodeString(tokens[3]),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                                  DateParser.decodeString(tokens[4]))) : Optional.empty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (Exception e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            Duke.output.sayError(e);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Encodes and appends {@code task} to this file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param task the {@link Task} to be encoded and written to this file"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void appendTaskToFile(Task task) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            writer.append(task.encode());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            writer.newLine();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            writer.flush();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            Output.ioException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns a {@link TaskList}, parsed from the specified file associated with"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * this {@link Storage} object."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return the {@link Tasklist} after parsing the file on disk"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public TaskList loadFromFile() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return new TaskList("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                Files.lines(taskFile).map(Storage::decodeLine).filter(Optional::isPresent)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                     .map(Optional::get).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (IOException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            Output.ioException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            Duke.output.say(\"File could not be read; creating new list.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 119
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/parse/DateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.parse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.time.temporal.TemporalAccessor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.time.temporal.TemporalField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A utility class to parse {@link String}s into {@link ZonedDateTime} objects,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * and format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * vice-versa, useable by the Duke program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public final class DateParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final DateTimeFormatter DAY_FORMAT_PATTERN \u003d DateTimeFormatter"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        .ofPattern(\"[EEEE][E]\").withResolverFields(ChronoField.DAY_OF_WEEK);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final DateTimeFormatter DATE_FORMAT_PATTERN \u003d DateTimeFormatter.ofPattern("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        \"[dd][d][\u0027st\u0027][\u0027nd\u0027][\u0027rd\u0027][\u0027th\u0027][\u0027 of\u0027][/][-][ ][LLLL][MMM][L][, ][/][-][ ][uuuu]\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                                                                                  .withResolverFields("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                                                                                      ChronoField.DAY_OF_MONTH,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                                                                                      ChronoField.MONTH_OF_YEAR,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                                                                                      ChronoField.YEAR);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final DateTimeFormatter TIME_FORMAT_PATTERN \u003d DateTimeFormatter"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        .ofPattern(\"[kk[[:][.]mm]][[hh][h][[:][.]mm][ ]a][ v]\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        .withResolverFields(ChronoField.HOUR_OF_DAY, ChronoField.CLOCK_HOUR_OF_AMPM,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                            ChronoField.MINUTE_OF_HOUR, ChronoField.AMPM_OF_DAY,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                            ChronoField.OFFSET_SECONDS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final DateTimeFormatter[] FORMATTERS \u003d { DAY_FORMAT_PATTERN, DATE_FORMAT_PATTERN,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        TIME_FORMAT_PATTERN };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final DateTimeFormatter OUTPUT_FORMAT_PATTERN \u003d DateTimeFormatter"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        .ofPattern(\"EEEE dd MMMM YYYY hh:mm a v\").withLocale(Locale.ENGLISH)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        .withZone(java.time.ZoneId.systemDefault()).withResolverFields(ChronoField.values());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final ZonedDateTime now \u003d ZonedDateTime.now();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns a {@link java.time.ZonedDateTime} after parsing"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * {@code dateTimeString}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param dateTimeString the {@link java.lang.String} to be parsed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return the date-time object after parsing the string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeInvalidDateTimeException if {@code dateTimeString} cannot be"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                                      parsed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static ZonedDateTime parseDateTimeString(String dateTimeString)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        throws DukeInvalidDateTimeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Optional\u003cZonedDateTime\u003e returnable \u003d Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        for (DateTimeFormatter formatter : FORMATTERS) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            for (String token : dateTimeString.split(\"\\\\s+\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                returnable \u003d parseStringWithFormatter(token, formatter, returnable);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return returnable.orElseThrow("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            () -\u003e new DukeInvalidDateTimeException(DateParser.class.getName(), dateTimeString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns a {@link String} from the provided {@code dateTimeGroup}, as"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * specified by a"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * formatter in this class. The formatter is provided with the pattern:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * {@code \"EEEE dd MMMM"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * YYYY hh:mm a v\"}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param dateTimeGroup the {@link ZonedDateTime} to be formatted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return A {@link String} of the formatted date time group"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static String formatZonedDateTime(ZonedDateTime dateTimeGroup) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return OUTPUT_FORMAT_PATTERN.format(dateTimeGroup);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns an encoded {@link String} to be written to the data file, by"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * formatting {@code dateTimeGroup}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param dateTimeGroup The {@link ZonedDateTime} date-time-group to be"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                      formatted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return The formatted string"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static String encodeZonedDateTime(ZonedDateTime dateTimeGroup) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return DateTimeFormatter.ISO_INSTANT.format(dateTimeGroup);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns a decoded {@link ZonedDateTime} from the given {@link String}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * {@code input}, using the {@link DateTimeFormatter#ISO_INSTANT} parser."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param encoded A previously-encoded {@link String}, usually from the data"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                file"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return the {@link ZonedDateTime} instant corresponding to the parsed string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static ZonedDateTime decodeString(String encoded) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return DateTimeFormatter.ISO_ZONED_DATE_TIME.parse(encoded, ZonedDateTime::from);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static Optional\u003cZonedDateTime\u003e parseStringWithFormatter(String string,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                                                                    DateTimeFormatter formatter,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                                                                    Optional\u003cZonedDateTime\u003e possibleZDT)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        throws DukeInvalidDateTimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Optional\u003cTemporalAccessor\u003e possiblyParsed;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            possiblyParsed \u003d Optional.of(formatter.parse(string));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            possiblyParsed \u003d Optional.empty();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (possiblyParsed.isPresent()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            ZonedDateTime returnable \u003d possibleZDT.orElse(now);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            TemporalAccessor parsed \u003d possiblyParsed.get();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            for (TemporalField field : formatter.getResolverFields()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                returnable \u003d returnable"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                    .with(field, parsed.isSupported(field) ? parsed.get(field) : now.get(field));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return Optional.of(returnable);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return possibleZDT;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 126
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeEmptyDetailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.parse.DateParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A Deadline, with a date-time group when it is due."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private ZonedDateTime by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Creates a new {@link Deadline} with the provided {@code detail}, {@code isComplete} and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * the {@link by}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param detail"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param by"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeEmptyDetailException"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Deadline(String detail, boolean isComplete, ZonedDateTime by)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        throws DukeEmptyDetailException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(detail, isComplete);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        assert this.detail !\u003d null || this.by !\u003d null || !this.isComplete;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Creates a deadline with a specified detail, and a date-time to be done by."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param detail the deadline detail"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param by     the date-time to be done by"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeEmptyDetailException     if the detail is empty."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeInvalidDateTimeException if the given date-time {@link String} cannot be parsed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Deadline(String detail, String by)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        throws DukeEmptyDetailException, DukeInvalidDateTimeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this(detail, false, DateParser.parseDateTimeString(by));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override public char getTaskTypeIcon() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return \u0027D\u0027;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"[%c]%s (by: %s)\", this.getTaskTypeIcon(), super.toString(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                             DateParser.formatZonedDateTime(this.by));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override public String encode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            .format(\"%c,%d,%s,%s\", this.getTaskTypeIcon(), this.isComplete ? 1 : 0, this.detail,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                    DateParser.encodeZonedDateTime(this.by));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 57
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeEmptyDetailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.parse.DateParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * An Event, with a detail, a start time, and an end time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected String duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected ZonedDateTime startTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected ZonedDateTime endTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Event(String detail, boolean isComplete, ZonedDateTime startTime, ZonedDateTime endTime)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        throws DukeEmptyDetailException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(detail, isComplete);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Creates an Event with a specified detail, and a {@link String} that specifies"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * the duration of the Event. The actual starting and ending"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * {@link ZonedDateTime} instance variables are parsed from this string."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param detail      the Event detail"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param startString the starting date/time of this {@link sharadhr.duke.task.Event}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param endString   the ending date/time of this {@link sharadhr.duke.task.Event}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeEmptyDetailException     if {@code detail} is blank (as specified by"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                                      {@link String#isBlank()})"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeInvalidDateTimeException if the date cannot be parsed into a starting"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                                      and ending date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Event(String detail, String startString, String endString)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        throws DukeEmptyDetailException, DukeInvalidDateTimeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this(detail, false, DateParser.parseDateTimeString(startString),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "             DateParser.parseDateTimeString(endString));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        assert !this.isComplete;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public char getTaskTypeIcon() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return \u0027E\u0027;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"[%c]%s from: %s\\t to: %s\", this.getTaskTypeIcon(), super.toString(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                             DateParser.formatZonedDateTime(startTime),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                             DateParser.formatZonedDateTime(endTime));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override public String encode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            .format(\"%c,%d,%s,%s,%s\", this.getTaskTypeIcon(), this.isComplete ? 1 : 0, this.detail,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                    DateParser.encodeZonedDateTime(this.startTime),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                    DateParser.encodeZonedDateTime(this.endTime));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 61
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeEmptyDetailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A Task class that allows creating a static list of tasks, that can be added"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * to, iterated through and polled for contents, or deleted from."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * Also allows initialising an instance of a Task, which come with appropriate"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * instance methods."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    // A list of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected String detail;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected boolean isComplete;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    Task() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.isComplete \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        assert !isComplete;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Initialises a {@link Task} with some specified {@code detail}, and is set as"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * incomplete."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param name the task detail"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeEmptyDetailException if {@code detail} is blank, as specified by"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                                  {@link String#isBlank()}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected Task(String detail) throws DukeEmptyDetailException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (detail.isBlank()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throw new DukeEmptyDetailException(this.getClass().getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.detail \u003d detail;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param detail"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param isComplete"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeEmptyDetailException"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected Task(String detail, boolean isComplete) throws DukeEmptyDetailException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this(detail);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.isComplete \u003d isComplete;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns a character representing the completion state of this task."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return {@code \u0027✔\u0027} if complete, {@code \u0027✘\u0027} otherwise"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public char getCompleteIcon() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return isComplete ? \u0027✔\u0027 : \u0027✘\u0027;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Marks this task as complete, and returns the state of the task (must be"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * {@code true})."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return {@code true} if complete"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public boolean markComplete() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.isComplete \u003d true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return isComplete;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Sets this {@link Task}\u0027s completion status to {@code status}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param status Completed or not"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void setCompleteStatus(boolean status) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.isComplete \u003d status;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns a character representing the type of {@link Task} ({@link Todo}, {@link Deadline}, or"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * {@link Event})."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return the character representing the task type"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public abstract char getTaskTypeIcon();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns this task as an encoded {@link String}, to be written to the data file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return The encoded String, as a comma-separated value (for easy opening in spreadsheet"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * files)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public abstract String encode();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"[%c]\\t %s\", this.getCompleteIcon(), this.detail);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 101
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import sharadhr.duke.Duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import sharadhr.duke.io.Output;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of tasks, and methods to interact with that list (add, delete, find, enumerate through)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Creates an empty {@link TaskList}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Creates a {@link TaskList} with tasks initialised from {@code tasks}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param tasks the list of {@link Task}s to initialise this TaskList with"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.tasks \u003d new ArrayList\u003cTask\u003e(tasks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param task A task to be added to the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return {@code true} if task was successfully added (as specified by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link ArrayList#add})"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public boolean addTask(Task task) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // Was the task successfully added to the list?"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        boolean added \u003d this.tasks.add(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Duke.output.sayTaskAdded(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Duke.fileRW.appendTaskToFile(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return added;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private Task getTaskAtIndex(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns a task at {@code position}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param position The 1-indexed position of the task in the list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return The task at the specified {@code position}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws IndexOutOfBoundsException if {@code position} ≥ size of tasks list +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                                   1"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Task getTaskAtPosition(int position) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.getTaskAtIndex(position - 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns a {@link Task}[], whose {@code detail} {@link String}s contain the"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * {@code keyword}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param keyword the keyword to look up"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the tasks that have been found"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Task[] findTasksWithKeyword(String keyword) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.tasks.stream().dropWhile(x -\u003e !x.detail.contains(keyword)).toArray(Task[]::new);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Deletes the task at the specified {@code position}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param position the (1-indexed) position of the task to be deleted"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void deleteTaskAtPosition(int position) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        tasks.remove(position - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Prints the tasks in this list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param output the {@link Output} object to use to print with"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void listTasks(Output output) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (!this.tasks.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            output.say(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            int listNumber \u003d 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            for (Task task : this.tasks) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                output.add(String.format(\"%d.%s%n\", listNumber++, task));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            output.say();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            output.say(\"You have no tasks in your list.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns the number of tasks in this {@link TaskList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return The number of tasks"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public int numberOfTasks() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 102,
      "-": 9
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeEmptyDetailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A To-Do; effectively the same as the inherited abstract class, {@link Task}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Creates a Todo with some detail."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param detail the Todo detail"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeEmptyDetailException if the detail is blank"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Todo(String detail) throws DukeEmptyDetailException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(detail);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Todo(String detail, boolean isComplete) throws DukeEmptyDetailException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(detail, isComplete);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override public char getTaskTypeIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return \u0027T\u0027;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"[%c]%s\", this.getTaskTypeIcon(), super.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override public String encode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            .format(\"%c,%d,%s\", this.getTaskTypeIcon(), this.isComplete ? 1 : 0, this.detail);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 36
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @FXML private Label dialog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @FXML private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        dialog.setPadding(new Insets(10, 10, 10, 10));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        dialog.setMinHeight(Region.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * right."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 67
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.Duke;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * 90% lifted from iP JavaFX FXML tutorial; changes made to accommodate"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * interacting with the Duke controller."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * @author Jeffry Lum"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @FXML private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @FXML private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @FXML private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @FXML private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @FXML public void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(Duke.output.helloString(), dukeImage));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private void handleUserInput()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // Redirects user input in the text field to stdin."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        duke.redirect(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        String response \u003d duke.getResponse();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        DialogBox userDialogBox \u003d DialogBox.getUserDialog(input, userImage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        DialogBox dukeDialogBox \u003d DialogBox.getDukeDialog(response, dukeImage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        dialogContainer.getChildren().addAll(userDialogBox, dukeDialogBox);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 63
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003cfx:root alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"false\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"sharadhr.duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 19
    }
  },
  {
    "path": "src/test/java/sharadhr/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void run() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void programLoop() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void exit() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void main() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 18
    }
  },
  {
    "path": "src/test/java/sharadhr/duke/command/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void execute() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 8
    }
  },
  {
    "path": "src/test/java/sharadhr/duke/command/ByeCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "class ByeCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void execute() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 9
    }
  },
  {
    "path": "src/test/java/sharadhr/duke/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void execute() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 9
    }
  },
  {
    "path": "src/test/java/sharadhr/duke/command/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "class DoneCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void execute() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 9
    }
  },
  {
    "path": "src/test/java/sharadhr/duke/command/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void execute() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 9
    }
  },
  {
    "path": "src/test/java/sharadhr/duke/command/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void execute() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 9
    }
  },
  {
    "path": "src/test/java/sharadhr/duke/io/InputTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "class InputTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void readline() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void nextLine() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void getTokens() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void getTokenStream() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void getFirstToken() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void getCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void tokensWithoutFirst() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void inputWithoutFirstToken() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void getDetail() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void getFirstTimeString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void getNextTimeString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void close() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 42
    }
  },
  {
    "path": "src/test/java/sharadhr/duke/io/OutputTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "class OutputTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void ioException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void appendWithNewline() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void testAppendWithNewline() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void add() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void say() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void testSay() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void testSay1() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void sayError() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void sayHello() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void sayGoodBye() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void sayTaskAdded() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void sayTaskMarkedComplete() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void sayTaskDeleted() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void close() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 48
    }
  },
  {
    "path": "src/test/java/sharadhr/duke/io/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void appendTask() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void decodeLine() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void loadFromFile() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 15
    }
  },
  {
    "path": "src/test/java/sharadhr/duke/parse/DateParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.parse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "class DateParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void parseDateTimeString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void formatZonedDateTime() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 12
    }
  },
  {
    "path": "src/test/java/sharadhr/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void getTaskTypeIcon() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void testToString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void encode() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 15
    }
  },
  {
    "path": "src/test/java/sharadhr/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void getTaskTypeIcon() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void testToString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void encode() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 15
    }
  },
  {
    "path": "src/test/java/sharadhr/duke/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void addTask() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void getTaskAtPosition() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void findTasksWithKeyword() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void deleteTaskAtPosition() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void listTasks() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void numberOfTasks() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 24
    }
  },
  {
    "path": "src/test/java/sharadhr/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "class TodoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void getTaskTypeIcon() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void testToString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Test void encode() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 15
    }
  }
]
