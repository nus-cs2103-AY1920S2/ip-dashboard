[
  {
    "path": ".gitignore",
    "fileType": "gitignore",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# IDEA files"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/.idea/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/out/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/*.iml"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle build files"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/.gradle/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/build/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "src/main/resources/docs/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# MacOS custom attributes files created by Finder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ".DS_Store"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "*.iml"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "bin/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "# VS Code files "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ".vscode/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ".classpath"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ".project"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ".settings/org.eclipse.buildship.core.prefs"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "data/duke.txt"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 7,
      "-": 14
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "group \u0027sharadhr.duke\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    mainClassName \u003d \"sharadhr.duke.Duke\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 5,
      "-": 19
    }
  },
  {
    "path": "gradle/wrapper/gradle-wrapper.properties",
    "fileType": "properties",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "distributionBase\u003dGRADLE_USER_HOME"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "distributionPath\u003dwrapper/dists"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "distributionUrl\u003dhttps\\://services.gradle.org/distributions/gradle-6.0.1-bin.zip"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "zipStoreBase\u003dGRADLE_USER_HOME"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "zipStorePath\u003dwrapper/dists"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "org.gradle.jvmargs\u003d\u0027-Dfile.encoding\u003dUTF-16\u0027"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 2,
      "-": 4
    }
  },
  {
    "path": "gradlew",
    "fileType": "gradlew",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "#"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "# Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "#"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "# Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "# you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "# You may obtain a copy of the License at"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "#"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "#      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "#"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "# Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "# distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "# See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "# limitations under the License."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "#"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "##############################################################################"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "##"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "##  Gradle start up script for UN*X"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "##"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "##############################################################################"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# Attempt to set APP_HOME"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# Resolve links: $0 may be a link"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "PRG\u003d\"$0\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# Need this for relative symlinks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "while [ -h \"$PRG\" ] ; do"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ls\u003d`ls -ld \"$PRG\"`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    link\u003d`expr \"$ls\" : \u0027.*-\u003e \\(.*\\)$\u0027`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    if expr \"$link\" : \u0027/.*\u0027 \u003e /dev/null; then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        PRG\u003d\"$link\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    else"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        PRG\u003d`dirname \"$PRG\"`\"/$link\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "done"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "SAVED\u003d\"`pwd`\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "cd \"`dirname \\\"$PRG\\\"`/\" \u003e/dev/null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "APP_HOME\u003d\"`pwd -P`\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "cd \"$SAVED\" \u003e/dev/null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "APP_NAME\u003d\"Gradle\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "APP_BASE_NAME\u003d`basename \"$0\"`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "DEFAULT_JVM_OPTS\u003d\u0027\"-Xmx64m\" \"-Xms64m\"\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "# Use the maximum available, or set MAX_FD !\u003d -1 to use that value."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "MAX_FD\u003d\"maximum\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "warn () {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"$*\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "die () {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    echo"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"$*\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    echo"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "# OS specific support (must be \u0027true\u0027 or \u0027false\u0027)."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "cygwin\u003dfalse"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "msys\u003dfalse"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "darwin\u003dfalse"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "nonstop\u003dfalse"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "case \"`uname`\" in"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  CYGWIN* )"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    cygwin\u003dtrue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    ;;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "  Darwin* )"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    darwin\u003dtrue"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    ;;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "  MINGW* )"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    msys\u003dtrue"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    ;;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "  NONSTOP* )"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    nonstop\u003dtrue"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    ;;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "esac"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "CLASSPATH\u003d$APP_HOME/gradle/wrapper/gradle-wrapper.jar"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "# Determine the Java command to use to start the JVM."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -n \"$JAVA_HOME\" ] ; then"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        # IBM\u0027s JDK on AIX uses strange locations for the executables"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        JAVACMD\u003d\"$JAVA_HOME/jre/sh/java\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    else"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        JAVACMD\u003d\"$JAVA_HOME/bin/java\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    if [ ! -x \"$JAVACMD\" ] ; then"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "location of your Java installation.\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    JAVACMD\u003d\"java\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    which java \u003e/dev/null 2\u003e\u00261 || die \"ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "location of your Java installation.\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "# Increase the maximum file descriptors if we can."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "if [ \"$cygwin\" \u003d \"false\" -a \"$darwin\" \u003d \"false\" -a \"$nonstop\" \u003d \"false\" ] ; then"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    MAX_FD_LIMIT\u003d`ulimit -H -n`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    if [ $? -eq 0 ] ; then"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if [ \"$MAX_FD\" \u003d \"maximum\" -o \"$MAX_FD\" \u003d \"max\" ] ; then"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            MAX_FD\u003d\"$MAX_FD_LIMIT\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        fi"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ulimit -n $MAX_FD"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if [ $? -ne 0 ] ; then"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            warn \"Could not set maximum file descriptor limit: $MAX_FD\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        fi"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    else"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "# For Darwin, add options to specify how the application appears in the dock"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "if $darwin; then"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    GRADLE_OPTS\u003d\"$GRADLE_OPTS \\\"-Xdock:name\u003d$APP_NAME\\\" \\\"-Xdock:icon\u003d$APP_HOME/media/gradle.icns\\\"\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "# For Cygwin or MSYS, switch paths to Windows format before running java"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "if [ \"$cygwin\" \u003d \"true\" -o \"$msys\" \u003d \"true\" ] ; then"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    APP_HOME\u003d`cygpath --path --mixed \"$APP_HOME\"`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    CLASSPATH\u003d`cygpath --path --mixed \"$CLASSPATH\"`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    JAVACMD\u003d`cygpath --unix \"$JAVACMD\"`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    # We build the pattern for arguments to be converted via cygpath"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ROOTDIRSRAW\u003d`find -L / -maxdepth 1 -mindepth 1 -type d 2\u003e/dev/null`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    SEP\u003d\"\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    for dir in $ROOTDIRSRAW ; do"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        ROOTDIRS\u003d\"$ROOTDIRS$SEP$dir\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        SEP\u003d\"|\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    done"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    OURCYGPATTERN\u003d\"(^($ROOTDIRS))\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    # Add a user-defined pattern to the cygpath arguments"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    if [ \"$GRADLE_CYGPATTERN\" !\u003d \"\" ] ; then"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        OURCYGPATTERN\u003d\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    # Now convert the arguments - kludge to limit ourselves to /bin/sh"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    i\u003d0"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    for arg in \"$@\" ; do"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        CHECK\u003d`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        CHECK2\u003d`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if [ $CHECK -ne 0 ] \u0026\u0026 [ $CHECK2 -eq 0 ] ; then                    ### Added a condition"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            eval `echo args$i`\u003d`cygpath --path --ignore --mixed \"$arg\"`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        else"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            eval `echo args$i`\u003d\"\\\"$arg\\\"\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        fi"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        i\u003d`expr $i + 1`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    done"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    case $i in"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        0) set -- ;;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        1) set -- \"$args0\" ;;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        2) set -- \"$args0\" \"$args1\" ;;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        3) set -- \"$args0\" \"$args1\" \"$args2\" ;;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    esac"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "# Escape application args"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "save () {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    for i do printf %s\\\\n \"$i\" | sed \"s/\u0027/\u0027\\\\\\\\\u0027\u0027/g;1s/^/\u0027/;\\$s/\\$/\u0027 \\\\\\\\/\" ; done"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \" \""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "APP_ARGS\u003d`save \"$@\"`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "# Collect all arguments for the java command, following the shell quoting and substitution rules"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname\u003d$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "exec \"$JAVACMD\" \"$@\""
      }
    ],
    "authorContributionMap": {
      "sharadhr": 31,
      "-": 152
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/IO/Input.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.command.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.command.DoneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.command.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A class to accept and parse user inputs from the input stream."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static BufferedReader reader;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final Pattern whitespace \u003d Pattern.compile(\"\\\\s+\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final Pattern slashCommands \u003d Pattern.compile(\"(?i)\\\\/((at)|(by)|(on))\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    static String readline()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return reader.readLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (Exception e)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            System.err.println(\"I/O exception occurred.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /////////////////////////////////////////////////////////////////////////"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    // Instance"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /////////////////////////////////////////////////////////////////////////"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected String line;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected String[] tokens;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Input()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        reader \u003d new BufferedReader(new InputStreamReader(System.in));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Gets the next line in the input stream, and stores it. Returns this object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * for method chaining."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return this {@link Input} object, with the cursor advanced by one line."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Input nextLine()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.line \u003d readline();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.tokens \u003d whitespace.split(this.line.trim());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns the current line of input as a {@link String} array of tokens, where"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * the {@link String} is trimmed and separated by any whitespace character."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return the current line, tokenised."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String[] getTokens()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.tokens \u003d this.tokens.length \u003d\u003d 0 ? whitespace.split(this.line.trim()) : this.tokens;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.tokens;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns the current line of input as a {@link Stream} of {@link String}s,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * trimmed and tokenised by any whitespace character."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return the current line of input as a {@link Stream}\u003c{@link String}\u003e."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Stream\u003cString\u003e getTokenStream()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return Stream.of(this.getTokens());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    String getFirstToken()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.getTokens()[0];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Command getCommand() throws DukeInvalidArgumentException"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        switch (Command.whichCommand(this.getFirstToken()))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                // try"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                // {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                //     tasks.addTask(new Deadline(reader.getFirstToken(), reader.getTime()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                // }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                // catch (DukeException e)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                // {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                //     System.err.println(e);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                //     continue;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                // }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                // try"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                // {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                //     tasks.addTask(new Event(reader.getDetail(), reader.getTime()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                // }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                // catch (DukeException e)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                // {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                //     System.err.println(e);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                //     continue;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                // }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                return new ListCommand(this.tokensWithoutFirst());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                return new DoneCommand(this.tokensWithoutFirst());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                return new DeleteCommand(this.tokensWithoutFirst());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            case EMPTY:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                // writer.say(\"Empty input; please enter something.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            case INVALID:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                // try"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                // {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                //     throw new DukeInvalidCommandException(command, Duke.class.getName());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                // }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                // catch (DukeException e)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                // {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                //     writer.say(\"Invalid command; try again.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                // }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                // continue;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String[] tokensWithoutFirst()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.getTokenStream().skip(1).toArray(String[]::new);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String inputWithoutFirstToken()"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.getTokenStream().skip(1).collect(Collectors.joining(\"\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String getDetail()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return Stream.of(this.tokens).skip(1).takeWhile(slashCommands.asMatchPredicate().negate())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String getTime()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return Stream.of(this.tokens).dropWhile(slashCommands.asMatchPredicate().negate()).skip(1)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void close()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (IOException e)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            System.err.println(\"I/O Exception occurred.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 181
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/IO/Output.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.OutputStreamWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A class to neatly format and write any output from the organiser chat bot,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * Duke, to the standard output."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Output"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    BufferedWriter writer \u003d new BufferedWriter(new OutputStreamWriter(System.out));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    static final String logo \u003d "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            \"\\n ____        _        \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\" "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    static void ioException()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        System.err.println(\"I/O Exception occurred.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /////////////////////////////////////////////////////////////////////////"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    // Instance"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /////////////////////////////////////////////////////////////////////////"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Output()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    void appendWithNewline(String string)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.writer.append(string);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.writer.newLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (Exception e)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            ioException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    void appendWithNewline(String... strings)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Arrays.asList(strings).forEach(this::appendWithNewline);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void add(String message)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.writer.append(message);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (Exception e)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            ioException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Flushes the contents of this writer\u0027s buffer to the standard output."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void say()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.writer.flush();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (Exception e)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            ioException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Writes a specified message (given as a {@link String}) to the standard"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * output."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param message The message to be written"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void say(String message)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.appendWithNewline(message);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.writer.flush();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (Exception e)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            ioException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Writes multiple messages to the standard output. These messages are given as"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * a comma-separated list of {@link String}s."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param messages The list of messages to be written to standard output"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void say(String... messages)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.appendWithNewline(messages);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            writer.flush();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (Exception e)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            ioException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Greets the user."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void sayHello()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.say(\"Hello, this is\" + logo + \"How can I help?\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Bids the user farewell; should be called when program is exiting."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void sayGoodBye()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.say(\"Goodbye, then; see you soon!\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Given a task, tells the user that the task was added to the task list,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * formatted appropriately."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param task The task that was added to the task list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void sayTaskAdded(Task task)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.say(\"This task was added: \", task.toString());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Given a task, tells the user that the task was marked complete, formatted"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * appropriately."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param task The task that was marked complete"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void sayTaskMarkedComplete(Task task)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.say(\"This task has been marked done:\", task.toString());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void sayTaskDeleted(Task task)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.say(\"This task has been deleted:\", task.toString());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void close()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (Exception e)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            ioException();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 175
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/IO/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.nio.file.StandardOpenOption;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A class to handle file read/write operations by the Duke program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Storage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "{"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private Path taskFile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private BufferedReader reader;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private BufferedWriter writer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Storage(String... directory)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.taskFile \u003d Paths.get(\".\", directory).normalize().toAbsolutePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            Files.createDirectories(this.taskFile.getParent());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            if (Files.notExists(this.taskFile))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                Files.createFile(this.taskFile);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.writer \u003d Files.newBufferedWriter(this.taskFile, StandardOpenOption.WRITE, StandardOpenOption.APPEND);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.reader \u003d Files.newBufferedReader(this.taskFile);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (IOException e)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void appendTask(Task task)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            writer.append(task.encode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            writer.newLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            writer.flush();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        catch (IOException e)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void decodeLine(String line)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public TaskList loadFromFile()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 71
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * AddCommand"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class AddCommand extends Command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private CommandName commandName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public AddCommand(String[] commandTokens, CommandName addCommandName)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(commandTokens);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void execute(TaskList tasks, Storage storage)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        switch (this.commandName)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 32
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * Models a possible user command to the Duke program; commands are of type"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * \u0027ADD\u0027, \u0027DELETE\u0027,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public abstract class Command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public enum CommandName"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        TODO, DEADLINE, EVENT, LIST, DONE, DELETE, BY, AT, ON, EMPTY, INVALID, BYE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    };"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected CommandName commandName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected String[] argumentTokens;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static CommandName whichCommand(String token)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        for (CommandName cmdname : CommandName.values())"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            if (token.equalsIgnoreCase(cmdname.toString()))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                return cmdname;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            } else if (token.isBlank())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                return CommandName.EMPTY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return CommandName.INVALID;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Creates a {@link Command}, with a {@link String}[] that contains the tokenised arguments"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * to the command, from the user input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param commandString the tokenised input from the user, as arguments to the command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Command(String[] commandTokens)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.argumentTokens \u003d commandTokens;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public abstract void execute(TaskList tasks, Storage storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 47
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class DeleteCommand extends Command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private int position;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    DeleteCommand(String[] argumentTokens, int position) throws DukeInvalidArgumentException"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(argumentTokens);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.position \u003d position;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (this.argumentTokens.length !\u003d 2 || !this.argumentTokens[1].matches(\"\\\\d+\"))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throw new DukeInvalidArgumentException(null, DeleteCommand.class.getSimpleName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param commandTokens"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws NumberFormatException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeInvalidCommandException"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public DeleteCommand(String[] commandTokens) throws DukeInvalidArgumentException"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this(commandTokens, Integer.parseInt(commandTokens[1]));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void execute(TaskList tasks, Storage storage)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (!(this.position \u003e\u003d 1) \u0026\u0026 this.position \u003c\u003d tasks.numberOfTasks())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            tasks.deleteTaskAtPosition(position);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 43
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * DoneCommand"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class DoneCommand extends Command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private int position;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    DoneCommand(String[] commandTokens, int position) throws DukeInvalidArgumentException"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(commandTokens);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.position \u003d position;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (this.argumentTokens.length !\u003d 2 || !this.argumentTokens[1].matches(\"\\\\d+\"))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throw new DukeInvalidArgumentException(null, DeleteCommand.class.getSimpleName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param commandTokens"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeInvalidArgumentException"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public DoneCommand(String[] commandTokens) throws DukeInvalidArgumentException"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this(commandTokens, Integer.parseInt(commandTokens[1]));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void execute(TaskList tasks, Storage storage)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (!(this.position \u003e\u003d 1) \u0026\u0026 this.position \u003c\u003d tasks.numberOfTasks())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            tasks.deleteTaskAtPosition(position);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 41
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * ListCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class ListCommand extends Command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param commandTokens"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeInvalidCommandException"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public ListCommand(String[] commandTokens) throws DukeInvalidArgumentException"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(commandTokens);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (commandTokens.length !\u003d 1)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throw new DukeInvalidArgumentException(null, ListCommand.class.getSimpleName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void execute(TaskList tasks, Storage storage)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        tasks.listTasks();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 31
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/exception/DukeEmptyDetailException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * An exception thrown when the {@code detail} {@link String} passed to a {@link Task} constructor "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * is empty."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class DukeEmptyDetailException extends DukeException"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final long serialVersionUID \u003d 1127957475772724808L;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public DukeEmptyDetailException(String thrownBy)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(\"Task detail cannot be empty.\", thrownBy);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String toString()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // TODO Auto-generated method stub"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 23
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * An exception thrown to denote that an expected, but invalid program state has been reached. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * These exceptions are straightforward, and should be caught."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class DukeException extends Throwable"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final long serialVersionUID \u003d 7354097854189773198L;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected String thrownBy;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public DukeException(String message, String thrownBy)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.thrownBy \u003d thrownBy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String toString()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"Message:%n%s%nStack trace:%s\", this.getMessage(), getStackTrace());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 23
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/exception/DukeInvalidArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * InvalidArgumentException"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class DukeInvalidArgumentException extends DukeException"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final long serialVersionUID \u003d 5221851007504557801L;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public DukeInvalidArgumentException(String message, String thrownBy)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(message, thrownBy);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 14
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/exception/DukeInvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * Thrown when user input is incorrect for a given correct command, or the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * command does not exist (i.e. the user command resolves to"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * {@link CommandName#INVALID}.)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class DukeInvalidCommandException extends DukeException"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final long serialVersionUID \u003d 5862830938541195307L;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public DukeInvalidCommandException(String command, String thrownBy)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(\"Invalid command: \" + command, thrownBy);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String toString()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"Message:%s%s%nThrown by:%s%nStack trace:%s\", this.getMessage(), this.command,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                this.thrownBy, getStackTrace());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 25
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/exception/DukeInvalidDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * DukeInvalidDateException"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class DukeInvalidDateException extends DukeException"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final long serialVersionUID \u003d 1967070878565904626L;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private String dateString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public DukeInvalidDateException(String message, String thrownBy, String dateString)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(\"Invalid date format: \", thrownBy);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.dateString \u003d dateString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String toString()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"Message:%s%s%nThrown by:%s%nStack trace:%s\", this.getMessage(), "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                this.dateString,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                this.thrownBy,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                getStackTrace());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 26
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeEmptyDetailException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidDateException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A Deadline, with a date-time group when it is due."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Deadline extends Task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private ZonedDateTime by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    Deadline(String detail, ZonedDateTime by) throws DukeEmptyDetailException"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(detail);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Creates a deadline with a specified detail, and a date-time to be done by."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param detail the deadline detail"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param by     the date-time to be done by"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeEmptyDetailException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeInvalidArgumentException if the detail is empty."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Deadline(String detail, String by) throws DukeEmptyDetailException, DukeInvalidDateException"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this(detail, ZonedDateTime.now());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public char getTaskTypeIcon()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return \u0027D\u0027;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String toString()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"[%c]%s (by: %s)\", this.getTaskTypeIcon(), super.toString(), this.by);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String encode()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"[%c]%s (due on: %s)\", this.getTaskTypeIcon(), super.toString(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                this.by.format(DateTimeFormatter.ofPattern(\"dd/MMM/uuuu hh:mma z\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    // @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    // public String toString()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    // {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    //     return String.format(\"[%c]%s (by: %s)\", this.getTaskTypeIcon(), super.toString(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    //             this.byString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 60
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/task/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Input;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Output;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Duke"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static Input reader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    static Output writer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    static Storage fileRW;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public boolean run() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Runs the main program loop, and returns {@code false} when the user says"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * \u0027bye\u0027."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return {@code false} when the user says \u0027bye\u0027; otherwise, never returns."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static boolean programLoop()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        boolean exitLoop \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // do"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //     Command cmd \u003d Command.whichCommand((command \u003d reader.nextLine().getFirstToken()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //     exitLoop \u003d cmd.equals(Command.BYE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //     switch (cmd)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //     {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //         case TODO:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             try"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //                 tasks.addTask(new Todo(reader.inputWithoutFirstToken()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             catch (DukeException e)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //                 System.err.println(e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //                 continue;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //         case DEADLINE:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             try"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //                 tasks.addTask(new Deadline(reader.getFirstToken(), reader.getTime()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             catch (DukeException e)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //                 System.err.println(e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //                 continue;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //         case EVENT:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             try"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //                 tasks.addTask(new Event(reader.getDetail(), reader.getTime()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             catch (DukeException e)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //                 System.err.println(e);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //                 continue;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //         case LIST:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             tasks.listTasks();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //         case DONE:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             tasks.getTaskAtPosition(Integer.parseInt(reader.inputWithoutFirstToken())).markComplete();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //         case DELETE:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                    "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //         case EMPTY:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             writer.say(\"Empty input; please enter something.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             continue;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //         case INVALID:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             try"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //                 throw new DukeInvalidCommandException(command, Duke.class.getName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             catch (DukeException e)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //                 writer.say(\"Invalid command; try again.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             continue;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //         case BYE:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //         default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //             break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        //     }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // } while (!exitLoop);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // return exitLoop;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Cleans up objects and quits the program by calling {@link System#exit(int)}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static void exit()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        writer.sayGoodBye();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        reader.close();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static void main(String[] args)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // Initialises file and UI I/O"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        fileRW \u003d new Storage(\"data\", \"duke.txt\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        reader \u003d new Input();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        writer \u003d new Output();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // Greets the user."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        writer.sayHello();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // Creates the task list"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (programLoop()) exit();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 131
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeEmptyDetailException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidDateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * An Event, with a detail, a start time, and an end time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Event extends Task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected String duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected ZonedDateTime startTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected ZonedDateTime endTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    Event(String detail, ZonedDateTime startTime, ZonedDateTime endTime) throws DukeEmptyDetailException"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(detail);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Creates an Event with a specified detail, and a {@link String} that specifies"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * the duration of the Event. The actual starting and ending"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * {@link ZonedDateTime} instance variables are parsed from this string."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param detail The Event detail"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param timeString the {@link String} describing the duration of the event"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeEmptyDetailException if {@code detail} is blank (as specified by {@link String#isBlank()})"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeInvalidDateException if the date cannot be parsed into a starting and ending date"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Event(String detail, String timeString) throws DukeEmptyDetailException, DukeInvalidDateException"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this(detail, ZonedDateTime.now(), ZonedDateTime.now());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public char getTaskTypeIcon()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return \u0027E\u0027;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String toString()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"[%c]%s (at: %s)\", this.getTaskTypeIcon(), super.toString(), this.duration);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String encode()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"%c,%d,%s,%s,%s\", this.getTaskTypeIcon(), this.complete ? 1 : 0, this.detail,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                this.startTime);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 59
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeEmptyDetailException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A Task class that allows creating a static list of tasks, that can be added"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * to,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * iterated through and polled for contents, or deleted from."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * Also allows initialising an instance of a Task, which come with appropriate"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * instance methods."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public abstract class Task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    // A list of tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected static ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected String detail;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected boolean complete;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    Task()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.detail \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.complete \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Initialises a {@link Task} with some specified {@code detail}, and is set as"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * incomplete."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param name the task detail"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeEmptyDetailException if {@code detail} is blank, as specified by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                                  {@link String#isBlank()}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected Task(String detail) throws DukeEmptyDetailException"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (detail.isBlank())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throw new DukeEmptyDetailException(this.getClass().getName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.detail \u003d detail;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns a character representing the completion state of this task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return {@code \u0027✔\u0027} if complete, {@code \u0027✘\u0027} otherwise"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public char getCompleteIcon()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return complete ? \u0027✔\u0027 : \u0027✘\u0027;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Marks this task as complete, and returns the state of the task (must be"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * {@code true})."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return {@code true} if complete"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public boolean markComplete()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.complete \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Duke.writer.sayTaskMarkedComplete(this);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return complete;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns a character representing the type of Task (To-Do, Deadline, or"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Event)."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return the character representing the task type"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public abstract char getTaskTypeIcon();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public abstract String encode();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String toString()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"[%c]\\t %s\", this.getCompleteIcon(), this.detail);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 88
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class TaskList"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public TaskList()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param task A task to be added to the list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return {@code true} if task was successfully added (as specified by"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *         {@link ArrayList#add})"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public boolean addTask(Task task)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // Was the task successfully added to the list?"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        boolean added \u003d Task.tasks.add(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Duke.writer.sayTaskAdded(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Duke.fileRW.appendTask(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return added;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private Task getTaskAtIndex(int index) throws IndexOutOfBoundsException"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns a task at {@code position}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param position The 1-indexed position of the task in the list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return The task at the specified {@code position}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws IndexOutOfBoundsException if {@code position}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                                   ≥ size of tasks list + 1"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Task getTaskAtPosition(int position) throws IndexOutOfBoundsException"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.getTaskAtIndex(position - 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Deletes the task at the specified {@code position}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param position the (1-indexed) position of the task to be deleted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void deleteTaskAtPosition(int position)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Duke.writer.sayTaskDeleted(this.getTaskAtPosition(position));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        tasks.remove(position - 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Prints the tasks in this list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void listTasks()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (!Task.tasks.isEmpty())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            Duke.writer.say(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            int listNumber \u003d 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            for (Task task : Task.tasks)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                Duke.writer.add(String.format(\"%d.%s%n\", listNumber++, task));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            Duke.writer.say();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        else Duke.writer.say(\"You have no tasks in your list.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\tpublic int numberOfTasks()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\t{"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\t\treturn this.tasks.size();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 90
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeEmptyDetailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A To-Do; effectively the same as the inherited abstract class, {@link Task}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Todo extends Task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Creates a Todo with some detail. "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param detail the Todo detail"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeInvalidArgumentException if the detail is blank"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Todo(String detail) throws DukeEmptyDetailException"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(detail);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public char getTaskTypeIcon()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return \u0027T\u0027;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String toString()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"[%c]%s\", this.getTaskTypeIcon(), super.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String encode()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"%c,%d,%s\", "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                this.getTaskTypeIcon(), this.complete ? 1 : 0, this.detail);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 39
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\sharadhr\\duke\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "java -classpath ..\\bin\\main sharadhr.duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 21
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/sharadhr/duke/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 34
    }
  }
]
