[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "group \u0027sharadhr.duke\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    mainClassName \u003d \"sharadhr.duke.Duke\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 5,
      "-": 19
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Input;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Output;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static Input input;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static Output output;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static Storage fileRW;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public boolean run() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Runs the main program loop."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return {@code false} when the user says \u0027bye\u0027; otherwise, never returns."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static boolean programLoop() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        boolean exitLoop \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        input.nextLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Cleans up objects and quits the program by calling {@link System#exit(int)}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static void exit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        output.sayGoodBye();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        input.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        output.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // Initialises file and UI I/O"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        fileRW \u003d new Storage(\"data\", \"duke.txt\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        input \u003d new Input();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        output \u003d new Output();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // Greets the user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        output.sayHello();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // Creates the task list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (programLoop())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            exit();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 61
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/IO/Input.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.Duke;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.command.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.command.ByeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.command.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.command.DoneCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.command.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.command.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A class to accept and parse user inputs from the input stream."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Input {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static BufferedReader reader;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final Pattern whitespace \u003d Pattern.compile(\"\\\\s+\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final Pattern slashCommands \u003d Pattern.compile(\"(?i)\\\\/((from)|(to)|(at)|(by)|(on))\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    static String readline() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return reader.readLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            System.err.println(\"I/O exception occurred.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /////////////////////////////////////////////////////////////////////////"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    // Instance"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /////////////////////////////////////////////////////////////////////////"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected String line;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected String[] tokens;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Input() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        reader \u003d new BufferedReader(new InputStreamReader(System.in));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Gets the next line in the input stream, and stores it. Returns this object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * for method chaining."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return this {@link Input} object, with the cursor advanced by one line."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Input nextLine() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.line \u003d readline();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.tokens \u003d whitespace.split(this.line.trim());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns the current line of input as a {@link String} array of tokens, where"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * the {@link String} is trimmed and separated by any whitespace character."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return the current line, tokenised."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String[] getTokens() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.tokens \u003d this.tokens.length \u003d\u003d 0 ? whitespace.split(this.line.trim()) : this.tokens;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.tokens;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns the current line of input as a {@link Stream} of {@link String}s,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * trimmed and tokenised by any whitespace character."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return the current line of input as a {@link Stream}\u003c{@link String}\u003e."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Stream\u003cString\u003e getTokenStream() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return Stream.of(this.getTokens());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    String getFirstToken() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.getTokens()[0];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Command getCommand() throws DukeInvalidArgumentException, DukeInvalidCommandException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        String commandString \u003d this.getFirstToken();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Command.CommandName cmd \u003d Command.whichCommand(commandString);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        switch (cmd) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return new AddCommand(this.getDetail(), cmd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return new AddCommand(this.getDetail(), this.getFirstTimeString(), cmd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return new AddCommand(this.getDetail(), this.getFirstTimeString(), this.getNextTimeString(), cmd);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return new ListCommand(this.tokensWithoutFirst());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return new DoneCommand(this.tokensWithoutFirst());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return new FindCommand(this.tokensWithoutFirst());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return new DeleteCommand(this.tokensWithoutFirst());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case EMPTY:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            Duke.output.say(\"Empty input; please enter something.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case INVALID:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throw new DukeInvalidCommandException(commandString, Input.class.getSimpleName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            return new ByeCommand(commandString);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String[] tokensWithoutFirst() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.getTokenStream().skip(1).toArray(String[]::new);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String inputWithoutFirstToken() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.getTokenStream().skip(1).collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String getDetail() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.getTokenStream().takeWhile(slashCommands.asMatchPredicate().negate())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String getFirstTimeString() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.getTokenStream().dropWhile(slashCommands.asMatchPredicate().negate()).skip(1)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                .takeWhile(slashCommands.asMatchPredicate().negate()).collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String getNextTimeString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.getTokenStream().dropWhile(slashCommands.asMatchPredicate().negate()).skip(1)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                .dropWhile(slashCommands.asMatchPredicate().negate()).skip(1).collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            System.err.println(\"I/O Exception occurred.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 147
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/IO/Output.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.OutputStreamWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A class to neatly format and write any output from the organiser chat bot,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * Duke, to the standard output."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Output {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    BufferedWriter writer \u003d new BufferedWriter(new OutputStreamWriter(System.out));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    static final String logo \u003d \"\\n ____        _        \\n\" + \"|  _ \\\\ _   _| | _____ \\n\" + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\" + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    static void ioException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        System.err.println(\"I/O Exception occurred.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /////////////////////////////////////////////////////////////////////////"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    // Instance"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /////////////////////////////////////////////////////////////////////////"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Output() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    void appendWithNewline(String string) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.writer.append(string);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.writer.newLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            ioException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    void appendWithNewline(String... strings) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Arrays.asList(strings).forEach(this::appendWithNewline);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void add(String message) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.writer.append(message);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            ioException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Flushes the contents of this writer\u0027s buffer to the standard output."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void say() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.writer.flush();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            ioException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Writes a specified message (given as a {@link String}) to the standard"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * output."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param message The message to be written"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void say(String message) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.appendWithNewline(message);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.writer.flush();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            ioException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Writes multiple messages to the standard output. These messages are given as"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * a comma-separated list of {@link String}s."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param messages The list of messages to be written to standard output"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void say(String... messages) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.appendWithNewline(messages);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            writer.flush();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            ioException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Greets the user."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void sayHello() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.say(\"Hello, this is\" + logo + \"How can I help?\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Bids the user farewell; should be called when program is exiting."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void sayGoodBye() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.say(\"Goodbye, then; see you soon!\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Given a task, tells the user that the task was added to the task list,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * formatted appropriately."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param task The task that was added to the task list"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void sayTaskAdded(Task task) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.say(\"This task was added: \", task.toString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Given a task, tells the user that the task was marked complete, formatted"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * appropriately."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param task The task that was marked complete"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void sayTaskMarkedComplete(Task task) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.say(\"This task has been marked done:\", task.toString());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void sayTaskDeleted(Task task) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.say(\"This task has been deleted:\", task.toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            ioException();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 138
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/IO/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.nio.file.StandardOpenOption;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A class to handle file read/write operations by the Duke program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private Path taskFile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private BufferedReader reader;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private BufferedWriter writer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Storage(String... directory) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.taskFile \u003d Paths.get(\".\", directory).normalize().toAbsolutePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            Files.createDirectories(this.taskFile.getParent());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            if (Files.notExists(this.taskFile)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                Files.createFile(this.taskFile);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.writer \u003d Files.newBufferedWriter(this.taskFile, StandardOpenOption.WRITE, "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                    StandardOpenOption.APPEND);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            this.reader \u003d Files.newBufferedReader(this.taskFile);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void appendTask(Task task) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            writer.append(task.encode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            writer.newLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            writer.flush();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void decodeLine(String line) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public TaskList loadFromFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 58
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeEmptyDetailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidDateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * AddCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private Command.CommandName commandName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public AddCommand(String detail, CommandName commandName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(detail);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.commandName \u003d commandName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public AddCommand(String detail, String timeString, CommandName commandName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(detail, timeString);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.commandName \u003d commandName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public AddCommand(String detail, String startString, String endString, CommandName commandName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(detail, startString, endString);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void execute(final TaskList tasks, final Storage storage)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throws DukeEmptyDetailException, DukeInvalidDateException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        switch (this.commandName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            tasks.addTask(new Todo(this.argumentTokens[0]));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            tasks.addTask(new Event(this.argumentTokens[0], this.argumentTokens[1], this.argumentTokens[2]));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            tasks.addTask(new Deadline(this.argumentTokens[0], this.argumentTokens[1]));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 47
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeEmptyDetailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidDateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * ByeCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public ByeCommand(String argumentTokens) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(argumentTokens);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.commandName \u003d CommandName.BYE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (argumentTokens.length() \u003e\u003d 1) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throw new DukeInvalidArgumentException(\"Bye command must have no arguments.\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                    ByeCommand.class.getSimpleName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeEmptyDetailException, DukeInvalidDateException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 28
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeEmptyDetailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidDateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * Models a possible user command to the Duke program; commands are of type"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * \u0027ADD\u0027, \u0027DELETE\u0027,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public enum CommandName {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        TODO, DEADLINE, EVENT, LIST, DONE, FIND, DELETE, BY, AT, ON, EMPTY, INVALID, BYE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    };"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected CommandName commandName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected String argument;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected String[] argumentTokens;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static CommandName whichCommand(String token) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        for (CommandName cmdname : CommandName.values()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            if (token.equalsIgnoreCase(cmdname.toString())) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                return cmdname;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            } else if (token.isBlank()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                return CommandName.EMPTY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return CommandName.INVALID;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Creates a {@link Command}, with a {@link String}[] that contains the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * tokenised arguments to the command, from the user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param commandString the tokenised input from the user, as arguments to the"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                      command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Command(String... argumentTokens) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.argumentTokens \u003d argumentTokens;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public abstract void execute(TaskList tasks, Storage storage)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throws DukeEmptyDetailException, DukeInvalidDateException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 45
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private int position;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    DeleteCommand(String[] argumentTokens, int position) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(argumentTokens);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.commandName \u003d CommandName.DELETE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.position \u003d position;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (this.argumentTokens.length !\u003d 1 || !this.argumentTokens[1].matches(\"\\\\d+\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                || Integer.parseInt(this.argumentTokens[1]) \u003c\u003d 1)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throw new DukeInvalidArgumentException(\"Delete command must be of the format: \u0027delete 12\u0027\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                    DeleteCommand.class.getSimpleName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param commandTokens"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws NumberFormatException"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeInvalidCommandException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public DeleteCommand(String[] commandTokens) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this(commandTokens, Integer.parseInt(commandTokens[1]));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (!(this.position \u003e\u003d 1) \u0026\u0026 this.position \u003c\u003d tasks.numberOfTasks()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            tasks.deleteTaskAtPosition(position);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 41
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * DoneCommand"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private int position;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    DoneCommand(String[] commandTokens, int position) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(commandTokens);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.commandName \u003d CommandName.DONE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.position \u003d position;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (this.argumentTokens.length !\u003d 2 || !this.argumentTokens[1].matches(\"\\\\d+\"))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throw new DukeInvalidArgumentException(null, DeleteCommand.class.getSimpleName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param commandTokens"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeInvalidArgumentException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public DoneCommand(String[] commandTokens) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this(commandTokens, Integer.parseInt(commandTokens[1]));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (!(this.position \u003e\u003d 1) \u0026\u0026 this.position \u003c\u003d tasks.numberOfTasks()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            tasks.deleteTaskAtPosition(position);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 37
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeEmptyDetailException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidDateException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * FindCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public FindCommand(String[] argumentTokens) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(argumentTokens);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (argumentTokens.length \u003e 1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throw new DukeInvalidArgumentException(\"Find command must be of the format: \u0027find \u003ckeyword\u003e\u0027.\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                    this.getClass().getSimpleName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeEmptyDetailException, DukeInvalidDateException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Duke.output.add(\"These tasks match or contain the keyword \u0027\u0027\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Duke.output.say(Stream.of(Duke.tasks.findTasksWithKeyword(argumentTokens[0])).map(Task::toString)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                .toArray(String[]::new));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 33
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.io.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * ListCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param commandTokens"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeInvalidCommandException"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public ListCommand(String[] commandTokens) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(commandTokens);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.commandName \u003d CommandName.LIST;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (commandTokens.length !\u003d 1)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throw new DukeInvalidArgumentException(null, ListCommand.class.getSimpleName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        tasks.listTasks();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 29
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/exception/DukeEmptyDetailException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * An exception thrown when the {@code detail} {@link String} passed to a"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * {@link Task} constructor is empty."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class DukeEmptyDetailException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final long serialVersionUID \u003d 1127957475772724808L;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public DukeEmptyDetailException(String thrownBy) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(\"Task detail cannot be empty.\", thrownBy);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // TODO Auto-generated method stub"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 20
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * An exception thrown to denote that an expected, but invalid program state has"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * been reached. These exceptions are straightforward, and should be caught."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class DukeException extends Throwable {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final long serialVersionUID \u003d 7354097854189773198L;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected String thrownBy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public DukeException(String message, String thrownBy) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.thrownBy \u003d thrownBy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"Message:%n%s%nStack trace:%s\", this.getMessage(), getStackTrace());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 20
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/exception/DukeInvalidArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * InvalidArgumentException"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class DukeInvalidArgumentException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final long serialVersionUID \u003d 5221851007504557801L;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public DukeInvalidArgumentException(String message, String thrownBy) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(message, thrownBy);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 12
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/exception/DukeInvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * Thrown when user input is incorrect for a given correct command, or the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * command does not exist (i.e. the user command resolves to"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * {@link CommandName#INVALID}.)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class DukeInvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final long serialVersionUID \u003d 5862830938541195307L;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public DukeInvalidCommandException(String command, String thrownBy) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(\"Invalid command: \" + command, thrownBy);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"Message:%s%s%nThrown by:%s%nStack trace:%s\", this.getMessage(), this.command,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                this.thrownBy, getStackTrace());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 22
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/exception/DukeInvalidDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * DukeInvalidDateException"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class DukeInvalidDateException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final long serialVersionUID \u003d 1967070878565904626L;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private String dateString;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public DukeInvalidDateException(String thrownBy, String dateString) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(\"Invalid date format: \", thrownBy);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.dateString \u003d dateString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"Message:%s%s%nThrown by:%s%nStack trace:%s\", this.getMessage(), "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                this.dateString, this.thrownBy, getStackTrace());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 21
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/parse/DateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.parse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.time.temporal.TemporalAccessor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.time.temporal.TemporalField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidDateException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A utility class to parse {@link String}s into {@link ZonedDateTime} objects,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * useable by the Duke program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public final class DateParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final String DAY_FORMAT_PATTERN \u003d \"[EEEE][E]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final String DATE_FORMAT_PATTERN \u003d \"[dd][d][\u0027st\u0027][\u0027nd\u0027][\u0027rd\u0027][\u0027th\u0027][\u0027 of\u0027][/][-][ ][LLLL][MMM][L][, ][/][-][ ][uuuu]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final String TIME_FORMAT_PATTERN \u003d \"[kk:mm][[hh][h][[:][.]mm][ ]a][ v]\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final DateTimeFormatter[] FORMATTERS \u003d Stream"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            .of(DAY_FORMAT_PATTERN, DATE_FORMAT_PATTERN, TIME_FORMAT_PATTERN).map(DateTimeFormatter::ofPattern)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            .toArray(DateTimeFormatter[]::new);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final String OUTPUT_FORMAT_PATTERN \u003d \"EEEE dd\u0027st\u0027 MMMM YYYY, hh:mm a v\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static final ZonedDateTime now \u003d ZonedDateTime.now();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static ZonedDateTime parseDateTimeString(String dateTimeString) throws DukeInvalidDateException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        ZonedDateTime returnable \u003d now;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        String[] tokens \u003d dateTimeString.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        for (String token : tokens) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            for (DateTimeFormatter formatter : FORMATTERS) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                returnable \u003d parseTokenWithFormatter(token, formatter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return returnable;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public static String parseZonedDateTime(ZonedDateTime dateTimeGroup) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return DateTimeFormatter.ofPattern(OUTPUT_FORMAT_PATTERN).format(dateTimeGroup);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private static ZonedDateTime parseTokenWithFormatter(String token, DateTimeFormatter formatter)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throws DukeInvalidDateException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Optional\u003cTemporalAccessor\u003e possiblyParsed;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        ZonedDateTime returnable \u003d ZonedDateTime.ofInstant(now.toInstant(), now.getZone());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            possiblyParsed \u003d Optional.of(formatter.parse(token));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            possiblyParsed \u003d Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throw new DukeInvalidDateException(DateParser.class.getSimpleName(), token);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (possiblyParsed.isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            TemporalAccessor parsed \u003d possiblyParsed.get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            for (TemporalField field : formatter.getResolverFields()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                returnable \u003d returnable.with(field, parsed.isSupported(field) ? parsed.get(field) : now.get(field));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return returnable;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 65
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeEmptyDetailException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidDateException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.parse.DateParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A Deadline, with a date-time group when it is due."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private ZonedDateTime by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    Deadline(String detail, ZonedDateTime by) throws DukeEmptyDetailException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(detail);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Creates a deadline with a specified detail, and a date-time to be done by."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param detail the deadline detail"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param by     the date-time to be done by"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeEmptyDetailException if the detail is empty."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeInvalidDateException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Deadline(String detail, String by) throws DukeEmptyDetailException, DukeInvalidDateException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this(detail, DateParser.parseDateTimeString(by));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public char getTaskTypeIcon() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return \u0027D\u0027;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"[%c]%s (by: %s)\", this.getTaskTypeIcon(), super.toString(), this.by);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"[%c]%s (due on: %s)\", this.getTaskTypeIcon(), super.toString(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                this.by.format(DateTimeFormatter.ofPattern(\"dd/MMM/uuuu hh:mma z\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    // @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    // public String toString()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    // {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    // return String.format(\"[%c]%s (by: %s)\", this.getTaskTypeIcon(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    // super.toString(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    // this.byString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 56
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeEmptyDetailException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeInvalidDateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.parse.DateParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * An Event, with a detail, a start time, and an end time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected String duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected ZonedDateTime startTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected ZonedDateTime endTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    Event(String detail, ZonedDateTime startTime, ZonedDateTime endTime) throws DukeEmptyDetailException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(detail);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Creates an Event with a specified detail, and a {@link String} that specifies"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * the duration of the Event. The actual starting and ending"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * {@link ZonedDateTime} instance variables are parsed from this string."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param detail     The Event detail"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param timeString the {@link String} describing the duration of the event"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeEmptyDetailException if {@code detail} is blank (as specified by"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                                  {@link String#isBlank()})"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeInvalidDateException if the date cannot be parsed into a starting"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                                  and ending date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Event(String detail, String startString, String endString)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throws DukeEmptyDetailException, DukeInvalidDateException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this(detail, DateParser.parseDateTimeString(startString), DateParser.parseDateTimeString(endString));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public char getTaskTypeIcon() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return \u0027E\u0027;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"[%c]%s (at: %s)\", this.getTaskTypeIcon(), super.toString(), this.duration);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"%c,%d,%s,%s,%s\", this.getTaskTypeIcon(), this.isComplete ? 1 : 0, this.detail,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                this.startTime, this.endTime);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 56
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.Duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeEmptyDetailException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A Task class that allows creating a static list of tasks, that can be added"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * to, iterated through and polled for contents, or deleted from."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * Also allows initialising an instance of a Task, which come with appropriate"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * instance methods."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    // A list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected static ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected String detail;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected boolean isComplete;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    Task() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.isComplete \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Initialises a {@link Task} with some specified {@code detail}, and is set as"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * incomplete."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param name the task detail"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeEmptyDetailException if {@code detail} is blank, as specified by"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                                  {@link String#isBlank()}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    protected Task(String detail) throws DukeEmptyDetailException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (detail.isBlank())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            throw new DukeEmptyDetailException(this.getClass().getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.detail \u003d detail;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns a character representing the completion state of this task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return {@code \u0027✔\u0027} if complete, {@code \u0027✘\u0027} otherwise"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public char getCompleteIcon() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return isComplete ? \u0027✔\u0027 : \u0027✘\u0027;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Marks this task as complete, and returns the state of the task (must be"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * {@code true})."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return {@code true} if complete"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public boolean markComplete() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.isComplete \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Duke.output.sayTaskMarkedComplete(this);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return isComplete;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns a character representing the type of Task (To-Do, Deadline, or"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Event)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return the character representing the task type"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public abstract char getTaskTypeIcon();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public abstract String encode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"[%c]\\t %s\", this.getCompleteIcon(), this.detail);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 81
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param task A task to be added to the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return {@code true} if task was successfully added (as specified by"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *         {@link ArrayList#add})"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public boolean addTask(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        // Was the task successfully added to the list?"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        boolean added \u003d Task.tasks.add(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Duke.output.sayTaskAdded(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Duke.fileRW.appendTask(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return added;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    private Task getTaskAtIndex(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Returns a task at {@code position}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param position The 1-indexed position of the task in the list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @return The task at the specified {@code position}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws IndexOutOfBoundsException if {@code position} ≥ size of tasks list +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     *                                   1"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Task getTaskAtPosition(int position) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.getTaskAtIndex(position - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Task[] findTasksWithKeyword(String keyword) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.tasks.stream().dropWhile(x -\u003e !x.detail.contains(keyword)).toArray(Task[]::new);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Deletes the task at the specified {@code position}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param position the (1-indexed) position of the task to be deleted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void deleteTaskAtPosition(int position) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        Duke.output.sayTaskDeleted(this.getTaskAtPosition(position));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        tasks.remove(position - 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Prints the tasks in this list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public void listTasks() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        if (!Task.tasks.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            Duke.output.say(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            int listNumber \u003d 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            for (Task task : Task.tasks) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "                Duke.output.add(String.format(\"%d.%s%n\", listNumber++, task));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            Duke.output.say();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        } else"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "            Duke.output.say(\"You have no tasks in your list.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public int numberOfTasks() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 85
    }
  },
  {
    "path": "src/main/java/sharadhr/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "package sharadhr.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "import sharadhr.duke.exception.DukeEmptyDetailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " * A To-Do; effectively the same as the inherited abstract class, {@link Task}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * Creates a Todo with some detail."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @param detail the Todo detail"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     * @throws DukeInvalidArgumentException if the detail is blank"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public Todo(String detail) throws DukeEmptyDetailException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        super(detail);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public char getTaskTypeIcon() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return \u0027T\u0027;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"[%c]%s\", this.getTaskTypeIcon(), super.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "        return String.format(\"%c,%d,%s\", this.getTaskTypeIcon(), this.isComplete ? 1 : 0, this.detail);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 33
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\sharadhr\\duke\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "java -classpath ..\\bin\\main sharadhr.duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 21
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/sharadhr/duke/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sharadhr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sharadhr"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "sharadhr": 34
    }
  }
]
