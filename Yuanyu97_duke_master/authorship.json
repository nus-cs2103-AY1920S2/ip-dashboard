[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    archiveVersion \u003d \"v0.2\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "test {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    mainClassName \u003d \"duke.javafx.Launcher\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 41,
      "-": 21
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Duke() throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this(\"data/duke.txt\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Creates a Duke object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param filePath The file path to Duke.txt."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws IOException If Duke.txt is not found."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Duke(String filePath) throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            File file \u003d new File(\"data\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                //create new data dir and duke.file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                new File(\"data\").mkdir();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            new File(filePath).createNewFile();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the respond by Duke."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param input The command entered by the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The result of the command to be displayed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        PrintStream ps \u003d new PrintStream(baos);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        PrintStream old \u003d System.out;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        System.setOut(ps);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            System.out.flush();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            System.setOut(old);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        } catch (IOException io) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            ui.showSavingError();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        } catch (DateTimeException dt) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            System.out.println(\"      Please enter date in this format: YYYY-MM-DD\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        } catch (IndexOutOfBoundsException iobe) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            System.out.println(\"      Sorry, index is out of bounce.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return baos.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Runs the duke program."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            } catch (IOException io) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                ui.showSavingError();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            } catch (DateTimeException dt) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                System.out.println(\"      Please enter date in this format: YYYY-MM-DD\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 110
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.javafx.MainWindow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Main() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Starts the scene builder."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param stage The stage for the scene."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Terminates the scene builder."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws Exception If program is unable to terminate."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void stop() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        TimeUnit.MILLISECONDS.sleep(50);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 50
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Represents the command of adding a task into the task list. A \u003ccode\u003eAddCommand\u003c/code\u003e object corresponds to a task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * to be added to the task list e.g., \u003ccode\u003eTask\u003c/code\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    Task task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the result of whether this is an exit program command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The result of whether this command can exit the program."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Adds a task to the task list, updating the user interface and storage file. If storage file is invalid, an error"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * message is returned."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param tasksList The task list to be updated."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param ui The user interface to be shown."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param storage The storage file to be updated."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws IOException If the storage file is not found."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void execute(TaskList tasksList, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        tasksList.add(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        ui.taskAdded(task, tasksList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        storage.save(tasksList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 46
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Represents the command of exiting the program. A \u003ccode\u003eByeCommand\u003c/code\u003e object corresponds to the command of exiting"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * the program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the result of whether this is an exit program command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The result of whether this command can exit the program."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Exits the program. If storage file is invalid, an error message is returned."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param tasks The task list to be updated."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param ui The user interface to be to be shown."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param storage The storage file to be updated."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws IOException If the storage file is not found."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        ui.showByeMsg();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 37
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Represents the command to be executed. A \u003ccode\u003eCommand\u003c/code\u003e object corresponds to the command to be executed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Executes the command. If storage file is invalid, an error message is returned."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param tasks The task list to be updated."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param ui The user interface to be to be shown."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param storage The storage file to be updated."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws IOException If the storage file is not found."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the result of whether this is an exit program command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The result of whether this command can exit the program."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 30
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Represents the command of deleting a task using the index of the task. A \u003ccode\u003eDeleteCommand\u003c/code\u003e object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * corresponds to the command of deleting a task using the index e.g., \u003ccode\u003e2\u003c/code\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    int taskNum;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public DeleteCommand(int taskNum) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the result of whether this is an exit program command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The result of whether this command can exit the program."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Deletes a task. If storage file is invalid, an error message is returned."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param tasks The task list to be updated."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param ui The user interface to be to be shown."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param storage The storage file to be updated."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws IOException If the storage file is not found."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Task task \u003d tasks.getTask(taskNum - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        tasks.delete(taskNum - 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        ui.taskDeleted(task, tasks);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 46
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Represents the command of marking a task at the index as done. A \u003ccode\u003eDoneCommand\u003c/code\u003e object corresponds to the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * command of marking the task at the index as done e.g., \u003ccode\u003e2\u003c/code\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    int taskNum;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public DoneCommand(int taskNum) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the result of whether this is an exit program command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The result of whether this command can exit the program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Marks a task as done. If storage file is invalid, an error message is returned."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param tasks The task list to be updated."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param ui The user interface to be to be shown."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param storage The storage file to be updated."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws IOException If the storage file is not found."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        tasks.getTask(taskNum - 1).markDone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        ui.taskDone(tasks.getTask(taskNum - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 44
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Represents the command of finding a task in the task list. A \u003ccode\u003eFindCommand\u003c/code\u003e object corresponds to the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * command of displaying the current task list e.g., \u003ccode\u003e\"book\"\u003c/code\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    String keyword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the result of whether this is an exit program command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The result of whether this command can exit the program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Displays the list of tasks that have the keyword."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param tasks The current task list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param ui The user interface to be updated."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param storage The storage file to be updated."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws IOException If the storage file is not found."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (tasks.findTasks(keyword).isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            System.out.println(\"Sorry, no such keyword in the task list.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            ui.printList(tasks.findTasks(keyword));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 46
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Represents the command of displaying all the available commands in duke. A \u003ccode\u003eByeCommand\u003c/code\u003e object corresponds"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * to the command of displaying the tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the result of whether this is an exit program command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The result of whether this command can exit the program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Displays all the commands in Duke . If storage file is invalid, an error message is returned."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param tasks The task list to be updated."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param ui The user interface to be to be shown."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param storage The storage file to be updated."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws IOException If the storage file is not found."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String intro \u003d \"Here are the available commands:\\n\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String todo \u003d \"1) todo: To add a todo task, enter the command todo followed by the description of the \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + \"task.\\n\" + \"     For example: todo go for a run\\n\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String event \u003d \"2) event: To add an event task, enter the command event followed by the description of \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + \"the task, followed by /at and then finally the date of the event. Take note that the date should be \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + \"entered in this format: YYYY-MM-DD.\\n\" + \"     For example: event project meeting /at   \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + \"2020-12-12\\n\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String deadline \u003d \"3) deadline: To add a deadline task, enter the command deadline followed by the description \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + \"of the task, followed by /by and then finally the date of the event. Take note that the date should \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + \"be entered in this format: YYYY-MM-DD.\\n\" + \"     For example: event return book /at 2020-09-09\\n\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String delete \u003d \"4) delete: To delete a task from the task list, enter the command delete followed by the \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + \"index of the task to be deleted.\\n\" + \"     For example: delete 3\\n\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String done \u003d \"5) done: To mark a task as done, enter the command done followed by the index of the task to \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + \"be marked as done.\\n\" + \"     For example: done 3\\n\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String list \u003d \"6) list: To see all the tasks in the task list, enter the list command.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + \"     For example: list\\n\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String bye \u003d \"7) bye: To terminate the program, enter the bye command.\\n\" + \"     For example: bye\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        System.out.println(intro + todo + event + deadline + delete + done + list + bye);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 52
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Represents the command of displaying the task list. A \u003ccode\u003eListCommand\u003c/code\u003e object corresponds to the command of"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * displaying the current task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the result of whether this is an exit program command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The result of whether this command can exit the program."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Displays the task list. If storage file is invalid, an error message is returned."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param tasks The task list to be updated."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param ui The user interface to be to be shown."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param storage The storage file to be updated."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws IOException If the storage file is not found."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        ui.printList(tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 37
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Represents the error when the user inputs an invalid command. A \u003ccode\u003eDukeException\u003c/code\u003e object corresponds to a"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * an error caused by invalid command e.g., \u003ccode\u003e\"todo\"\u003c/code\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    protected String exception;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public DukeException(String exception) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.exception \u003d exception;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Displays the error message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (exception.equals(\"todo\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return \"      OOPS!!! The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return \"      OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 26
    }
  },
  {
    "path": "src/main/java/duke/javaFX/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke.javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * An example of a custom control using FXML. This control represents a dialog box consisting of an ImageView to"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * represent the speaker\u0027s face and a label containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the dialog to be displayed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param text The text to be displayed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param img The image to be displayed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The dialog box to be displayed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 67
    }
  },
  {
    "path": "src/main/java/duke/javaFX/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke.javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 15
    }
  },
  {
    "path": "src/main/java/duke/javaFX/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke.javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Starts the GUI."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                DialogBox.getDukeDialog(ui.showWelcomeString(), dukeImage)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (response.equals(\"     See ya later alligator!\\n\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            new Thread(() -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    Thread.sleep(500);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                } catch (InterruptedException ie) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    ; //exception handling code"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    Platform.exit();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            }).start();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 74
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.command.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Makes sense of the command entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the command to be executed. If invalid command entered, a invalid command instruction is returned."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param fullCommand The command entered by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The command to be executed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws DukeException If the user enters an invalid command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException, DateTimeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String[] commandSplit \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String firstWord \u003d commandSplit[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        switch (firstWord) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            if (commandSplit.length \u003c 2) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                throw new DukeException(\"todo\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                String description \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                for (int i \u003d 1; i \u003c commandSplit.length; i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    description +\u003d commandSplit[i] + \" \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                return new AddCommand(new Todo(description));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            String deadlineTask \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            for (int i \u003d 1; i \u003c commandSplit.length; i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                deadlineTask +\u003d commandSplit[i] + \" \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            String deadlineDecription \u003d deadlineTask.split(\"/by \")[0];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            String deadlineDate \u003d deadlineTask.split(\"/by \")[1];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return new AddCommand(new Deadline(deadlineDecription,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    LocalDate.parse(deadlineDate.substring(0, deadlineDate.length() - 1))));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            String eventTask \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            for (int i \u003d 1; i \u003c commandSplit.length; i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                eventTask +\u003d commandSplit[i] + \" \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            String eventDescription \u003d eventTask.split(\"/at \")[0];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            String eventDate \u003d eventTask.split(\"/at \")[1];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return new AddCommand(new Event(eventDescription,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    LocalDate.parse(eventDate.substring(0, eventDate.length() - 1))));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            int deleteTaskNum \u003d Integer.parseInt(commandSplit[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return new DeleteCommand(deleteTaskNum);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            int doneTaskNum \u003d Integer.parseInt(commandSplit[1]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return new DoneCommand(doneTaskNum);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            String keyword \u003d commandSplit[1];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return new FindCommand(keyword);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new DukeException(\"\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 83
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Loads or save the storage file as requested. A \u003ccode\u003eStorage\u003c/code\u003e object corresponds to a file represented by the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * file path e.g., \u003ccode\u003e\"duke/src/java\"\u003c/code\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Loads the task list at the start of the program. If the storage file cannot be found, a new one is created and"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * loads that one instead, and tells the user that a new storage file has been created."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The task list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws IOException If the storage file cannot be found."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        File f \u003d new File(filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            String nextLine \u003d s.nextLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            String[] taskString \u003d nextLine.split(\"/\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            assert taskString.length \u003e 1 \u0026\u0026 taskString.length \u003c 5 : \"Wrong format of Duke.txt\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            String taskTitle \u003d taskString[0];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            switch (taskTitle) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                assert taskString.length \u003d\u003d 3 : \"Wrong format of Duke.txt\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                Task todoTask \u003d new Todo(taskString[2]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                if (taskString[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    todoTask.markDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                tasks.add(todoTask);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                assert taskString.length \u003d\u003d 4 : \"Wrong format of Duke.txt\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                Task deadlineTask \u003d new Deadline(taskString[2], LocalDate.parse(taskString[3]));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                if (taskString[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    deadlineTask.markDone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                tasks.add(deadlineTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                assert taskString.length \u003d\u003d 4 : \"Wrong format of Duke.txt\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                Task eventTask \u003d new Event(taskString[2], LocalDate.parse(taskString[3]));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                if (taskString[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    eventTask.markDone();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                tasks.add(eventTask);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Updates the task list. If the storage file cannot be found, an error message is shown."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param taskList The task list to be saved to storage file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws IOException If storage file cannot be found."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void save(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        fw.write(taskList.toStringDukeTasks());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 86
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Represents a deadline task. A \u003ccode\u003eDeadline\u003c/code\u003e object corresponds to a deadline task e.g.,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * \u003ccode\u003e\"project meeting\", LocalDate.parse(\"2020-12-12\")\u003c/code\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    LocalDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Deadline(String description, LocalDate date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the text to be saved into the storage file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The text to be saved to storage file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public String toStringTasks() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return \"D/\" + getStatusIconInBin() + \"/\" + description + \"/\" + date.toString() + \"\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the text representation of the deadline task to be displayed to the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The text representation of the deadline task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String fullDate \u003d date.getMonth().getDisplayName(TextStyle.SHORT, Locale.ENGLISH) + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + Integer.toString(date.getDayOfMonth()) + \" \" + Integer.toString(date.getYear());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by: \" + fullDate + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 38
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Represents an event task. A \u003ccode\u003eEvent\u003c/code\u003e object corresponds to a event task e.g.,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * \u003ccode\u003e\"project meeting\", LocalDate.parse(\"2020-12-12\")\u003c/code\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    LocalDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Event(String description, LocalDate date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the text to be saved into the storage file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The text to be saved to storage file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public String toStringTasks() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return \"E/\" + getStatusIconInBin() + \"/\" + description + \"/\" + date.toString() + \"\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the text representation of the event task to be displayed to the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The text representation of the event task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String fullDate \u003d date.getMonth().getDisplayName(TextStyle.SHORT, Locale.ENGLISH) + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + Integer.toString(date.getDayOfMonth()) + \" \" + Integer.toString(date.getYear());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at: \" + fullDate + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 38
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Represents a task. A \u003ccode\u003eTask\u003c/code\u003e object corresponds to a task e.g.,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * \u003ccode\u003e\"project meeting\"\u003c/code\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the text representation of whether a task is marked as done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The text representation of whether a task is done or not."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return (isDone ? \"[Done] \" : \"[Not Done] \"); //return tick or X symbols"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the text representation of the binary of whether a task is done or not."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The text representation of the binary of whether a task is done or not."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public String getStatusIconInBin() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return (isDone ? \"1\" : \"0\"); //1 means done, 0 means not done"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the text representation of the task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The text representation of the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public abstract String toStringTasks();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the status and the description of the task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The status and description of the task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return getStatusIcon() + description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 54
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Represents a task list. A \u003ccode\u003eTaskList\u003c/code\u003e object corresponds to a task list e.g., \u003ccode\u003eArrayList\u003c/code\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " *     \u003ccode\u003etaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the text representation of the tasks to be saved in the storage file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The text representation of the tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public String toStringDukeTasks() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String taskString \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            taskString +\u003d task.toStringTasks();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assert taskString !\u003d null : \"taskString cannot be null.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return taskString;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param task The task to be added."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Deletes a task in the task list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param taskNum The index of the task to be deleted."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void delete(int taskNum) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        tasks.remove(taskNum);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the result of whether the task list is empty or not."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The boolean result."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the task list that contains the provided keyword."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param keyword The keyword."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The list of tasks that has the keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public TaskList findTasks(String keyword) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            if (task.description.contains(keyword)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                taskList.add(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return new TaskList(taskList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the task required."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param taskNum The index of the task that is required."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The task required."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Task getTask(int taskNum) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return tasks.get(taskNum);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 80
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Represents a todo task. A \u003ccode\u003eTodo\u003c/code\u003e object corresponds to a todo task e.g.,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * \u003ccode\u003e\"project meeting\"\u003c/code\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the text representation of the todo task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The text representation of the todo task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public String toStringTasks() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return \"T/\" + getStatusIconInBin() + \"/\" + description + \"\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the text representation of the todo task to be displayed to the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The text representation of the todo task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 29
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Represents the user interface displayed to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Ui(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Displays the welcome message at the start of the program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String line \u003d \"    ____________________________________________________________\" + \"\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String fiveSpaces \u003d \"      \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        System.out.println(line + fiveSpaces + \"Hello! I\u0027m Duke.\\n\" + fiveSpaces"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + \"Type help to see the available commands.\\n\" + line);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Welcome message formatted tos string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The welcome message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public String showWelcomeString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String fiveSpaces \u003d \"      \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return fiveSpaces + \"Hello! I\u0027m Duke.\\n\" + fiveSpaces + \"Type help to see the available commands.\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Reads the command entered by the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return The text representation of the command entered by the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Displays a long line."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Displays the error when the storage file could not be found."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        System.out.println(\"File not found. Created a new data directory and created a duke.txt inside. \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + \"Data will be stored here.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Displays the error when the storage file could not be updated."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void showSavingError() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        System.out.println(\"File not saved\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Displays the error."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param error The error occurred."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void showError(String error) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        System.out.println(error);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Displays the message to the user that a task has been added."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param task The task that is added."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param taskList The current task list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void taskAdded(Task task, TaskList taskList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        System.out.println(\"     Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        System.out.println(\"       \" + task.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        System.out.println(\"     Now you have \" + Integer.toString(taskList.tasks.size()) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Displays the message to the user that a task has been deleted."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param task The task that is deleted."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param taskList The current task list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void taskDeleted(Task task, TaskList taskList) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        System.out.println(\"     Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        System.out.println(\"       \" + task.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        System.out.println(\"     Now you have \" + Integer.toString(taskList.tasks.size()) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Displays the message to the user that a task has been marked as done."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param task The task that has been marked as done."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void taskDone(Task task) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        System.out.println(\"     Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        System.out.println(\"       \" + task.toString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Displays to the user the current task list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param taskList The current task list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void printList(TaskList taskList) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if(taskList.isEmpty()){"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            System.out.println(\"     Woohoo! You have no tasks to complete! Have a break, have a KitKat!\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            System.out.println(\"     Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.tasks.size(); i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                System.out.println(\"      \" + Integer.toString(i + 1) + \".\" + taskList.getTask(i));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Displays the program termination message."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void showByeMsg() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        System.out.print(\"     See ya later alligator!\\n\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 127
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.javafx.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 19
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    void toStringTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"project meeting \", LocalDate.parse(\"2020-12-12\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String expectedFirst \u003d \"[D][Not Done] project meeting (by: Dec 12 2020)\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String actualFirst \u003d deadline.toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertEquals(expectedFirst, actualFirst);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    void toStringTasksTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"project meeting \", LocalDate.parse(\"2020-12-12\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String expectedSec \u003d \"D/0/project meeting /2020-12-12\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String actualSec \u003d deadline.toStringTasks();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertEquals(expectedSec, actualSec);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 24
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    void toStringTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Task event \u003d new Event(\"project meeting \", LocalDate.parse(\"2020-12-12\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String expectedFirst \u003d \"[E][Not Done] project meeting (at: Dec 12 2020)\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String actualFirst \u003d event.toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertEquals(expectedFirst, actualFirst);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    void toStringTasksTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Task event \u003d new Event(\"project meeting \", LocalDate.parse(\"2020-12-12\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String expectedSec \u003d \"E/0/project meeting /2020-12-12\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String actualSec \u003d event.toStringTasks();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertEquals(expectedSec, actualSec);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 24
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    void toStringTest() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Task todo \u003d new Todo(\"Task\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String expectedFirst \u003d \"[T][Not Done] \" + \"Task\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String actualFirst \u003d todo.toString();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertEquals(expectedFirst, actualFirst);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    void toStringTasksTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Task todo \u003d new Todo(\"Task\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String expectedSec \u003d \"T/0/Task\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String actualSec \u003d todo.toStringTasks();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertEquals(expectedSec, actualSec);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 22
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "      Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "      Whatcha wanna do?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "       [T][Not Done] borrow book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "       [D][Not Done] return book (by: Sunday)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "       [E][Not Done] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "       [E][Done] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "       [D][Done] return book (by: Sunday)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "       [T][Done] borrow book"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "      1.[T][Done] borrow book"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "      2.[D][Done] return book (by: Sunday)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "      3.[E][Done] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "       [D][Done] return book (by: Sunday)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "      1.[T][Done] borrow book"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "      2.[E][Done] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "      OOPS!!! The description of a todo cannot be empty."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "      OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "      See ya later alligator!"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 69
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "todo"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "asnfdian"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 12
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 34
    }
  }
]
