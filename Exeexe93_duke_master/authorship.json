[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "duke.Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for duke.Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 2,
      "-": 37
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    archiveVersion \u003d \"v0.2\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    mainClassName \u003d \"duke.gui.Launcher\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 37,
      "-": 19
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "## Description"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "A personal assistant for tracking the tasks to be done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003cimg src\u003d\"Ui.png\" alt\u003d\"Screenshot for Duke GUI\" about\u003d\"Screenshot for Duke GUI\" align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "### Adding Task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "* You can add task as either Todo or Event or Deadline to the list to `task.txt`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "### Delete Task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "* You can delete task from the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "### Mark Task as Done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "* You can mark the task as done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "### List Tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "* You can list the tasks out to see."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "### Storing tasks to `task.txt`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "* You can store the list of tasks into hard disk in the file `task.txt`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "### Sorting tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "* You would not required to sort the tasks manually. \u003cbr/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Duke will sort the tasks according to date and time first. If it is same for both tasks, \u003cbr/\u003e "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Duke will sort them according to their descriptions in alphabetical order."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "### Exit the program"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "* You could close the GUI by input `bye`."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "### `todo` - Add todo to the list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Inform duke to add the todo with the description provided to the list and update the list in `task.txt`."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "`todo read topics for CS2103`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "```"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "  [T][N] read topics for CS2103T"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Now you have 1 task in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "```"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003cimg src\u003d\"images/Todo.png\" alt\u003d\"Screenshot for todo command\" about\u003d\"Screenshot for todo command\" align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "### `deadline` - Add deadline to the list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Inform duke to add the deadline with the description and due date provided to the list "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "and update the list in `task.txt`. "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "`deadline project /by 2020-02-20`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "```"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " [D][N] project (by: Feb 20 2020)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Now you have 1 task in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "```"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003cimg src\u003d\"images/Deadline.png\" alt\u003d\"Screenshot for deadline command\" about\u003d\"Screenshot for deadline command\" align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "### `event` - Add event to the list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Inform duke to add the event with the description, date and time provided to the list "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "and update the list in `task.txt`. "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "`event party /at 2020-03-12 2215`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "```"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " [E][N] party (at: Mar 12 2020 2215)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Now you have 1 task in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "```"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003cimg src\u003d\"images/Event.png\" alt\u003d\"Screenshot for event command\" about\u003d\"Screenshot for event command\" align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "### `List` - List the tasks"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Tell Duke to list all of the tasks out."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Expected outcomes:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "* When there are three tasks in the list:\u003cbr/\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "  1.[E][N] party (at: Mar 12 2020 2215)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "  2.[T][N] do readme for CS2103T iP"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "  3.[T][Y] read topics for cs2103T"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "```"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003cimg src\u003d\"images/List.png\" alt\u003d\"Screenshot for list command\" about\u003d\"Screenshot for list command\" align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "* When there are no task in the list: \u003cbr/\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "`Horray! You do not have any task now!`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003cimg src\u003d\"images/ListWithNoTask.png\" alt\u003d\"Screenshot for empty list\" about\u003d\"Screenshot for empty list\" align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "### `done` - Mark the task done"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Tell Duke to mark the task as done."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Expected outcomes:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "```"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "  [T][Y] do readme for CS2103T iP"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003cimg src\u003d\"images/Done.png\" alt\u003d\"Screenshot for done command\" about\u003d\"Screenshot for done command\" align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "### `delete` - Remove the specific task at the index from the list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Tell Duke to remove the specific task at the index from the list and \u003cbr/\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " update the list in `task.txt`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Expected outcomes:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Nice! I\u0027ve removed this task: "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "[E][N] party (at: Mar 12 2020 2215)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "```"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003cimg src\u003d\"images/Delete.png\" alt\u003d\"Screenshot for delete command\" about\u003d\"Screenshot for delete command\" align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "### `bye` - Exit the program"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " Say goodbye to Duke and exit the program."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " Example of usage: "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " `bye`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " Expected outcomes:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " `Alright! See you next time!`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003cimg src\u003d\"images/Bye.png\" alt\u003d\"Screenshot for bye command\" about\u003d\"Screenshot for bye command\" align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "Credit to Jeffry Lum for the fxml and java files for JAVAFX GUI - \u003cbr/\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "[JavaFx TutorialPart 4](https://github.com/nus-cs2103-AY1920S2/duke/blob/master/tutorials/javaFxTutorialPart4.md)."
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 154,
      "-": 14
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eDuke Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Main program of the Duke program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author Eng Xuan En"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private boolean isGui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Class constructor of Duke."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            storage \u003d new Storage(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            taskList \u003d new TaskList(storage.getTaskListing());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            ui.reply(e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Return the reply message back to display in GUI."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param input input from the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return reply message in String format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            response \u003d command.executeWithoutReply(taskList, storage, ui);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            assert response !\u003d null : \"Response is null\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Give greeting message."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Return greeting message in String format"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String getGreeting() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return ui.greetWithoutPrint();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Run the main part of Duke programme. Repeat read and process the user input till the user"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * type bye."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ui.setOutline();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        boolean isExitLoop \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        while (!isExitLoop) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                String userInput \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                ui.printUserCommand(userInput);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                Command command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                command.execute(taskList, storage, ui);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                isExitLoop \u003d command.isExitLoop();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                ui.reply(e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        storage.closeScanner();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ui.closeScanner();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Set Ui output to not Gui."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setUiToNotGui() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (!isGui) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            ui.setNotGui();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Set consoleOutput to false."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setNotGui() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        isGui \u003d false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * The main programme runs here."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param args input from the console"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        duke.setUiToNotGui();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 107,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eDukeException Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Exception for Duke which holds the message to be print."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author Eng Xuan En"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 13
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eCommand class\u003c/h1\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * The Command class basically take note of what type of Command they are and the data required"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * for individual command, which is save in two variable, type and details respectively. Different type"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * of command will execute differently by run the same method, execute."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author Eng Xuan En"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    protected CommandType type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    protected List\u003cString\u003e details;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Constructor of Command class which requires the command type and set the variable"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * isExit to false."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param type type of the command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Command(CommandType type) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Constructor of Command class which requires both command type and a list of Strings"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * which store the relevant data required for certain command. Following is how the List of Strings"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * organized:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * index               data"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * 0                 command type"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * 1                 description of the task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * 2                 due date of the \"Deadline\" task / duration of the \"Event\" task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param type    type of the command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param details data required for certain command"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Command(CommandType type, List\u003cString\u003e details) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Get the command type."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return type of the command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public CommandType getCommandType() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Execute the command based on the type of the command and reply the relevant message."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param taskList Stored the tasks when the program runs"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param storage  Stored the tasks when task listing being edit"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param ui       Print the message out to console"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DukeException occurs when the method is called as parent class"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void execute(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        System.out.print(executeWithoutReply(taskList, storage, ui));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Execute the command based on the type of the command."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param taskList Stored the tasks when the program runs"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param storage  Stored the tasks when task listing being edit"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param ui       Print the message out to console"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DukeException occurs when the method is called as parent class"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String executeWithoutReply(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        throw new DukeException(\"To be implemented in child class\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public boolean isExitLoop() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 89
    }
  },
  {
    "path": "src/main/java/duke/command/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eCommand Type Enum\u003c/h1\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * This enum stores different commands that Duke can understand."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * It able to give the command type in String format."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author Eng Xuan En"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    DELETE(\"delete\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    DONE(\"done\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    BYE(\"bye\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    LIST(\"list\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    TODO(\"todo\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    EVENT(\"event\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    FIND(\"find\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private final String command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Constructor of the enum CommandType which pair the string to its respective enum constant."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param command value to pair with the CommandType"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    CommandType(String command) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Get the command type in String format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return the string value of the command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 39
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eDeadlineCommand Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * A subclass of Command class. Add new deadline into taskList and update the data into the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * hard disk by calling storage.saveTask(taskList). Trigger ui to reply to the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * that the task has been added."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author Eng Xuan En"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Class constructor for DeadlineCommand which using command type and List of Strings."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param type    type of the command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param details data required for the deadline task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public DeadlineCommand(CommandType type, List\u003cString\u003e details) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        super(type, details);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Add new Deadline into taskList and update the hard disk. Furthermore, return the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * message back in String format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param taskList Stored the tasks when the program runs"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param storage  Stored the tasks when task listing being edit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param ui       Print the message out to console"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Reply message to user"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DukeException throws when problem saving task to hard disk and invalid date format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String executeWithoutReply(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Task task \u003d new Deadline(details.get(1), details.get(2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assert taskList.getTask(taskList.getAmountOfTask()).equals(task) : \"Task is not added into taskList\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return ui.replyAdded(taskList.getAmountOfTask(), task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 52
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eDeleteCommand Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * A subclass of Command class. Delete task from taskList and update the data in the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * hard disk by calling storage.saveTask(taskList). Trigger ui to reply to the user"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * that the task has been deleted."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author Eng Xuan En"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Class constructor for DeleteCommand which using command type and List of Strings."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param type    type of the command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param details index of which the task should be deleted in taskList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public DeleteCommand(CommandType type, List\u003cString\u003e details) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        super(type, details);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Delete the task in the taskList and update the hard disk. Furthermore, return the"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * message back in String format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param taskList Stored the tasks when the program runs"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param storage  Stored the tasks when task listing being edit"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param ui       Print the message out to console"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Reply message to user"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DukeException throws when problem saving task to hard disk and invalid index of the task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *                       located in taskList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String executeWithoutReply(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            int num \u003d Integer.parseInt(details.get(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            Task task \u003d taskList.deleteTask(num);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return ui.replyDelete(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new DukeException(\"Please give a valid number in this format: delete [number]\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 54
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eDoneCommand Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * A subclass of Command class. Mark the task as done in the taskList and update the data into the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * hard disk by calling storage.saveTask(taskList). Trigger ui to reply to the user"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * that the task has been marked done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author Eng Xuan En"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Class constructor for DoneCommand which using command type and List of Strings."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param type    type of the command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param details index where the task is located in taskList to be marked done"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public DoneCommand(CommandType type, List\u003cString\u003e details) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        super(type, details);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Mark the task as done in the taskList and update the hard disk. Furthermore, return the"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * message back in String format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param taskList Stored the tasks when the program runs"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param storage  Stored the tasks when task listing being edit"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param ui       Print the message out to console"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Reply message to user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DukeException throws when problem saving task to hard disk and invalid index where the task located"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String executeWithoutReply(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            int num \u003d Integer.parseInt(details.get(1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            taskList.markDone(num);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            assert taskList.getTask(num).getStatus() : \"Task is not mark done!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return ui.replyDone(taskList.getTask(num));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new DukeException(\"Please input in this format: done [number]\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 54
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eEventCommand Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * A subclass of Command class. Add new event into taskList and update the data into the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * hard disk by calling storage.saveTask(taskList). Trigger ui to reply to the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * that the task has been added."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author Eng Xuan En"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Class constructor for EventCommand which using command type and List of Strings."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param type    type of the command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param details data required for the event task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public EventCommand(CommandType type, List\u003cString\u003e details) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        super(type, details);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Add new Event into taskList and update the hard disk. Furthermore, return the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * message back in String format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param taskList Stored the tasks when the program runs"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param storage  Stored the tasks when task listing being edit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param ui       Print the message out to console"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Reply message to user"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DukeException throws when problem saving task to hard disk and invalid date/time format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String executeWithoutReply(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Task task \u003d new Event(details.get(1), details.get(2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assert taskList.getTask(taskList.getAmountOfTask()).equals(task) : \"Task is not added into taskList\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return ui.replyAdded(taskList.getAmountOfTask(), task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 52
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eExitCommand Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * A subclass of Command class. Trigger ui to say goodbye to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author Eng Xuan En"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Class constructor of ExitCommand which takes in the CommandType."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param type type of the command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ExitCommand(CommandType type) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        super(type);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Return goodbye message back in String format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param taskList Stored the tasks when the program runs"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param storage  Stored the tasks when task listing being edit"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param ui       Print the message out to console"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Return goodbye message back"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String executeWithoutReply(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return ui.replyInString(\"Alright! See you next time!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 37
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eFindCommand Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * A subclass of Command class. It uses one keyword to find any"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * tasks\u0027 names with the keyword and list it to the user via ui."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author Eng Xuan En"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Class constructor of Find. It takes in the Command type and the keyword."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param type    type of the command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param details keyword that required to find"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public FindCommand(CommandType type, List\u003cString\u003e details) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        super(type, details);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Search any task with the keyword and return list back in String."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param taskList Stored the tasks when the program runs"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param storage  Stored the tasks when task listing being edit"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param ui       Print the message out to console"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Return list back"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String executeWithoutReply(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        List\u003cTask\u003e result \u003d taskList.findTask(details.get(1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return ui.replyTaskFound(result);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 41
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eListCommand Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * A subclass of Command class. Trigger ui to list the tasks in the taskListing to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author Eng Xuan En"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Class constructor of the ListCommand which takes in command type."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param type type of the command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ListCommand(CommandType type) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        super(type);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Return the list back in String format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param taskList Stored the tasks when the program runs"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param storage  Stored the tasks when task listing being edit"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param ui       Print the message out to console"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Return list back"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String executeWithoutReply(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return ui.replyListing(taskList.getListing());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 36
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eTodoCommand Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * A subclass of Command class. Add new todo into taskList and update the data into the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * hard disk by calling storage.saveTask(taskList). Trigger ui to reply to the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * that the task has been added."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author Eng Xuan En"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Class constructor for TodoCommand which using command type and List of Strings."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param type    type of the command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param details data required for the todo task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public TodoCommand(CommandType type, List\u003cString\u003e details) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        super(type, details);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Add new todo into taskList and update the hard disk. Furthermore, return the reply message"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * back in String format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param taskList Stored the tasks when the program runs"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param storage  Stored the tasks when task listing being edit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param ui       Print the message out to console"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Return message back"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DukeException throws when problem saving task to hard disk and invalid date/time format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String executeWithoutReply(TaskList taskList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Task task \u003d new Todo(details.get(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assert taskList.getTask(taskList.getAmountOfTask()).equals(task) : \"Task is not added into taskList\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return ui.replyAdded(taskList.getAmountOfTask(), task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 52
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author Exeexe93-reused"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    //Reused from https://github.com/Exeexe93/duke/blob/master/tutorials/javaFxTutorialPart4.md."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Set the text and image based on the arguments into the dialog box."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param text text to display in dialog box"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param img  image to display in dialog box"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        loadFxml();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author Exeexe93-reused"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    //Reused from https://github.com/nus-cs2103-AY1920S2/duke/blob/master/tutorials/javaFxTutorialPart4.md"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    //with minor modifications"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Load the style from DialogBox.fxml and set the controller to this instance and load it."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Print out any IOException occurs in the terminal."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private void loadFxml() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            //@@author Exeexe93"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    //@@author Exeexe93-reused"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    //Reused from https://github.com/nus-cs2103-AY1920S2/duke/blob/master/tutorials/javaFxTutorialPart4.md."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author Exeexe93-reused"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    //Reused from https://github.com/nus-cs2103-AY1920S2/duke/blob/master/tutorials/javaFxTutorialPart4.md."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Return user Dialog Box with the text and image in it."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param text text to be print out in dialog box"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param img  image to be display in dialog box"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return DialogBox with the text and image in it"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author Exeexe93-reused"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    //Reused from https://github.com/nus-cs2103-AY1920S2/duke/blob/master/tutorials/javaFxTutorialPart4.md."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Return Duke Dialog Box with the text and image in it. Invert the dialog object around the vertical axis."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param text text to be print out in dialog box"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param img  image to be display in dialog box"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return DialogBox with the text and image in it"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 100,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/gui/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author Exeexe93-reused"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    //Reused from https://github.com/nus-cs2103-AY1920S2/duke/blob/master/tutorials/javaFxTutorialPart4.md."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Main programs begins here for GUI."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param args user input from GUI."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static void main(String... args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 19,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/gui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * This is where the program run when startup for the GUI. It set up the components such as Scene and ArchorPane"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * before start the window. Print any exception occurs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param stage window for the other components to set up and display to user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            stage.setScene(prepareScene(loadFxml()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            System.out.print(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author Exeexe93-reused"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    //Reused from https://github.com/nus-cs2103-AY1920S2/duke/blob/master/tutorials/javaFxTutorialPart4.md."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Load the MainWindow fxml file and connect logic to MainWindow controller."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Ui style loaded."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private AnchorPane loadFxml() throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        //@@author Exeexe93"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        AnchorPane ap \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        //@@author Jeffry Lum"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            //@@author Exeexe93"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new DukeException(\"Error loading the fxml file from MainWindow.fxml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return ap;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Prepare scene based on the component given."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Scene prepareScene(AnchorPane component) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return new Scene(component);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Delay 800ms to close window when an exit request received."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws Exception Occurs when sleep method being interrupted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void stop() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        TimeUnit.MILLISECONDS.sleep(800);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 77,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author Exeexe93-reused"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    //Reused from https://github.com/nus-cs2103-AY1920S2/duke/blob/master/tutorials/javaFxTutorialPart4.md"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    //with minor modifications."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Initialise the scrollPane."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Set Duke object to current duke and print the display message to the user with the dukeImage."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param d Duke object to be stored"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        //@@author Exeexe93"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(d.getGreeting(), dukeImage));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    //@@author Jeffry Lum"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * and then appends them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Finally exit the window if response equals to the goodbye message."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        //@@author Exeexe93"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        showDialogBoxes(input, response);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        //@@author Jeffry Lum"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        //@@author Exeexe93"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        checkIsExit(response);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Show both user dialog box and Duke dialog box with the images and message printed in GUI."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param userInput Input from user"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param response  Reply message to user"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private void showDialogBoxes(String userInput, String response) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        //@@author Exeexe93-reused"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        //Reused from https://github.com/nus-cs2103-AY1920S2/duke/blob/master/tutorials/javaFxTutorialPart4.md."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                DialogBox.getUserDialog(userInput, userImage),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        );"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    //@@author Exeexe93"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Check whether is it goodbye message, if yes, close gui."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param response Message reply to user"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private void checkIsExit(String response) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (response.equals(\"     Alright! See you next time!    \\n\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 99,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eParser Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * This class process the data in String format and give back a Command depending on the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * data processed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author Eng Xuan En"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Process the data and return a command depending on the data processed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param input String input to be processed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Command to be executed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DukeException throws when the invalid input occurs"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        List\u003cString\u003e data \u003d processUserInput(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        switch (CommandType.valueOf(data.get(0).toUpperCase())) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return new ListCommand(CommandType.LIST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return new DeleteCommand(CommandType.DELETE, data);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return new DoneCommand(CommandType.DONE, data);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return new TodoCommand(CommandType.TODO, data);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return new EventCommand(CommandType.EVENT, data);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return new DeadlineCommand(CommandType.DEADLINE, data);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return new ExitCommand(CommandType.BYE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return new FindCommand(CommandType.FIND, data);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new DukeException(\"Are you sure you are giving the correct command?\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Process the user input and store the relevant data into List of Strings and return it back."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param userInput String input to be processed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return List of Strings which relevant data required for the command"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DukeException throws when invalid String input format"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static List\u003cString\u003e processUserInput(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (!userInput.equals(CommandType.BYE.getCommand())) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            if (userInput.equals(CommandType.LIST.getCommand())) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                result.add(CommandType.LIST.getCommand());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            } else if (userInput.startsWith(CommandType.DELETE.getCommand())) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    result.add(CommandType.DELETE.getCommand());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    result.add(userInput.substring(7).strip());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    throw new DukeException(\"Please input the index of the task to delete!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            } else if (userInput.startsWith(CommandType.DONE.getCommand())) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    if (userInput.charAt(4) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        result.add(CommandType.DONE.getCommand());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        result.add(userInput.substring(5));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        throw new DukeException(\"Please input in this format: done [number]\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    throw new DukeException(\"Please input in this format: done [number]\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            } else if (userInput.startsWith(CommandType.FIND.getCommand())) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    if (userInput.charAt(4) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        String keyword \u003d userInput.substring(5).stripLeading();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        if (keyword.equals(\"\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                            throw new DukeException(\"I cannot find the task without any keyword!\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        result.add(CommandType.FIND.getCommand());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        result.add(keyword);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        throw new DukeException(\"Please input in this format: find [keyword]\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    throw new DukeException(\"Please input in this format: find [keyword]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                result \u003d addTask(userInput);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            result.add(CommandType.BYE.getCommand());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Process the string input and store the data into their respective index."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Index           Info"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * 0              Command type"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * 1              Description of the task"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * 2              Due date of deadline task / Duration of the event task"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param data String input to be processed"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return info which is store in List of Strings for the relevant task"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DukeException throws when input is in invalid String format"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public static List\u003cString\u003e addTask(String data) throws DukeException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        int indexForSeparator;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (data.startsWith(CommandType.TODO.getCommand())) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            String info;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                if (!(data.charAt(4) \u003d\u003d \u0027 \u0027)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    throw new DukeException(\"Please indicate in this format: todo [description]\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                throw new DukeException(\"Please indicate in this format: todo [description]\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            info \u003d data.substring(5);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            if (info.strip().equals(\"\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                throw new DukeException(\"I cannot find the description of Todo!\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            result.add(CommandType.TODO.getCommand());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            result.add(info);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } else if (data.startsWith(CommandType.DEADLINE.getCommand())) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            String due;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            if (data.contains(\" /by \")) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    indexForSeparator \u003d data.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    if (indexForSeparator \u003c\u003d 9) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        throw new DukeException(\"Please indicate in this format: event [description] /at [duration].\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    throw new DukeException(\"Please indicate in this format: deadline [description] /by [due date].\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                throw new DukeException(\"Please indicate in this format: deadline [description] /by [due date].\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            String description \u003d data.substring(8, indexForSeparator - 1);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            if (!description.startsWith(\" \")) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                throw new DukeException(\"Please indicate in this format: deadline [description] /by [due date].\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            if (description.strip().equals(\"\")) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                throw new DukeException(\"I cannot find description of a deadline!\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                due \u003d data.substring(indexForSeparator + 4);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                throw new DukeException(\"I cannot find the due date of deadline!\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            if (due.strip().equals(\"\")) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                throw new DukeException(\"I cannot find the due date of deadline!\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            result.add(CommandType.DEADLINE.getCommand());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            result.add(description.substring(1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            result.add(due);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } else if (data.startsWith(CommandType.EVENT.getCommand())) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            String duration;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            if (data.contains(\" /at \")) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    indexForSeparator \u003d data.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    if (indexForSeparator \u003c\u003d 6) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                        throw new DukeException(\"Please indicate in this format: event [description] /at [duration].\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    throw new DukeException(\"Please indicate in this format: event [description] /at [duration].\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                throw new DukeException(\"Please indicate in this format: event [description] /at [duration].\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            String description \u003d data.substring(5, indexForSeparator - 1);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            if (!description.startsWith(\" \")) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                throw new DukeException(\"Please indicate in this format: event [description] /at [duration].\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            if (description.strip().equals(\"\")) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                throw new DukeException(\"I cannot find the description of the event!\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                duration \u003d data.substring(indexForSeparator + 4);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                throw new DukeException(\"I cannot find the duration of the event!\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            if (duration.strip().equals(\"\")) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                throw new DukeException(\"I cannot find the duration of the event!\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            result.add(CommandType.EVENT.getCommand());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            result.add(description.substring(1));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            result.add(duration);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new DukeException(\"Are you sure you are giving the correct command?\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 215
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eStorage Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * This class is used to save data into hard disk and retrieve data from the hard disk."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author Eng Xuan En"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    protected String home;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    protected FileWriter fw;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    protected Path filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    protected String absolutePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    protected Scanner taskScanner;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Class constructor of Storage which take in filePath in String format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param filePath path that the data store to."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Storage(String filePath) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        setHomeAndFilePath(filePath.split(\"/\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        initialiseScanner();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Set home and file path based on the current directory and path given."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param path Indicate the path of the file located."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private void setHomeAndFilePath(String... path) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.home \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.filePath \u003d Paths.get(this.home, copyFilePath(path));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.absolutePath \u003d this.filePath.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Copy file path to another array and add \"src\" at the first index of the String array."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param path File path to be copy"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return File path with \"src\" at the first index of the String array."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private String[] copyFilePath(String... path) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String[] filePath \u003d new String[path.length + 1];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        filePath[0] \u003d \"src\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        for (String word : path) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            filePath[i] \u003d word;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Initialise Scanner to the filepath, if file not exists, create new file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DukeException Occur when file is not exist at that path."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private void initialiseScanner() throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            this.taskScanner \u003d new Scanner(this.filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            createFile(this.absolutePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Get Home Directory of the programme."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String getHomeDirectory() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return home;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Check file exist at that path."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param path path the file located"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return true: File exists, false: File not exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public boolean checkFileExists(Path path) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return Files.exists(path);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Retrieve the data from the taskFile."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return List of tasks which the tasks retrieve from the hard disk"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DukeException occurs when when wrong format of date and time found"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public List\u003cTask\u003e getTaskListing() throws DukeException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String[] line;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        List\u003cTask\u003e listing \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            while (taskScanner.hasNext()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                line \u003d taskScanner.nextLine().split(\"\\\\s\\\\|\\\\s\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                listing.add(generateTaskBasedOnData(line));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return listing;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return listing;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Determine which task it belong to and generate the task based on the data given."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param line Data use for processing."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Task that is generated."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DukeException occurs when when wrong format of date and time found"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Task generateTaskBasedOnData(String[] line) throws DukeException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        switch (line[0]) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return generateTodo(line);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return generateEvent(line);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return generateDeadline(line);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new DukeException(\"Data corrupted! I am unable to determine which task it belongs to.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Generate todo and set done if the index 1 of the data given is \"1\"."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param data Description of Todo is at index 2 and done status at index 1."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Todo task that is generated."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Task generateTodo(String[] data) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Task task \u003d new Todo(data[2]);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return setStateDoneIfDataStateIs1(task, data);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Generate event and set done if the index 1 of the data given is \"1\"."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param data Description of Event is at index 2, date of event is at index 3 amd done status at index 1."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Event task that is generated."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Task generateEvent(String[] data) throws DukeException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Task task \u003d new Event(data[2], data[3]);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return setStateDoneIfDataStateIs1(task, data);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Generate event and set done if the index 1 of the data  given is \"1\"."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param data Description of Event is at index 2, date and time are at index 3 and done status at index 1."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Deadline task that is generated."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private Task generateDeadline(String[] data) throws DukeException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Task task \u003d new Deadline(data[2], data[3]);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return setStateDoneIfDataStateIs1(task, data);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Set the status to done if the index 1 of data is 1."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param task Task required to set to done or not."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param data Data to indicate the status to be set as done."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Task that either set status to done or not done."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Task setStateDoneIfDataStateIs1(Task task, String[] data) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (data[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            task.setStatusDone();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Close the scanner."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void closeScanner() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        taskScanner.close();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Save tasks to hard disk."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param taskList taskList to retrieve the tasks"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DukeException occurs when encounter IO Exception"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void saveTasks(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        int numOfTasks \u003d taskList.getAmountOfTask();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        int num \u003d 1;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        createFile(absolutePath);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        clearFile(absolutePath);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        while (numOfTasks !\u003d 0) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            addTask(taskList.getTask(num));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            num++;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            numOfTasks--;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Clear all contents inside the file at the path."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param path file located at"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void clearFile(String path) throws DukeException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        writeToHardDisk(\"\", path, false);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Create file when no file exist at the path."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param path path the file located at"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DukeException occurs when IOException happens"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void createFile(String path) throws DukeException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            File file \u003d new File(path);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            makeDirectory(retrieveFileDirectoryFromAbsolutePath(path));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new DukeException(\"Sorry! I am unable to create new file at the path!\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Return the directory back without the file name back."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param path Path to the file."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Directory without the file name."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private String retrieveFileDirectoryFromAbsolutePath(String path) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return path.substring(0, path.lastIndexOf(\u0027\\\\\u0027));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Create Directory based on the path given if it does not exists."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param path path to be created."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private void makeDirectory(String path) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if(!checkFileExists(filePath)) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            new File(path).mkdirs();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Add task to the file in hard disk."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param task task to be added"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DukeException occurs when IO Exception occurs"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void addTask(Task task) throws DukeException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String taskType;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        int status;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String period;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String taskDescription;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        switch (task.getType()) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            taskType \u003d \"T\";"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            status \u003d task.getStatus() ? 1 : 0;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            taskDescription \u003d task.getDescription();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            writeToHardDisk(taskType + \" | \" + status + \" | \" + taskDescription + \"\\n\","
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    absolutePath, true);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            taskType \u003d \"E\";"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            status \u003d task.getStatus() ? 1 : 0;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            taskDescription \u003d task.getDescription();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            period \u003d task.getPeriod();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            writeToHardDisk(taskType + \" | \" + status + \" | \" + taskDescription + \" | \" + period + \"\\n\","
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    absolutePath, true);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            taskType \u003d \"D\";"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            status \u003d task.getStatus() ? 1 : 0;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            taskDescription \u003d task.getDescription();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            period \u003d task.getPeriod();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            writeToHardDisk(taskType + \" | \" + status + \" | \" + taskDescription + \" | \" + period + \"\\n\","
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    absolutePath, true);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new DukeException(\"Warning! I do not know what format to save the task as!\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Get path where the files stored at hard disk."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return path object"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Path getPath() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Write a line to the file in hard disk."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param sentence   sentence that write to the file"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param path       path that the file located"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param appendMode true: append, false: overwrite the file"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DukeException occurs when IO Exception occurs"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void writeToHardDisk(String sentence, String path, boolean appendMode) throws DukeException {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            fw \u003d new FileWriter(path, appendMode);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            fw.write(sentence);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new DukeException(\"Oops! There are error occurs: \" + e.getMessage());"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 328
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eDeadline Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * A subclass of Task class. Record the description and due date of the deadline task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author Eng Xuan En"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    DateTimeFormatter storeFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Class constructor of Deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param description description of the deadline"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param due         date due for the deadline"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DukeException Occur when date is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Deadline(String description, String due) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        type \u003d \"deadline\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            period \u003d LocalDate.parse(due);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new DukeException(\"Please give valid date in deadline [description] /by [yyyy-mm-dd] format.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Get period in \"yyyy-mm-dd\" format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return date in \"yyyy-mm-dd\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String getPeriod() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return period.format(storeFormatter);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Get string in [D][Y or N] {description of the task} (by: {due date of the task}) format."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return String in certain format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + period.format(outputFormatter) + \")\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 56
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eEvent Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * A subclass of Task class. Record the description and duration of the event task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author Eng Xuan En"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    protected LocalDateTime duration;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy HHmm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    DateTimeFormatter storeFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * \\"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Class constructor of Event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param description Description of the event"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param duration    Duration of the event"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DukeException Occur only when date and time format is wrong or invalid."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Event(String description, String duration) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        type \u003d \"event\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            retrieveDateAndTime(duration);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new DukeException(\"Please give a valid duration in yyyy-mm-dd HHmm format.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new DukeException(\"Please input time in HHmm format at the end.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Retrieve the date and time from the input given."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param input Input from user"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DateTimeException              Occur when date or time are invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException Occur when time is not provided."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private void retrieveDateAndTime(String input) throws DateTimeException, ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String[] data \u003d input.split(\" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.period \u003d LocalDate.parse(data[0]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.duration \u003d addTimeIntoDate(data[1]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Add Time into the date."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param time Time to be added."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return LocalDateTime object with the date and time stored."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DateTimeException Occur when time is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private LocalDateTime addTimeIntoDate(String time) throws DateTimeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return period.atTime(Integer.parseInt(time.substring(0, 2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                Integer.parseInt(time.substring(2, 4)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Get duration in \"yyyy-mm-dd HHmm\" format."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return duration in \"yyyy-mm-dd HHmm\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String getPeriod() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return duration.format(storeFormatter);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Get string in [E][Y or N] {description of the task} (at: {duration of the task}) format."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return String in certain format"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + duration.format(outputFormatter) + \")\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 88
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eTaskCommand Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * This command records the description of the task and indicate whether the programme is done or not."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author Eng Xuan En"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class Task implements Comparable\u003cTask\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    protected LocalDate period;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final int EQUAL \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final int LOWER \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static final int HIGHER \u003d -1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Class constructor of Task which takes in description in String format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param description description of the task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Get period with the pattern format of \"MMM d yyyy\"."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return date in \"MMM d yyyy\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String getPeriod() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return period.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Get status icon either a Y or N."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return status icon Y if is done, N if it is not done"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return isDone ? \"Y\" : \"N\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Get status of the task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return task status"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Set done status to true."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setStatusDone() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Set done status to false."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setStatusNotDone() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Get the description of the task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return description of the task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Get the task type."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return type of the task"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Compare the tasks based on their date and time, if applicable. If same date and time, sort by"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * alphabetical order."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param other Another task to be compare to."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Determine which task is at the top."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public int compareTo(Task other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        int result;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        result \u003d sortingTask(this, other);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (result \u003d\u003d EQUAL) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            result \u003d sortByAlphabeticalOrder(this, other);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Sort todo at the bottom of the list and sort event and deadline based on their date and time."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param first Task to be compare."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param second Another task to be compare."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Determine whether the first task is on top or below than the second task."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private int sortingTask(Task first, Task second) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        int result;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (first.getType().equals(\"todo\") \u0026\u0026 second.getType().equals(\"todo\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            result \u003d EQUAL;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } else if (first.getType().equals(\"todo\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            result \u003d LOWER;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } else if (second.getType().equals(\"todo\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            result \u003d HIGHER;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            result \u003d first.getPeriod().compareTo(second.getPeriod());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Sort the task by alphabetical order."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param first Task to be compare."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param second Another task to be compare."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Determine whether the first task is on top or below than the second task."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private int sortByAlphabeticalOrder(Task first, Task second) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return first.getDescription().compareTo(second.getDescription());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Return status icon and description of the task in string format."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return status icon and description in string format"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 152
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eTodo Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * A subclass of Task class. Record the description of the todo task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author Eng Xuan En"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Class constructor for Todo which takes in the description of the task in String format."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param description description of Todo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.period \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        type \u003d \"todo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Return the task details in [T][Y or N] {description of the task} format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return task details in String format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 30
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eTaskList Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Records the tasks input by user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author Eng Xuan En"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    protected List\u003cTask\u003e records;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Class constructor of TaskList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        records \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Constructor of TaskList which takes in List of Tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param tasks tasks to be added into listing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        records \u003d tasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Add task into listing."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param task task to be added"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        records.add(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Collections.sort(records);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Set the task as Done."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param num index where the task located at"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DukeException when no task found in that index"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void markDone(int num) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            task \u003d records.get(num - 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            task.setStatusDone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            records.set(num - 1, task);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            Collections.sort(records);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new DukeException(\"No task found in that index!\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assert task.getStatus() : \"Status is not updated to done yet.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Delete the task at the index."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param num index where the task located at"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return task that being deleted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DukeException when no task found in that index"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Task deleteTask(int num) throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            task \u003d records.get(num - 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            records.remove(num - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            Collections.sort(records);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            throw new DukeException(\"No task found in that index!\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Find the tasks in listing that have the keyword in their description."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param keyword keyword to find"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return List of tasks that found with the keyword in their description"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public List\u003cTask\u003e findTask(String keyword) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        List\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        for (Task task : records) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                result.add(task);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Get the listing in listing."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return listing in TaskList"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public List\u003cTask\u003e getListing() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return records;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Get task at specific index."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param num index the task locate at"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Task at the index"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Task getTask(int num) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return records.get(num - 1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Get the total amount of task in record."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return the amount of task in record"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public int getAmountOfTask() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return records.size();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 128
    }
  },
  {
    "path": "src/main/java/duke/ui/ReplyFormat.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class ReplyFormat {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private String indentation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private String outline \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private int numOfIndent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private boolean hasOutline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Initialise the reply message format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public ReplyFormat() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        numOfIndent \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        indentation \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        hasOutline \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Add one sentence to the reply."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param sentence    message required to add"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param numOfIndent number of additional indent required to add"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void addSentence(String sentence, int numOfIndent) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message \u003d message + indentation + setAdditionalIndent(numOfIndent) + sentence + indentation+\u0027\\n\u0027;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assert message.contains(indentation + setAdditionalIndent(numOfIndent) + sentence + indentation+\u0027\\n\u0027)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                : \"Message are not added inside\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Change both outlines at top and bottom."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param outline the outline where wrap the message."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void changeOutline(String outline) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.outline \u003d outline;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Add outline with indentation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return the outline with indentation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String addOutlineWithIndentation() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return indentation + outline + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Add paragraph to the reply."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param paragraph   paragraph to add"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param numOfIndent number of additional spaces required in front"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void addParagraph(String paragraph, int numOfIndent) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String[] sentences \u003d paragraph.split(\"\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        for (String sentence : sentences) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            addSentence(sentence, numOfIndent);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Add empty new line."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void addEmptyLine() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        addSentence(\"\", 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assert message.endsWith(\"\\n\") : \"Newline is not added into message.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Add list of data to the reply."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param listing listing to display"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void addList(List\u003cTask\u003e listing) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        for (Task task : listing) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            addSentence(count + \".\" + task.toString(), 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            count +\u003d 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Add additional indent required."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param numOfIndent number of indent required to add"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return the amount of spaces"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String setAdditionalIndent(int numOfIndent) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String indent \u003d \"\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        for (int i \u003d 0; i \u003c numOfIndent; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            indent \u003d indent.concat(\" \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return indent;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Set the amount of indentation in front and behind of message."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param numOfIndent number of indentation required"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setIndentation(int numOfIndent) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        this.numOfIndent \u003d numOfIndent;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        indentation \u003d \"\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        for (int i \u003d 0; i \u003c this.numOfIndent; i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            indentation \u003d indentation.concat(\" \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Set the outline of the reply message."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setOutline() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        hasOutline \u003d true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Clear message."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void clearMessage() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message \u003d \"\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Reply message in String format."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return return outline with message"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String replyMessage() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return hasOutline"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                ? addOutlineWithIndentation() + message + addOutlineWithIndentation()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                : message;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 139
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private int numOfIndentation \u003d 4;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private ReplyFormat message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private static Scanner userInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    private boolean isGui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Class Constructor of Ui."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message \u003d new ReplyFormat();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        userInput \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message.setIndentation(numOfIndentation);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        isGui \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Loop until user give input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return the sentence user inputs"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            if (userInput.hasNext()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                return userInput.nextLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Set isGui to false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setNotGui() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        isGui \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Close all scanners if available."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void closeScanner() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        userInput.close();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Provides greeting message to print in String format."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Return the greeting message back"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String greetWithoutPrint() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String logo \u003d setLogoAccordingToConsoleOrGui();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message.clearMessage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message.addSentence(\"Hello! I\u0027m \", 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message.addParagraph(logo, 15);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message.addEmptyLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message.addSentence(\"What can I do for you?\", 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return message.replyMessage();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Return logo according to whether the output is console or gui."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Logo message in string."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String setLogoAccordingToConsoleOrGui() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (isGui) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return \"____          _                               \\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    + \"|  _  \\\\ _    _| | _____                   \\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    + \"| |  |  |  |  |  | |/ / __ \\\\              \\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    + \"| |_ |  |  |_|  |  \u003c   __/                 \\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|                  \\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            return \" ____        _        \\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Greet the user and print the greeting message."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        System.out.print(greetWithoutPrint());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Print user command."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param command command to be printed"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void printUserCommand(String command) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        System.out.println(command);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Reply the message back to user."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param sentence message reply to user"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void reply(String sentence) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message.clearMessage();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message.addSentence(sentence, 1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        System.out.print(message.replyMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Reply the message back in String format."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param sentence message reply to user"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Return the message in String format"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String replyInString(String sentence) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message.clearMessage();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message.addSentence(sentence, 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return message.replyMessage();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Reply the listing back in String format."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param tasks List of tasks in records"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Reply the list back"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String replyListing(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message.clearMessage();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            message.addSentence(\"Horray! You do not have any task now!\", 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            message.addSentence(\"Here are the tasks in your list:\", 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            message.addList(tasks);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return message.replyMessage();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * List out the tasks that found with the keyword back in String format."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param tasks List of tasks with keyword"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Return message back"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String replyTaskFound(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message.clearMessage();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            message.addSentence(\"No task with the keyword! Find another keyword?\", 1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            message.addSentence(\"Here are the tasks found with the keyword:\", 1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            message.addList(tasks);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return message.replyMessage();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Reply the respective task has been added to the list in String format."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param amtOfTask amount of tasks in records"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param task      task that being added"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return reply the message back in String format"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String replyAdded(int amtOfTask, Task task) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message.clearMessage();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message.addSentence(\"Got it. I\u0027ve added this task:\", 1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message.addSentence(task.toString(), 3);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        setMessageAccordingToAmountOfTask(amtOfTask);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return message.replyMessage();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Set the reply message according to the amount of task in the taskList."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param amtOfTask Number of task in the taskList."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setMessageAccordingToAmountOfTask(int amtOfTask) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        if (amtOfTask \u003e 1) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            message.addSentence(\"Now you have \" + amtOfTask + \" tasks in the list.\", 1);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            message.addSentence(\"Now you have 1 task in the list.\", 1);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Reply the message which the task are being marked done in String format."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param task task that being marked done"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Reply the message back in String format"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String replyDone(Task task) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message.clearMessage();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message.addSentence(\"Nice! I\u0027ve marked this task as done:\", 1);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message.addSentence(task.toString(), 5);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return message.replyMessage();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Reply that the task has deleted in String format."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @param task task that being deleted"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @return Reply the message back in String format"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public String replyDelete(Task task) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message.clearMessage();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message.addSentence(\"Noted. I\u0027ve removed this task:\", 1);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message.addSentence(\"  \" + task.toString(), 3);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        return message.replyMessage();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Set the outline of the reply message."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setOutline() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        message.setOutline();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 220
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- @@author Jeffry Lum --\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"TOP_LEFT\" graphicTextGap\u003d\"40.0\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-background-color: lightblue; -fx-background-radius: 20; -fx-padding: 10;\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 17,
      "-": 1
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- @@author Jeffry Lum --\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            fx:controller\u003d\"duke.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                   prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 24,
      "-": 1
    }
  },
  {
    "path": "src/test/java/duke/command/CommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eCommandTest Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Test for the command class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author Eng Xuan En"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class CommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Test if the command type return is correct when call getCommandType method."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void runGetCommand_shouldReturnCorrectCommandType() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Command command \u003d new Command(CommandType.DELETE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Assertions.assertEquals(command.getCommandType(), CommandType.DELETE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Test if the delete command return false when call isExitLoop method."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void nonExitCommand_shouldNotExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Command command \u003d new Command(CommandType.DELETE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Assertions.assertFalse(command.isExitLoop());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Test if the exit command will return true when call isExitLoop method."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void exitCommand_shouldExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Command command \u003d new ExitCommand(CommandType.BYE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Assertions.assertTrue(command.isExitLoop());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 40
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eParserTest Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Test for parser class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author Eng Xuan En"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Test if invalid input to the parse method will throws DukeException or not."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void invalidOutput_shouldThrowDukeException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            Parser.parse(\"Todo borrow book\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        });"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d \"Are you sure you are giving the correct command?\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Test if giving \"list\" to processUserInput method will give list command object or not."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DukeException occurs when invalid string input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void inputList_shouldReturnListCommandObject() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        List\u003cString\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expected.add(CommandType.LIST.getCommand());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Assertions.assertEquals(expected, Parser.processUserInput(\"list\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Test if giving \"todo borrow book\" to addTask method will give the ArrayList with the correct data or not."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * @throws DukeException occurs when invalid string input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void todoBorrowBookInput_shouldReturnArrayListSuccessfully() throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        List\u003cString\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expected.add(CommandType.TODO.getCommand());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        expected.add(\"borrow book\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Assertions.assertEquals(expected, Parser.addTask(\"todo borrow book\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 61
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eTaskTest Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Test for the Task class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author Eng Xuan En"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Test if the method, getStatus, will give false or not."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void initialiseShouldGetFalseForStatus() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Task task \u003d new Task(\"Test\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Assertions.assertFalse(task.getStatus());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Test if the method, getStatus, will return true after running setStatusDone method."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void setStatusDone_shouldReturnTrueForStatus() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Task task \u003d new Task(\"Test\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        task.setStatusDone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Assertions.assertTrue(task.getStatus());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Test if toString method give correct String format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void toString_shouldReturnInCorrectFormat() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Task task \u003d new Task(\"Test\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expected \u003d \"[N] Test\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Assertions.assertEquals(expected, task.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 42
    }
  },
  {
    "path": "src/test/java/duke/tasklist/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eTaskListTest Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Test for the TaskList class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author Eng Xuan En"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Test whether methods, addTask and getTask, work correctly."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void addOneTask_thenGetTask_shouldReturnSameTask() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Task expected \u003d new Task(\"Testing\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        taskList.addTask(expected);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Assertions.assertEquals(expected, taskList.getTask(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Test if delete task without any task in taskList will throw Duke Exception or not."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void deleteTaskWithNoTask_shouldThrowDukeException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "            taskList.deleteTask(1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        });"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expectedMessage \u003d \"No task found in that index!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Test if getTask method return the correct task at the index."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void deleteTaskWithTasks_shouldReturnTheTaskAtTheIndex() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Task expected \u003d new Todo(\"Testing\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        taskList.addTask(new Todo(\"Wrong Task\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        taskList.addTask(expected);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        taskList.addTask(new Todo(\"Wrong Task\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Assertions.assertSame(expected, taskList.getTask(1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Test if the method, getAmountOfTask, will return correct number."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void getAmountOfTask_shouldReturnCorrectNumber() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        taskList.addTask(new Todo(\"One Task\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        taskList.addTask(new Todo(\"One Task\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Assertions.assertEquals(2, taskList.getAmountOfTask());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 72
    }
  },
  {
    "path": "src/test/java/duke/ui/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.io.OutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * \u003ch1\u003eUiTest Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * Test for the Ui class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " * @author  Eng Xuan En"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    OutputStream os;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Initialise before every test. Set the output to os."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        os \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        PrintStream ps \u003d new PrintStream(os);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        System.setOut(ps);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Reset the output to System.out after every test."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void cleanUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Test if the greet method print out the expected message or not."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void greetMethod_shouldProduceExpectedMessage() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ui.setNotGui();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ui.setOutline();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expected \u003d \"    ____________________________________________________________\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                + \"     Hello! I\u0027m     \\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                + \"                    ____        _            \\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                + \"                   |  _ \\\\ _   _| | _____     \\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                + \"                   | | | | | | | |/ / _ \\\\    \\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                + \"                   | |_| | |_| |   \u003c  __/    \\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                + \"                   |____/ \\\\__,_|_|\\\\_\\\\___|    \\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                + \"        \\n\" + \"     What can I do for you?    \\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                + \"    ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Assertions.assertEquals(expected, os.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     * Test if the method, replyDone, give the correct output to the user or not."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    public void markTaskDone_shouldGiveTheCorrectOutput() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        ui.setOutline();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Task task \u003d new Todo(\"borrow book\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        task.setStatusDone();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        String expected \u003d \"    ____________________________________________________________\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                + \"     Nice! I\u0027ve marked this task as done:    \\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                + \"         [T][Y] borrow book    \\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                + \"    ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "        Assertions.assertEquals(expected, ui.replyDone(task));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 78
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     Hello! I\u0027m"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                    ____        _"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                   |  _ \\ _   _| | _____"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "                   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     What can I do for you?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "deadline return book /by 2019-12-03"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "       [D][N] return book (by: Dec 3 2019)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     Now you have 1 task in the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "event project meeting /at 2020-03-25 1030"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "       [E][N] project meeting (at: Mar 25 2020 1030)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "bye"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "     Alright! See you next time!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    ____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 26
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "deadline return book /by 2019-12-03"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "event project meeting /at 2020-03-25 1030"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 3
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 22
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "C:\\Users\\engxu\\IdeaProjects\\duke\\src\\main\\java\\duke\\Duke.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "C:\\Users\\engxu\\IdeaProjects\\duke\\src\\main\\java\\duke\\DukeException.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "C:\\Users\\engxu\\IdeaProjects\\duke\\src\\main\\java\\duke\\command\\Command.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "C:\\Users\\engxu\\IdeaProjects\\duke\\src\\main\\java\\duke\\command\\CommandType.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "C:\\Users\\engxu\\IdeaProjects\\duke\\src\\main\\java\\duke\\command\\DeadlineCommand.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "C:\\Users\\engxu\\IdeaProjects\\duke\\src\\main\\java\\duke\\command\\DeleteCommand.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "C:\\Users\\engxu\\IdeaProjects\\duke\\src\\main\\java\\duke\\command\\DoneCommand.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "C:\\Users\\engxu\\IdeaProjects\\duke\\src\\main\\java\\duke\\command\\EventCommand.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "C:\\Users\\engxu\\IdeaProjects\\duke\\src\\main\\java\\duke\\command\\ExitCommand.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "C:\\Users\\engxu\\IdeaProjects\\duke\\src\\main\\java\\duke\\command\\FindCommand.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "C:\\Users\\engxu\\IdeaProjects\\duke\\src\\main\\java\\duke\\command\\ListCommand.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "C:\\Users\\engxu\\IdeaProjects\\duke\\src\\main\\java\\duke\\command\\TodoCommand.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "C:\\Users\\engxu\\IdeaProjects\\duke\\src\\main\\java\\duke\\parser\\Parser.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "C:\\Users\\engxu\\IdeaProjects\\duke\\src\\main\\java\\duke\\storage\\Storage.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "C:\\Users\\engxu\\IdeaProjects\\duke\\src\\main\\java\\duke\\task\\Deadline.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "C:\\Users\\engxu\\IdeaProjects\\duke\\src\\main\\java\\duke\\task\\Event.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "C:\\Users\\engxu\\IdeaProjects\\duke\\src\\main\\java\\duke\\task\\Task.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "C:\\Users\\engxu\\IdeaProjects\\duke\\src\\main\\java\\duke\\task\\Todo.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "C:\\Users\\engxu\\IdeaProjects\\duke\\src\\main\\java\\duke\\tasklist\\TaskList.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "C:\\Users\\engxu\\IdeaProjects\\duke\\src\\main\\java\\duke\\ui\\ReplyFormat.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exeexe93"
        },
        "content": "C:\\Users\\engxu\\IdeaProjects\\duke\\src\\main\\java\\duke\\ui\\Ui.java"
      }
    ],
    "authorContributionMap": {
      "Exeexe93": 21
    }
  }
]
