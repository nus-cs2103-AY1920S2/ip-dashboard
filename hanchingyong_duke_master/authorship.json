[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "test {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "hanchingyong": 36
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "event/0/qq/2019-07-07"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "todo/0/tomorrow"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "todo/0/tomorrow"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "todo/0/view file"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "event/0/dialog /2019-03-03"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 5
    }
  },
  {
    "path": "src/META-INF/MANIFEST.MF",
    "fileType": "MF",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "Manifest-Version: 1.0"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "Main-Class: Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 3
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * A Deadline task that extends from the Task class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Deadlines contain a LocalDate variable to represent the date the deadline is due."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Deadlines also contain a dateConverter and dateFormatter to help format and convert"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * dates to the appropriate format."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    protected DateTimeFormatter dateConverter \u003d DateTimeFormatter.ofPattern(\"yyyy-mm-dd\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    protected DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"MMM d YYYY\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Constructor for Deadline class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param description The description of the deadline task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param date The date which the deadline is due."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws ParseException If the date cannot be parsed, i.e is in the wrong format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Deadline(String description, String date) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns the date the deadline is due in a LocalDate variable."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return The date the deadline is due."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public LocalDate getBy() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Print the deadline task description, status icon and deadline date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return A string that indicates the task is a deadline, deadline description,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *     status icon and deadline date."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return \"[D]\" + \" \" + super.toString() + \" (by: \" + date.format(DateTimeFormatter.ofPattern(\"MMM d YYYY\")) + \")\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 45
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Static method to get Duke Dialogs."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param text Label used."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param img  Picture used."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return Dialog Box to show dialog between Duke and user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 65
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Main class that drives the code to run the Duke bot."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"images/DaUser.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"images/DaDuke.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private static final String filepath \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Duke class constructor for JavaFX."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        tasks \u003d new TaskList(storage.readFile());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        parser \u003d new Parser(sc);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Duke class constructor that creates a new instance of a Duke bot."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param filePath Path of file for instance of Storage class to be created."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        tasks \u003d new TaskList(storage.readFile());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        parser \u003d new Parser(sc);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Main method that drives the Duke bot."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ui.printWelcome();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Parser parser \u003d new Parser(sc);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String command \u003d parser.readCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            while (!parser.getCommandType(command).equals(\"bye\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                String commandType \u003d parser.getCommandType(command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                if (commandType.equals(\"list\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    tasks.printList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    command \u003d parser.readCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                } else if (commandType.equals(\"find\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    String findString \u003d parser.getFind(command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    TaskList matchedTask \u003d tasks.find(findString);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    ui.printFind(matchedTask);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    command \u003d parser.readCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                } else if (commandType.equals(\"done\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    int taskNo \u003d parser.getTaskNo(command);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        tasks.setDone(taskNo);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        ui.printDone(tasks.getTask(taskNo));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        System.out.println(\"There is no task \" + (taskNo + 1) + \" in the list.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    command \u003d parser.readCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                } else if (commandType.equals(\"delete\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    int taskNo \u003d parser.getTaskNo(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    Task task \u003d tasks.getTask(taskNo);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    ui.printDelete(task, tasks.getSize() - 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    tasks.deleteTask(taskNo);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    storage.saveFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    command \u003d parser.readCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                } else if (commandType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        Deadline deadline \u003d parser.getDeadline(command);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        tasks.addTask(deadline);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        storage.saveFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        ui.printAdd(deadline, tasks.getSize());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    } catch (DukeException | ParseException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    command \u003d parser.readCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                } else if (commandType.equals(\"event\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        Event event \u003d parser.getEvent(command);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        tasks.addTask(event);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        storage.saveFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        ui.printAdd(event, tasks.getSize());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    } catch (DukeException | ParseException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    command \u003d parser.readCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                } else if (commandType.equals(\"todo\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        ToDo toDo \u003d parser.getToDo(command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        tasks.addTask(toDo);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        storage.saveFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        ui.printAdd(toDo, tasks.getSize());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    } catch (DukeException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    command \u003d parser.readCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            command \u003d parser.readCommand();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ui.printBye();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method to launch JavaFX."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param stage Primary stage that JavaFX provides."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String userText \u003d userInput.getText();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String dukeText \u003d getResponse(userInput.getText());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                DialogBox.getUserDialog(userText, user),"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, duke)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Gets the response of Duke based on the command given from the user."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param command String input from the user."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    protected String getResponse(String command) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        //return \"Duke heard \" + input;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            String commandType \u003d parser.getCommandType(command);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            switch (commandType) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                return tasks.printList();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                String findString \u003d parser.getFind(command);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                TaskList matchedTask \u003d tasks.find(findString);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                return ui.printFind(matchedTask);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            case \"done\": {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                int taskNo \u003d parser.getTaskNo(command);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    tasks.setDone(taskNo);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    return ui.printDone(tasks.getTask(taskNo));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    return (\"There is no task \" + (taskNo + 1) + \" in the list.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            case \"delete\": {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                int taskNo \u003d parser.getTaskNo(command);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                Task task \u003d tasks.getTask(taskNo);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                tasks.deleteTask(taskNo);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                storage.saveFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                return ui.printDelete(task, tasks.getSize());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    Deadline deadline \u003d parser.getDeadline(command);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    tasks.addTask(deadline);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    storage.saveFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    return ui.printAdd(deadline, tasks.getSize());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                } catch (DukeException | ParseException e) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    return (e.getMessage());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    Event event \u003d parser.getEvent(command);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    tasks.addTask(event);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    storage.saveFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    return ui.printAdd(event, tasks.getSize());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                } catch (DukeException | ParseException e) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    return (e.getMessage());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    ToDo toDo \u003d parser.getToDo(command);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    tasks.addTask(toDo);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    storage.saveFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    return ui.printAdd(toDo, tasks.getSize());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    return (e.getMessage());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                return ui.printBye();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                return \"Invalid command, please try again.\";"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return (e.getMessage());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 307,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Main exception class that Duke throws."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Constructor for DukeException."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param error The error message to be printed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public DukeException(String error) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 13
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * An Event task that extends from the Task class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Events contain a LocalDate variable to represent the date the event is at."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Events also contain a dateConverter and dateFormatter to help format and convert"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * dates to the appropriate format."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    protected DateTimeFormatter dateConverter \u003d DateTimeFormatter.ofPattern(\"yyyy-mm-dd\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    protected DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"MMM d YYYY\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Constructor for Event class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param description The description of the event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param date The date which the event is at."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws ParseException If the date cannot be parsed, i.e is in the wrong format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Event(String description, String date) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Returns the event date in a LocalDate variable."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return The event date in a LocalDate variable."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public LocalDate getAt() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Print the event task description, status icon and event date."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return A string that indicates the task is a event, event description,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     *     status icon and event date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return \"[E]\" + \" \" + super.toString() + \" (at: \" + date.format(DateTimeFormatter.ofPattern(\"MMM d YYYY\")) + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 47
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 50
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Parser class that helps to make sense of the user commands."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * A parser contains a scanner that helps it read commands from the users,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * and understand the command that the user has input."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    protected Scanner sc;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Constructor for Parser class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param sc Scanner to create an instance of the Parser class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Parser(Scanner sc) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.sc \u003d sc;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Read the next command that the user provides."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return The next command read."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Parse the command received to see what command type it belongs to."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param command String which is read from the user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return The key command word that determines the command type."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws DukeException If the string does not contain any recognised command types."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String getCommandType(String command) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (command.contains(\"list\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return \"list\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } else if (command.contains(\"find\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return \"find\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } else if (command.contains(\"bye\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return \"bye\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } else if (command.contains(\"done\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return \"done\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } else if (command.contains(\"delete\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return \"delete\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } else if (command.contains(\"deadline\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return \"deadline\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } else if (command.contains(\"event\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return \"event\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } else if (command.contains(\"todo\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            return \"todo\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw new DukeException(\"Invalid command. Please try again.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * From a deadline command, return the Deadline task which would be created."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param str Deadline command provided by the user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return Deadline task that is created from the command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws DukeException If the deadline command does not specify the due date."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws ParseException If the deadline date cannot be processed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Deadline getDeadline(String str) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String[] splitStr \u003d str.split(\"/by \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (splitStr.length \u003c 2) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw (new DukeException(\"The deadline requires a date it is due by.\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String description \u003d splitStr[0];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String timing \u003d splitStr[1];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String[] splitCommand \u003d description.split(\" \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        for (int i \u003d 1; i \u003c splitCommand.length; i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            builder.append(splitCommand[i]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            builder.append(\" \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            description \u003d builder.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new Deadline(description, timing);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * From an Event command, return the Event task which would be created."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param str Event command provided by the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return Event task that is created from the command."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws DukeException If the Event command does not specify the due date."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws ParseException If the Event date cannot be processed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Event getEvent(String str) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String[] splitStr \u003d str.split(\"/at \");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (splitStr.length \u003c 2) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw (new DukeException(\"The event requires a specific date.\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String description \u003d splitStr[0];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String timing \u003d splitStr[1];"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String[] splitCommand \u003d description.split(\" \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        for (int i \u003d 1; i \u003c splitCommand.length; i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            builder.append(splitCommand[i]);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            builder.append(\" \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            description \u003d builder.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new Event(description, timing);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * From a ToDo command, return the ToDo task which would be created."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param str ToDo command"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return ToDo task that is created from the command."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws DukeException If the ToDo command does not provide a description."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ToDo getToDo(String str) throws DukeException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String[] splitStr \u003d str.split(\"todo \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            throw (new DukeException(\"The To-Do requires a description.\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String description \u003d splitStr[1];"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return new ToDo(description);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method to return the task number, based on array (zero-based) indexing."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param command User provided command."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return Index of task number based on zero-based indexing."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public int getTaskNo(String command) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String[] str \u003d command.split(\" \");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return (Integer.parseInt(str[1]) - 1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String getFind(String command) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String[] str \u003d command.split(\" \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return str[1];"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 143
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Storage class that deals with loading tasks from a file"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * and saving tasks into a file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Storage class constructor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param filepath Filepath of the file to load tasks from."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.file \u003d new File(filepath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method which allows Storage class to read the file and load tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * that are stored in the file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return ArrayList of tasks that stores all tasks written in the file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ArrayList\u003cTask\u003e readFile() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        ArrayList\u003cTask\u003e dukeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            while (s.hasNextLine()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                String[] command \u003d s.nextLine().split(\"/\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                String taskType \u003d command[0].trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                boolean isDone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                if (command[1].trim().equals(\"1\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    isDone \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    isDone \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    String description \u003d command[2].trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    String by \u003d command[3].trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    dukeList.add(new Deadline(description, by));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    if (isDone) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        dukeList.get(dukeList.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    description \u003d command[2].trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    String at \u003d command[3].trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    dukeList.add(new Event(description, at));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    if (isDone) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        dukeList.get(dukeList.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    description \u003d command[2].trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    dukeList.add(new ToDo(description));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    if (isDone) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                        dukeList.get(dukeList.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } catch (FileNotFoundException | ParseException e1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            System.out.println(e1.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return dukeList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method which allows Storage class to save the tasks in the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * TaskList and write all the tasks into a file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param taskList ArrayList of tasks that contains all tasks to be saved."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void saveFile(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            FileWriter writer \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    String str \u003d \"todo\" + \"/\" + task.getDone() + \"/\" + task.getDescription() + \"\\n\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    writer.write(str);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    String str \u003d \"event\" + \"/\" + task.getDone() + \"/\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                            + task.getDescription() + \"/\" + ((Event) (task)).getAt() + \"\\n\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    writer.write(str);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    String str \u003d \"deadline\" + \" /\" + task.getDone() + \" /\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                            + task.getDescription() + \"/ \" + ((Deadline) (task)).getBy() + \"\\n\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                    writer.write(str);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        } catch (IOException e2) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            System.out.println(e2.getMessage());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 106
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * A basic Task class that contains a description and a boolean flag"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * to determine if the task is done."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Constructor for Task class. All tasks are initialised to be not done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param description Description for the Task class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method to check if the task is completed or not."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return A tick if the task is completed or a cross if the task is not."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return (isDone ? \"1\" : \"0\"); //return 1 or 0"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method to return description of the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return A string variable that is the description of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method to return if task is done."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return 1 if task is done, 0 if not done."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public int getDone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return (isDone ? 1 : 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method to mark the task as done."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Print the Task description, status icon."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return A string that contains the description and the status icon of the task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return  description + \" \" + getStatusIcon();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 57
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * A TaskList class that contains the task list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * and has operations that allows it to modify the task list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * TaskList constructor that initializes an empty ArrayList of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * TaskList constructor that creates a TaskList based on an existing array list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param taskList ArrayList of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method that returns the size of the task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return Integer that represented size of task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method that adds a task to the task list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param task Task to be added."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method that removes a task at that index from the task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param index Index which task to be removed from."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        taskList.remove(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method that sets the task at an index to be done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param index Index of task to be marked as done."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @throws IndexOutOfBoundsException If the index is larger than the size of the ArrayList."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void setDone(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        taskList.get(index).markAsDone();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method that returns the task at the index."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param index Index of task to be returned."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return Task to be returned."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method that prints all tasks in the task list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String printList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            sb.append(\" \").append(i + 1).append(\". \").append(taskList.get(i).toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        sb.append(\"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String output \u003d \"These items are in your list: \\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String tasks \u003d sb.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        output +\u003d tasks;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method to return the ArrayList of tasks."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return ArrayList of tasks."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method to find all matching tasks in the task list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param str Keyword to find for all tasks."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public TaskList find(String str) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        TaskList matchedTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            String description \u003d taskList.get(i).getDescription();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            if (description.contains(str)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                matchedTasks.getTaskList().add(taskList.get(i));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return matchedTasks;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 111
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * A ToDo task that extends from the Task class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * ToDo class constructor."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param description Description for the ToDo task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method to print ToDo task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @return A string that indicates it is a ToDo task, status icon and description of the ToDo task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return \"[T]\" + \" \" + super.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 22
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " * Ui class that deals with interactions with the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Ui class constructor."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method to print Duke\u0027s name and a welcome message to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void printWelcome() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        System.out.println(\"Greetings, I am\\n\" + logo);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        System.out.println(\"How may I be of assistance today?\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method to print the completion of a task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param task Task to be marked as done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String printDone(Task task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return (\"You have completed this task.\\n\" + task.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method to print the deletion of a task and the new list size."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param task Task to be deleted."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param newListSize New size of the task list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String printDelete(Task task, int newListSize) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return (task.toString() + \" has been removed.\\n\" + \"Number of items in the list: \" + newListSize);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method to print the addition of a task and the new list size."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param task Task to be added."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param listSize Size of the task list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String printAdd(Task task, int listSize) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return (\"Understood. I have added: \" + task.toString() + \"\\n\" + \"Number of items in the list: \" + listSize);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method to print a farewell message before closing the Duke bot."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String printBye() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return (\"It was my pleasure to help you.\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * Method to print all the matched tasks."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     * @param matchedTasks ArrayList of all matched tasks."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public String printFind(TaskList matchedTasks) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        return (\"These are the tasks that matched what you were looking for.\\n\" + matchedTasks.printList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 70
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" textFill\u003d\"#b52424\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 19
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void getCommandTypeTest() throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Parser parser \u003d new Parser(sc);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String command \u003d \"byebye\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertEquals(\"bye\", parser.getCommandType(command));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        command \u003d \"haha\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String finalCommand \u003d command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e parser.getCommandType(finalCommand));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void getTaskNoTest() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        Parser parser \u003d new Parser(sc);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        String command \u003d \"delete 2\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        // Using numbering starting from 0."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertEquals(1, parser.getTaskNo(command));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 29
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void sizeTest() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertEquals(0, tasks.getSize());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        tasks.addTask(new ToDo(\"test\"));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertEquals(1, tasks.getSize());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    public void deleteTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        tasks.addTask(new ToDo(\"test\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        tasks.deleteTask(0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "        assertEquals(0, tasks.getSize());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanchingyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanchingyong": 20
    }
  }
]
