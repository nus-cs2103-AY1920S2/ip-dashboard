[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "dukeproj.Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for dukeproj.Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/dukeproj issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "foochifa": 3,
      "-": 36
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    modules \u003d [\u0027javafx.controls\u0027, \u0027javafx.fxml\u0027]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "test {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    mainClassName \u003d \"dukeproj.Duke\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 33,
      "-": 21
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 commandType could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "@rem Get commandType-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "@rem Slurp the commandType line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "@rem Setup the commandType line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "foochifa": 4,
      "-": 80
    }
  },
  {
    "path": "src/main/java/build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules."
      }
    ],
    "authorContributionMap": {
      "foochifa": 1
    }
  },
  {
    "path": "src/main/java/dukeproj/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.data.Schedule;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.data.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.enums.CommandType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.enums.SayType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.BadDateException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.BadDescriptionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.DukeDescriptionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents the main working class of DukeProject."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /** Object that handles user interface and communicating with user. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /** Parser to read commands. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /** Storage to read and store Duke into a file. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /** List of tasks in Duke. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /** Calender of tasks stored according to their dates. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Schedule schedule;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Generates a command as a response to a user input String from the GUI."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param input input provided by user from GUI."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return Command that is parsed from the input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Command getCommandResponse(String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String[] inputs \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        CommandType commandType \u003d Parser.commandParser(inputs[0]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (inputs.length \u003c 2) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return parser.getCommand(commandType, \"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return parser.getCommand(commandType, inputs[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Generates Duke\u0027s response to a command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param command The command provided."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return Duke\u0027s response."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public String getResponse(Command command) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return command.execute(ui, taskList, storage, schedule);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (DukeDescriptionException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return ui.say(SayType.EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (BadDateException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return ui.say(SayType.BAD_DATE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (BadDescriptionException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return ui.say(SayType.BAD_DESCRIPTION) + e.getMessage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the User Interface of Duke."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return User Interface."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Ui getUi() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs a Duke object with a filepath to store the task list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        storage \u003d new Storage(\".\" + File.separator + \"data\" + File.separator + \"Task.txt\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        taskList \u003d new TaskList(storage.printFileIntoList(schedule));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Runs the Duke Project. If \"text\" is input within the CLI, this method will run the CLI version of Duke."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Else, as default, it will run the GUI version of Duke."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param args Inputs by user on the CLI."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 94,
      "-": 1
    }
  },
  {
    "path": "src/main/java/dukeproj/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.enums.SayType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.gui.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            MainWindow mainWindow \u003d fxmlLoader.\u003cMainWindow\u003egetController();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            stage.getIcons().add(new Image(this.getClass().getResourceAsStream(\"/images/Icon.jfif\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            mainWindow.setDuke(duke);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            mainWindow.displayDukeResponse(duke.getUi().say(SayType.INTRO));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 41
    }
  },
  {
    "path": "src/main/java/dukeproj/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.enums.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.BadDateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents a parser with static methods to interpret Strings into actionable data for DukeProject."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /** Date formatter when reading (to print from Duke) the date. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static DateTimeFormatter DATE_READ_FORMATTER \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd MMM uuuu\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /** Date formatter when writing (to write into Duke) the date.*/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static DateTimeFormatter DATE_WRITE_FORMATTER \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd MM uu\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the date in LocalDate form parsed from the String entered."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * If the String format is wrong, will throw BadDateException."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param str String to be parsed into a date."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return date in LocalDate format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws BadDateException if format of string is not aligned with write formatter."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static LocalDate dateParser(String str) throws BadDateException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MM uu\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return LocalDate.parse(str, formatter);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new BadDateException(\"Bad date format\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the command in the form of enum class Command parsed from the String entered."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * If String does not coincide with any command, will throw InvalidCommandException."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param str String to be parsed into a command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return command in enum class Command format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws InvalidCommandException String entered does not coincide with any command in enum class Command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static CommandType commandParser(String str) throws InvalidCommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return CommandType.valueOf(str.toUpperCase());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new InvalidCommandException(str + \" is an invalid command\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Gets a Command class object from a certain command type and description."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param commandType The type of command to return."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param description The description accompanying the command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return The Command class object to be returned."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Command getCommand(CommandType commandType, String description) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Command command \u003d new ExitCommand(); //default command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            command \u003d new ListCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            command \u003d new DoneCommand(description);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            //fallthrough"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            //fallthrough"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            command \u003d new AddCommand(description, commandType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            command \u003d new DeleteCommand(description);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case SCHEDULE:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            command \u003d new ScheduleCommand(description);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            command \u003d new FindCommand(description);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            command \u003d new HelpCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            //fallthrough"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            assert !commandType.equals(CommandType.BYE) : \"Erroneous Command\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs an empty Parser to be used in Duke GUI version."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 105
    }
  },
  {
    "path": "src/main/java/dukeproj/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.data.Schedule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.BadDateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.tasks.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents the storage file for DukeProject."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /** File object that connects to Duke\u0027s storage file on the hard drive. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Prints the file in storage into an ArrayList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Takes in a calender to update the calender with the tasks in the file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param schedule calender to be updated by tasks in storage file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return ArrayList made from tasks in storage file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public ArrayList\u003cTask\u003e printFileIntoList(Schedule schedule) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                String str \u003d sc.nextLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                String[] parts \u003d str.split(\"\\\\|\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                addTask(parts, tasks, schedule);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            System.err.println(\"File not found\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (BadDateException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            System.err.println(\"Bad dates in File\\n Please correct it and reload\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private void addTask(String[] inputs, ArrayList\u003cTask\u003e tasks, Schedule schedule)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throws BadDateException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        switch (inputs[0]) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            Task todo \u003d newTodo(Boolean.parseBoolean(inputs[1]), inputs[2]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            tasks.add(todo);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            Task event \u003d newEvent(Boolean.parseBoolean(inputs[1]), inputs[2], inputs[3]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            tasks.add(event);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            schedule.addDate(event);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            Task deadline \u003d newDeadline(Boolean.parseBoolean(inputs[1]), inputs[2], inputs[3]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            tasks.add(deadline);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            schedule.addDate(deadline);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            System.err.println(\"Error in file reading\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Task newTodo(boolean isDone, String description) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new Todo(isDone, description);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Task newEvent(boolean isDone, String description, String date) throws BadDateException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new Event(isDone, description, date);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Task newDeadline(boolean isDone, String description, String date) throws BadDateException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new Deadline(isDone, description, date);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Writes the tasks in an ArrayList into the storage file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param tasks ArrayList of tasks to be written into the storage file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void writeListIntoFile(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            FileWriter fw \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                writeTaskToFile(task, fw);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            System.err.println(\"Unable to write\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private void writeTaskToFile(Task task, FileWriter fw) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        switch (task.getType()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            fw.write(\"T|\" + task.getDone() + \"|\" + task.getTask()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    + System.lineSeparator());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            fw.write(\"E|\" + task.getDone() + \"|\" + task.getTask() + \"|\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    + task.getDate().format(Parser.DATE_WRITE_FORMATTER)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    + System.lineSeparator());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            fw.write(\"D|\" + task.getDone() + \"|\" + task.getTask() + \"|\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    + task.getDate().format(Parser.DATE_WRITE_FORMATTER)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    + System.lineSeparator());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            System.err.println(\"Error in TaskList\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs a Storage with the file pointing to the filepath provided."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Will make a directory if parent directory (default: data directory) is missing."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param filepath filepath to be assigned to the storage."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        file \u003d new File(filepath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            file.getParentFile().mkdir(); //makes data directory if does not exists"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            System.err.println(\"Unable to create file\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 139
    }
  },
  {
    "path": "src/main/java/dukeproj/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.enums.SayType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents the User Interface in DukeProject."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /** Logo of Duke. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private String logo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns Duke\u0027s response to a certain SayType."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param type The type of response to be returned."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return Duke\u0027s response."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public String say(SayType type) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case INTRO:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return getGuiIntroduction();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case EXIT:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return getExit();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return \"Here are all your tasks: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case ADD:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return \"I have added the following task: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return \"I have marked the following task as done: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return \"I have deleted the following task: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return \"Here are your matching tasks: \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case SEARCH:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return \"Here are your tasks on the date of \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case INVALID_COMMAND:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return \"Oi, there\u0027s no such command!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case EMPTY_DESCRIPTION:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return \"You blockhead! You forgot to include a description!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case BAD_DATE:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return \"HEY! Bad date format!\\nMake sure the format is: dd mm yy\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case BAD_DESCRIPTION:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return \"Tsk! \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return getHelp();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return \"**** What is this!?\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Prints out the exit message for DukeProject."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public String getExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return \"Get Lost.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private String getHelp() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return \"Here are the commands, you better follow them\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + \"\\nList: returns a list of all your tasks\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + \"\\nTodo: makes a new todo task\\n  Format: todo (task)\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + \"\\nDeadline: makes a new deadline task\\n  Format: deadline (task) /by (dd mm yy)\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + \"\\nEvent: makes a new event task\\n  Format: event (task) /at (dd mm yy)\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + \"\\nDone: marks a task as done\\n  Format: done (task index)\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + \"\\nDelete: deletes a task\\n  Format: delete (task index)\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + \"\\nSchedule: view schedule for a specific date\\n  Format: schedule (dd mm yy)\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + \"\\nFind: find tasks using keywords\\n  Format: find (keywords)\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + \"\\nBye: exits duke\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private String getGuiIntroduction() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return \"Hello! This is\\n\" + logo"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + \"\\nYou can type help for a list of commands!\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + \"\\nSo, whatdya want?\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Creates the User Interface with pre-defined logo and linebreak."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 87
    }
  },
  {
    "path": "src/main/java/dukeproj/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.data.Schedule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.data.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.enums.CommandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.enums.SayType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.BadDateException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.BadDescriptionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.DukeDescriptionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.tasks.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.tasks.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.tasks.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.tasks.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents a command to add a task into Duke\u0027s task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /** The description of the task to be added. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /** The type of the task to be added. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private CommandType type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Executes an add command to add a certain task into Duke\u0027s task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param ui The user interface of Duke, used to return Duke\u0027s response."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param taskList The list of tasks to add to."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param storage The object to assist in writing the task list into the storage file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param schedule Duke\u0027s schedule to be modified if added task is date sensitive."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return Duke\u0027s response in the form of a String."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws BadDescriptionException If the description is missing a \u0027/\u0027, for Event and Deadline cases only."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws DukeDescriptionException If the description is empty."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws BadDateException If the date provided does not follow the required date format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public String execute(Ui ui, TaskList taskList, Storage storage, Schedule schedule)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throws BadDescriptionException, DukeDescriptionException, BadDateException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new DukeDescriptionException(\"Empty Description\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Task task \u003d addTask();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String output \u003d ui.say(SayType.ADD) + \"\\n\" + task;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!type.equals(CommandType.TODO)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            //Add task into schedule if it is event or deadline"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            schedule.addDate(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        storage.writeListIntoFile(taskList.getList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Task addTask() throws BadDescriptionException, BadDateException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return new Todo(description);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            int eventDate \u003d description.indexOf(\"/\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            if (eventDate \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                throw new BadDescriptionException(\"Missing \u0027/\u0027 in Description\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return new Event(description.substring(0, eventDate),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    description.substring(eventDate + 4));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            int deadlineDate \u003d description.indexOf(\"/\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            if (deadlineDate \u003d\u003d -1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                throw new BadDescriptionException(\"Missing \u0027/\u0027 in Description\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return new Deadline(description.substring(0, deadlineDate),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    description.substring(deadlineDate + 4));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            System.err.println(\"Bad command type parsed into AddCommand, task defaults to Todo\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return new Todo(description); //default is todo task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs an add command object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param description Description of the task to be added."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param type Type of the task to be added."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public AddCommand(String description, CommandType type) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 89
    }
  },
  {
    "path": "src/main/java/dukeproj/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.data.Schedule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.data.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.BadDateException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.BadDescriptionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.DukeDescriptionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents an abstract class command which serves as the parent class to all command sub-classes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public abstract String execute(Ui ui, TaskList taskList, Storage storage, Schedule schedule)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throws BadDescriptionException, DukeDescriptionException, BadDateException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Checks if the command is an exit command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * This method will always return false unless the object is an ExitCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return False as default."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 28
    }
  },
  {
    "path": "src/main/java/dukeproj/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.data.Schedule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.data.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.enums.SayType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.BadDescriptionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.DukeDescriptionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents a command to delete a task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /** The index of the task deleted. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private String index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Executes the delete command to delete a specified task from the task list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param ui The user interface of Duke, used to return Duke\u0027s response."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param taskList The list of tasks to delete from."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param storage The object to assist in writing the task list into the storage file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param schedule Duke\u0027s schedule to be modified if deleted task is date sensitive."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return Duke\u0027s response in the form of a String."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws BadDescriptionException If the description is not in the form of an integer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws DukeDescriptionException If the description is empty."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public String execute(Ui ui, TaskList taskList, Storage storage, Schedule schedule)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throws BadDescriptionException, DukeDescriptionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            if (index.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                throw new DukeDescriptionException(\"Empty Description\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            int delete \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            if (delete \u003c\u003d 0 || delete \u003e taskList.getSize()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                throw new BadDescriptionException(\"Description for delete cannot be \" + delete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            Task deletedTask \u003d taskList.getTask(delete - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            taskList.removeTask(delete - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            schedule.removeTask(deletedTask, deletedTask.getDate());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            storage.writeListIntoFile(taskList.getList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return ui.say(SayType.DELETE) + \"\\n\" + deletedTask;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new BadDescriptionException(\"Description for delete cannot be Non-Integer\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs a delete command object with a description of the task to be deleted."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param index The index of the task to be deleted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public DeleteCommand(String index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 64
    }
  },
  {
    "path": "src/main/java/dukeproj/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.data.Schedule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.data.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.enums.SayType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.BadDescriptionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.DukeDescriptionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents a command to mark a certain task as done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /** The index of the task to be marked as done. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private String index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Executes the done command to mark the task, as specified in the description, as done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param ui The user interface of Duke, used to return Duke\u0027s response."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param taskList The list of tasks to be marked from."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param storage The object to assist in writing the task list into the storage file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param schedule Duke\u0027s schedule to be modified if done task is date sensitive."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return Duke\u0027s response in the form of a String."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws BadDescriptionException If index is not in the form of an integer."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws DukeDescriptionException If index is empty."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public String execute(Ui ui, TaskList taskList, Storage storage, Schedule schedule)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throws BadDescriptionException, DukeDescriptionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            if (index.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                throw new DukeDescriptionException(\"Empty Description\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            int done \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            if (done \u003c\u003d 0 || done \u003e taskList.getSize()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                throw new BadDescriptionException(\"Description for done cannot be \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        + done);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            taskList.getTask(done - 1).setDone(true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            storage.writeListIntoFile(taskList.getList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return ui.say(SayType.DONE) + \"\\n  \" + taskList.getTask(done - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new BadDescriptionException(\"Description for done cannot be Non-Integer\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs a done command object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param index The index of the task to be marked as done."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public DoneCommand(String index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 61
    }
  },
  {
    "path": "src/main/java/dukeproj/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.data.Schedule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.data.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.enums.SayType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents a command to exit the Duke application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Executes the exit command to exit from Duke Application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * However, this method primarily only return Duke\u0027s response. The actual Exit check will be done by the GUI"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * using the isExit method."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param ui The user interface of Duke, used to return Duke\u0027s response."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param taskList Unused."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param storage Unused."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param schedule Unused."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return Duke\u0027s response in the form of a String."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public String execute(Ui ui, TaskList taskList, Storage storage, Schedule schedule) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return ui.say(SayType.EXIT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns whether the command is an exit command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return True as the command is an exit command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 38
    }
  },
  {
    "path": "src/main/java/dukeproj/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.data.Schedule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.data.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.enums.SayType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.DukeDescriptionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents a find command to find tasks with certain keywords in the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /** Keywords used to find tasks. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Executes the find command to find tasks using the keywords in the description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param ui The user interface of Duke, used to return Duke\u0027s response."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param taskList The list of tasks to find the tasks from."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param storage Unused."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param schedule Unused."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return Duke\u0027s response in the form of a String."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws DukeDescriptionException If the description is empty."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public String execute(Ui ui, TaskList taskList, Storage storage, Schedule schedule)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throws DukeDescriptionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (keyword.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new DukeDescriptionException(\"Empty Description\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //TaskList outputList \u003d new TaskList(taskList.find(keyword.split(\" \")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return ui.say(SayType.FIND) + \"\\n\" + taskList.find(keyword.split(\" \"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs a find command object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param keyword The keyword used to find tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 45
    }
  },
  {
    "path": "src/main/java/dukeproj/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.data.Schedule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.data.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.enums.SayType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the response to help command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param ui Used to return Duke\u0027s response."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param taskList Unused."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param storage Unused."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param schedule Unused."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return Duke\u0027s response to help."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public String execute(Ui ui, TaskList taskList, Storage storage, Schedule schedule) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return ui.say(SayType.HELP);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 25
    }
  },
  {
    "path": "src/main/java/dukeproj/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.data.Schedule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.data.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.enums.SayType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents a command to list all tasks in Duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Executes the list command to list out all available tasks in the task list in Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param ui The user interface of Duke, used to return Duke\u0027s response."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param taskList The list of tasks to list from."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param storage Unused."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param schedule Unused."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return Duke\u0027s response in the form of a String."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public String execute(Ui ui, TaskList taskList, Storage storage, Schedule schedule) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return ui.say(SayType.LIST) + \"\\n\" + taskList.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 26
    }
  },
  {
    "path": "src/main/java/dukeproj/command/ScheduleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.data.Schedule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.data.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.enums.SayType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.BadDateException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.DukeDescriptionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents a command to search for tasks happening on a certain date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /** The date to be searched for. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Executes the search command to search for tasks that are happening on the date specified by the description."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param ui The user interface of Duke, used to return Duke\u0027s response."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param taskList Unused."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param storage Unused."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param schedule The schedule to search tasks from."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return Duke\u0027s response in the form of a String."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws DukeDescriptionException If the date is empty."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws BadDateException If the date is in a wrong format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public String execute(Ui ui, TaskList taskList, Storage storage, Schedule schedule)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throws DukeDescriptionException, BadDateException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (date.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new DukeDescriptionException(\"Empty Description\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        LocalDate date \u003d Parser.dateParser(this.date);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return ui.say(SayType.SEARCH) + date.format(Parser.DATE_READ_FORMATTER)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + \":\\n\" + schedule.searchDate(date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs a search command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param date Date to be searched for."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public ScheduleCommand(String date) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 51
    }
  },
  {
    "path": "src/main/java/dukeproj/data/Schedule.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.enums.TType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents a scheduler using a HashMap to map dates to"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * an ArrayList of tasks occurring on the specific date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class Schedule {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /** HashMap representing the schedule. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private HashMap\u003cLocalDate, ArrayList\u003cTask\u003e\u003e mapOfDates;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Adds a task into the schedule."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param task task to be added into the schedule."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void addDate(Task task) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (mapOfDates.containsKey(task.getDate())) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            mapOfDates.get(task.getDate()).add(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            mapOfDates.put(task.getDate(), tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Searches for a specific date in the schedule and returns all tasks due on that date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param date date to be searched for."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return a string of the tasks found in the specific date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public String searchDate(LocalDate date) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (mapOfDates.containsKey(date)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            ArrayList\u003cTask\u003e tasks \u003d mapOfDates.get(date);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                sb.append(\"  \").append(task).append(\"\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Removes a task from the schedule."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param task task to be removed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param date date of task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void removeTask(Task task, LocalDate date) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (mapOfDates.containsKey(date)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            ArrayList\u003cTask\u003e tasks \u003d mapOfDates.get(date);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            tasks.remove(task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } else if (task.getType().equals(TType.TODO)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            // do nothing as type is todo"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            System.out.println(\"Task: \" + task"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    + \" is not found in the schedule\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs an empty schedule."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Schedule() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        mapOfDates \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 74
    }
  },
  {
    "path": "src/main/java/dukeproj/data/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents a list of tasks using ArrayList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /** Data structure used to represent list. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Gets the size of the Task List."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return size of task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Adds the task provided into TaskList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param task task to add into list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Gets a certain task in the TaskList based upon the index provided."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param idx index of task to get."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return task from list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Task getTask(int idx) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return tasks.get(idx);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Removes the task at the specified index in TaskList."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param idx index of task to remove."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void removeTask(int idx) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        tasks.remove(idx);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Gets the ArrayList variable in TaskList."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return ArrayList of tasks."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Checks if the TaskList contains a specified Task."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param task the task to be checked for."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return boolean whether the list has the specified Task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Finds tasks in the TaskList using a varargs of keywords."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param keywords The varargs of keywords used to find tasks."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return The ArrayList of tasks found using the keywords."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public String find(String...keywords) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ArrayList\u003cTask\u003e outputs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        HashMap\u003cTask, Integer\u003e indexes \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        inputFound(outputs, indexes, keywords);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return changeFoundToString(outputs, indexes);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private void inputFound(ArrayList\u003cTask\u003e outputs, HashMap\u003cTask, Integer\u003e indexes, String...keywords) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            for (String str: keywords) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                if (task.getTask().contains(str) \u0026\u0026 !outputs.contains(task)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    outputs.add(task);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    indexes.put(task, i + 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private String changeFoundToString(ArrayList\u003cTask\u003e outputs, HashMap\u003cTask, Integer\u003e indexes) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        for (Task task: outputs) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            output.append(indexes.get(task)).append(\".\").append(task).append(\"\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs a TaskList based on an existing ArrayList."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param tasks an ArrayList of tasks to be added into TaskList."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs an empty list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Gets the String representation of task list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return TaskList in the form of a String."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            output.append(i).append(\".\").append(tasks.get(i - 1)).append(\"\\n\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 133
    }
  },
  {
    "path": "src/main/java/dukeproj/enums/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Enumerates all the possible commands that can be read by DukeProject."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    LIST, DONE, TODO, DEADLINE, EVENT, DELETE, SCHEDULE, FIND, BYE, HELP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 8
    }
  },
  {
    "path": "src/main/java/dukeproj/enums/SayType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Enumerates all the possible types of response Duke will say using the Ui."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public enum SayType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    LIST, DELETE, ADD, DONE, FIND, SEARCH, INTRO, EXIT, HELP,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    INVALID_COMMAND, EMPTY_DESCRIPTION, BAD_DESCRIPTION, BAD_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 9
    }
  },
  {
    "path": "src/main/java/dukeproj/enums/TType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Enumerates the different type of tasks in the DukeProject."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public enum TType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    EVENT, TODO, DEADLINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 8
    }
  },
  {
    "path": "src/main/java/dukeproj/exception/BadDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents a bad date exception,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * whereby the date format provided does not coincide with the appropriate format."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class BadDateException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public BadDateException(String errorMsg) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 11
    }
  },
  {
    "path": "src/main/java/dukeproj/exception/BadDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents a bad description exception,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * whereby the description provided does not coincide with the appropriate format."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class BadDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public BadDescriptionException(String errorMsg) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 11
    }
  },
  {
    "path": "src/main/java/dukeproj/exception/DukeDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents a description exception, whereby the description is empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class DukeDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public DukeDescriptionException(String errorMsg) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 10
    }
  },
  {
    "path": "src/main/java/dukeproj/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents an exception that is thrown and handled by the DukeProject."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Serves as parent class to all exceptions in dukeproj.Duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public DukeException(String errorMsg) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 11
    }
  },
  {
    "path": "src/main/java/dukeproj/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents an invalid command,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * whereby the command given is not found in the enum class: Command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InvalidCommandException(String errorMsg) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 11
    }
  },
  {
    "path": "src/main/java/dukeproj/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents the dialog box in the dialog container of Duke\u0027s GUI."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Creates a user dialog box representing the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param label The String inputted by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param image The image that represents the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return The user\u0027s dialog box."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static DialogBox getUserDialog(String label, Image image) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new DialogBox(label, image);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Creates a Duke dialog box representing Duke."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param label The String that contains the response by Duke."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param image The image that represents Duke."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return Duke\u0027s dialog box."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static DialogBox getDukeDialog(String label, Image image) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        DialogBox db \u003d new DialogBox(label, image);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 73
    }
  },
  {
    "path": "src/main/java/dukeproj/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.command.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.enums.SayType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import javafx.scene.layout.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.concurrent.Executors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.concurrent.ScheduledExecutorService;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/UserCat.jpg\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DukeWolf.jpg\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        scrollPane.getStylesheets().add("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                this.getClass().getResource(\"/css/ScrollPaneStyles.css\").toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        sendButton.getStylesheets().add("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                this.getClass().getResource(\"/css/ButtonStyles.css\").toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        userInput.getStylesheets().add("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                this.getClass().getResource(\"/css/TextFieldStyles.css\").toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Echoes a string into the GUI by Duke."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param str String to be echoed into the GUI by Duke."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void displayDukeResponse(String str) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(str, dukeImage));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and appends them to"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * dialog container. Clears user input upon processing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * The method will also check whether the command given by user is an exit command and responses appropriately."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        StringBuilder dukeResponse \u003d new StringBuilder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Command command \u003d getDukeCommand(dukeResponse);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assert dukeResponse.length() \u003e 0 : \"Duke response cannot be empty\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //set up labels for user and duke"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String userText \u003d userInput.getText();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String dukeText \u003d dukeResponse.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //add input and response into dialog container"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                DialogBox.getUserDialog(userText, userImage),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, dukeImage)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        );"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (command.isExit()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            delayExit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Command getDukeCommand(StringBuilder response) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            Command command \u003d duke.getCommandResponse(userInput.getText());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            response.append(duke.getResponse(command));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            response.append(duke.getUi().say(SayType.INVALID_COMMAND));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private void delayExit() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ScheduledExecutorService executorService \u003d Executors.newSingleThreadScheduledExecutor();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        executorService.schedule(MainWindow::closeApp,2, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        executorService.shutdown();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Closes the GUI Application."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static void closeApp() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            System.err.println(\"error in closing Duke, Please alt+F4\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 116
    }
  },
  {
    "path": "src/main/java/dukeproj/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.enums.TType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.BadDateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents a task with a deadline."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /** Date to finish task by, in LocalDate format. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the date of the deadline."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return date in LocalDate format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the type of task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return TType.DEADLINE."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public TType getType() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return TType.DEADLINE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs a deadline task with default false isDone."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param task Description of task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param date Date to be done by, in String form."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws BadDateException If date format is wrong."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Deadline(String task, String date) throws BadDateException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.date \u003d Parser.dateParser(date);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs a deadline task with user defined isDone."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param isDone Whether the task is done."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param task Description of task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param date Date to be done by, in String form."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws BadDateException If date format is wrong."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Deadline(boolean isDone, String task, String date) throws BadDateException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        super(isDone, task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.date \u003d Parser.dateParser(date);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the string form of deadline."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return String form of deadline, will show ✓ if done and ✗ if not."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return  \"[D][Y] \" + task + \" (by: \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    + date.format(Parser.DATE_READ_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return \"[D][N] \" + task + \" (by: \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    + date.format(Parser.DATE_READ_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 74
    }
  },
  {
    "path": "src/main/java/dukeproj/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.enums.TType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.BadDateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents an event, which is a task to attend to on a certain date."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /** Date of event, in LocalDate format. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the date of the event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return date in LocalDate format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the type of task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return TType.event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public TType getType() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return TType.EVENT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs an event with default false isDone."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param task Description of event."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param date Date of event, in String form."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws BadDateException If date format is wrong."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Event(String task, String date) throws BadDateException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.date \u003d Parser.dateParser(date);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs an event with user defined isDone."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param isDone Whether the event is done."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param task Description of event."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param date Date of event, in String form."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws BadDateException If date format is wrong."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Event(boolean isDone, String task, String date) throws BadDateException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        super(isDone, task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.date \u003d Parser.dateParser(date);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the string form of event."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return String form of event, will show ✓ if done and ✗ if not."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return  \"[E][Y] \" + task + \" (at: \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    + date.format(Parser.DATE_READ_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return \"[E][N] \" + task + \" (at: \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    + date.format(Parser.DATE_READ_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 74
    }
  },
  {
    "path": "src/main/java/dukeproj/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.enums.TType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents an abstract task to be implemented by different type of task subclasses."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /** The description of the task. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    protected String task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public abstract TType getType();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public abstract LocalDate getDate();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return task description in String format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Shows whether a task is done or not."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return boolean representing whether the task is done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Marks a task as done or not done."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param bool boolean to set isDone to."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void setDone(boolean bool) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        isDone \u003d bool;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs a Task object with a description and default isDone \u003d false."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param task description of task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Task(String task) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Overloaded constructor that additionally modifies boolean isDone."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param isDone boolean to set isDone to."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param task description of task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Task(boolean isDone, String task) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this(task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 67
    }
  },
  {
    "path": "src/main/java/dukeproj/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.enums.TType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents a task to be done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns type of task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return TType.TODO."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public TType getType() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return TType.TODO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns null as todo does not have a date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return null as todo tasks has no dates."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs todo task with default false isDone."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param task Description of task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Todo(String task) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs a todo task with user defined isDone."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param isDone Whether the task is done."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param task Description of task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Todo(boolean isDone, String task) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        super(isDone, task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the string form of todo."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return String form of todo, will show ✓ if done and ✗ if not."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return  \"[T][Y] \" + task;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return \"[T][N] \" + task;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 61
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"100\" prefWidth\u003d\"300\" text\u003d\"Label\" wrapText\u003d\"true\" style\u003d\"-fx-background-image: url(\u0027/images/Label.jfif\u0027)\" textFill\u003d\"whitesmoke\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \u003cInsets bottom\u003d\"0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "foochifa": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: black\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"dukeproj.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "foochifa": 19
    }
  },
  {
    "path": "src/test/java/dukeproj/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.enums.CommandType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.BadDateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void dateParser_success() throws BadDateException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(LocalDate.parse(\"2020-10-10\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                Parser.dateParser(\"10 10 20\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void dateParser_exceptionThrown() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            assertEquals(LocalDate.parse(\"2020-10-10\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    Parser.dateParser(\"2020-10-10\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (BadDateException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            assertEquals(\"Bad date format\", e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void commandParser_success() throws InvalidCommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(CommandType.TODO, Parser.commandParser(\"todo\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void commandParser_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            assertEquals(CommandType.TODO, Parser.commandParser(\"td\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            assertEquals(\"td is an invalid command\", e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 45
    }
  },
  {
    "path": "src/test/java/dukeproj/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package dukeproj;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.data.Schedule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import dukeproj.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void printFileIntoList_emptyFile() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Storage storageTest \u003d new Storage(\"./testdata/emptyFile.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(new ArrayList\u003cTask\u003e(), storageTest.printFileIntoList(new Schedule()));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void printFileIntoList_badSeparator() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Storage storageTest \u003d new Storage(\"./testdata/badSeparator.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(new ArrayList\u003cTask\u003e(), storageTest.printFileIntoList(new Schedule()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 24
    }
  },
  {
    "path": "src/test/testdata/badSeparator.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "T.false.borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": "T false read book"
      }
    ],
    "authorContributionMap": {
      "foochifa": 2
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": "Hello I am "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "foochifa": 10
    }
  },
  {
    "path": "text-ui-test/Input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": "deadline return book /by 6th June"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "event project meeting /at 6th Aug 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "foochifa": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "if not exist C:\\Repos\\DukeProject\\bin mkdir C:\\Repos\\DukeProject\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "javac  -cp C:\\Repos\\DukeProject\\src\\main\\java -Xlint:none -d C:\\Repos\\DukeProject\\bin C:\\Repos\\DukeProject\\src\\main\\java\\dukeproj.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "java -classpath C:\\Repos\\DukeProject\\bin dukeproj.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "cmd/k"
      }
    ],
    "authorContributionMap": {
      "foochifa": 23
    }
  }
]
