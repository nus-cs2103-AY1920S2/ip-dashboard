[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    toolVersion \u003d \"8.23\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "version \u00271.0-SNAPSHOT\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "sourceCompatibility \u003d 1.8"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    testCompile group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "test {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 31,
      "-": 19
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.exceptions.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * The Main class used to run the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Creates the Ui, Storage and TaskList objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Catches DukeExceptions and prints the error messages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Specifies the path to tasks.txt."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Terminates when execute method of Command returns false."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Storage storage \u003d new Storage(\"../resources/tasks.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TaskList taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ui.start();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Boolean isRunning \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        while (isRunning) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                String userInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                Command cmd \u003d Parser.parseInput(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                isRunning \u003d cmd.execute(storage, taskList, ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                ui.promptMsg();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                ui.errorMsg(e);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                ui.promptMsg();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 37,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.exceptions.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * The UI class for Duke."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Currently customised to Squirtle."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Returns custom messages for each action taken by the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " **/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    protected String logoPath \u003d \"../resources/logo.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    protected String waterDroplets \u003d \"\\uD83D\\uDCA6\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try (BufferedReader br \u003d new BufferedReader(new FileReader(logoPath))) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                System.out.println(line); // print logo"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.welcomeMsg();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.promptMsg();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void promptMsg() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.lineBreak();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        System.out.print(\"What will SQUIRTLE do? \u003e \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void exitMsg() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.defaultMsg(\"SQUIRTLE shall retreat!!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void findMsg(ArrayList\u003cTask\u003e lst, String keyword) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (lst.size() \u003d\u003d 0) { // no task containing the keyword found"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            this.defaultMsg(\"Uh oh! SQUIRTLE could not find anything with \" + keyword + \"!!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            this.defaultMsg(\"SQUIRTLE discovered \" + lst.size() + \" thing(s) containing \" + keyword + \": \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            this.printList(lst);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void listMsg(ArrayList\u003cTask\u003e lst) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.defaultMsg(\"SQUIRTLE has to attack: \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.printList(lst);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void printList(ArrayList\u003cTask\u003e lst) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        for (int i \u003d 0; i \u003c lst.size(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            System.out.println(\"\\t\" + (i + 1) + \". \" + lst.get(i));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void taskMsg(Task task, int lstSize) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.defaultMsg(\"adding: \" + task.toString() + \"\\nSQUIRTLE now has \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                + lstSize + \" thing(s) to do!!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void deleteMsg(Task task) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.defaultMsg(\"SQUIRTLE will forget: \" + task.toString() + \" ~~\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void doneMsg(Task task) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.defaultMsg(\"SQUIRTLE used water gun on: \" + task.toString() + \"!\\n\\tIt is super effective!!\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void lineBreak() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        String lineBreak \u003d \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        System.out.println(lineBreak);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void errorMsg(DukeException e) { // error responses"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        switch (e.error) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            case NUMBER: // error in accessing list, no such task exists"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                System.out.println(\"SQUIRTLE cannot find task!!\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            case INSUFFICIENT:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                System.out.println(\"SQUIRTLE needs more info!!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            case COMMAND:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                System.out.println(\"SQUIRTLE doesn\u0027t understand!!\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            case DATEFORMAT:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                System.out.println(\"SQUIRTLE doesn\u0027t understand this date!!\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            case KEYWORDS:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                System.out.println(\"SQUIRTLE is confused!! Give SQUIRTLE one keyword!!\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void welcomeMsg() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        System.out.println(waterDroplets + \" SQUIRTLE!! I\u0027M HERE TO HELP!! SQUIRTLE!!\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void defaultMsg(String message) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        System.out.println(waterDroplets + \" SQUIRTLE!!\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        System.out.println(\"\\t\" + message);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 111
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.tasks.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    Task task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Adds task to TaskList object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Updates tasks.txt file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Prints Ui message for adding tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return true to indicate that this is not an ExitCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean execute(Storage storage, TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        storage.update(taskList.getTaskList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ui.taskMsg(task, taskList.getListSize());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 31
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * An abstract class that represents a Command, created by the Parser class when parsing user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public abstract boolean execute(Storage storage, TaskList tasks, Ui ui) throws DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 12
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.tasks.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    int taskNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public DeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Deletes task from TaskList object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Updates the storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Prints Ui\u0027s delete message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return true to indicate that this is not an ExitCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean execute(Storage storage, TaskList taskList, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Task task \u003d taskList.deleteTask(this.taskNumber);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        storage.update(taskList.getTaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ui.deleteMsg(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 33
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.tasks.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    int taskNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Marks the task at index taskNumber as done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Updates the storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Prints Ui\u0027s done task message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return true to indicate that this is not an ExitCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean execute(Storage storage, TaskList taskList, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Task task \u003d taskList.doneTask(this.taskNumber);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        storage.update(taskList.getTaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ui.doneMsg(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 33
    }
  },
  {
    "path": "src/main/java/duke/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Prints the Ui\u0027s exit message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return false to indicate that this is an ExitCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean execute(Storage storage, TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ui.exitMsg();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return false; // return false to exit"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 24
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Searches for tasks from taskList with descriptions containing the FindCommand object\u0027s keyword"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Passes these tasks to Ui for printing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return true to indicate that this is not an ExitCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean execute(Storage storage, TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ArrayList\u003cTask\u003e lst \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ArrayList\u003cTask\u003e found \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        for (Task task : lst) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            if (task.getDescription().contains(this.keyword)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                found.add(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ui.findMsg(found, this.keyword);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 38
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Gets the ArrayList representation of the tasks from TaskList object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Prints the tasks using Ui."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return true to indicate that this is not an ExitCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean execute(Storage storage, TaskList taskList, Ui ui) { // print out the task list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ui.listMsg(taskList.getTaskList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 26
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * An enums class to represent possible causes of exceptions in the Duke application"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public enum DukeError {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    NUMBER, // error in accessing list, no such task exists"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    INSUFFICIENT, // error in creation of tasks, insufficient commands"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    COMMAND, // error in command - no task of given type exists"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    DATEFORMAT, // error in date given by the user - unable to parse"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    KEYWORDS // error when user providing keywords - too many keywords"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 12
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * A custom exception class representing exceptions unique to Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public DukeError error;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public DukeException(DukeError error) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.error \u003d error;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "airshhlay": 13
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.TimeParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class Deadline extends Task implements TimeParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    protected LocalDate deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * A constructor for creating a new Deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Sets isDone to false by default."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Parses String representation of deadline into a LocalDate object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param description description of deadline"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param deadline    String representation of the deadline"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws DateTimeParseException"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Deadline(String description, String deadline) throws DateTimeParseException { // constructor for creating new deadline"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.deadline \u003d TimeParser.parseDate(deadline);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super.TYPE \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Another constructor for creating Deadline."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * This constructor is called in the Parser class when parsing file to string."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Sets isDone to true or false according to status number (0 or 1)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param status      0 - isDone is false, 1 - isDone is true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param description description of deadline"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param deadline    String representation of the deadline"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws DateTimeParseException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Deadline(String status, String description, String deadline) throws DateTimeParseException { // constructor when parsing tasks from hard disk"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(status, description);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super.TYPE \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.deadline \u003d TimeParser.parseDate(deadline);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public LocalDate getTaskTime() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return this.deadline;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + TimeParser.printDate(this.deadline) + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 49
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.TimeParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class Event extends Task implements TimeParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    protected LocalDate eventTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * A constructor for creating a new Event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Sets isDone to false by default."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Parses String representation of deadline into a LocalDate object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param description description of event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param eventTime   String representation of the event time"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws DateTimeParseException"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Event(String description, String eventTime) throws DateTimeParseException { // constructor for creating new event"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.eventTime \u003d TimeParser.parseDate(eventTime);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super.TYPE \u003d TaskType.EVENT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Another constructor for creating Event"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * This constructor is called in the Parser class when parsing file to string."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Sets isDone to true or false according to status number (0 or 1)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param status      0 - isDone is false, 1 - isDone is true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param description description of event"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param eventTime   String representation of the event time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws DateTimeParseException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Event(String status, String description, String eventTime) throws DateTimeParseException { // constructor for parsing tasks from hard disk"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(status, description);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super.TYPE \u003d TaskType.EVENT;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.eventTime \u003d TimeParser.parseDate(eventTime);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public LocalDate getTaskTime() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return this.eventTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + TimeParser.printDate(this.eventTime) + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 49
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    protected TaskType TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * A default constructor with no parameters, for stub."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * A constructor for creating new tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Sets isDone to false by default."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param description description of the task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Task(String description) { // constructor for duke.tasks.Task when creating new duke.tasks.Task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.description \u003d description.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Another constructor for creating tasks with isDone specified."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param status      0 - isDone is false, 1 - isDone is true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param description description of the task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Task(String status, String description) { // constructor for duke.tasks.Task, if need to specify status (when parsing tasks from hard disk)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.isDone \u003d status.equals(\"1\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return (isDone ? \"[✔]\" : \"[✘]\"); //return tick or X symbols"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public int getDoneInt() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return (isDone ? 1 : 0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return this.TYPE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return getStatusIcon() + \" \" + this.description;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 61
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * An enum class to represent the available types of tasks that can be created."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    TODO(\"T\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    EVENT(\"E\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    DEADLINE(\"D\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private String shortForm;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    TaskType(String shortForm) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.shortForm \u003d shortForm;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return this.shortForm;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 21
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super.TYPE \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public ToDo(String status, String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(status, description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super.TYPE \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 18
    }
  },
  {
    "path": "src/main/java/duke/utilities/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.tasks.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.exceptions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * A general parser to parse user input as well as tasks to and from tasks.txt."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Parses task into a string to load into tasks.txt."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param task the task to parse"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return string representation of the task in the form (TYPE)|(0 or 1)|(description)|task time (if any)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static String parseTask(Task task) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        String parsed;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TaskType taskType \u003d task.getTaskType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                parsed \u003d taskType.toString() + \"|\" + task.getDoneInt() + \"|\" + task.getDescription();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                parsed \u003d taskType.toString() + \"|\" + task.getDoneInt() + \"|\" + task.getDescription() + \"|\" + ((Event) task).getTaskTime();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                parsed \u003d taskType.toString() + \"|\" + task.getDoneInt() + \"|\" + task.getDescription() + \"|\" + ((Deadline) task).getTaskTime();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                parsed \u003d \"\"; // TODO add error message, change duke.exceptions.DukeException to such task exists"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return parsed;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Parses line from tasks.txt into a Task object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param line String representation of task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return a Task object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static Task parseFile(String line) { // parses line from tasks.txt into a task"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        String[] split \u003d line.split(Pattern.quote(\"|\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        switch (split[0]) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                return new ToDo(split[1], split[2]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                return new Event(split[1], split[2], split[3]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                return new Deadline(split[1], split[2], split[3]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                System.out.println(\"Error in parser parse method\"); // TODO add error message and duke.exceptions.DukeException"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Parses user input into a Command object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param input user input eg. \"deadline blah /by 9/2/2020\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return a Command representing the action to be taken as directed by user"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws DukeException if insufficient commands given, wrong command given or wrong date format given"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static Command parseInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            input \u003d input.trim(); // trim any opening and trailing whitespace"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            if (input.equals(\"bye\")) { // parse exit command"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            } else if (input.equals(\"list\")) { // parse list command"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            } else if (input.startsWith(\"done\")) { // parse done command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(input.split(\" \", 2)[1]) - 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                return new DoneCommand(taskNumber);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            } else if (input.startsWith(\"delete\")) { // parse delete command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(input.split(\" \", 2)[1]) - 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                return new DeleteCommand(taskNumber);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            } else if (input.startsWith(\"find\")) { // parse find by keyword command"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                String[] split \u003d input.split(\" \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                if (split.length \u003e 2) { // if more than one keyword given, throw error"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    throw new DukeException(DukeError.KEYWORDS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    return new FindCommand(split[1]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            } else { // parse task command"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                String[] split \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                TaskType taskType \u003d TaskType.valueOf(split[0].toUpperCase());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                String taskDetails \u003d split[1];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                Task task \u003d new Task();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    case TODO:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        task \u003d new ToDo(taskDetails);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    case EVENT:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        String[] eventDetails \u003d taskDetails.split(\"/at\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        String eventDescription \u003d eventDetails[0].trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        String eventTime \u003d eventDetails[1].trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        task \u003d new Event(eventDescription, eventTime);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    case DEADLINE:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        String[] deadlineDetails \u003d taskDetails.split(\"/by\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        String deadlineDescription \u003d deadlineDetails[0].trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        String deadline \u003d deadlineDetails[1].trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        task \u003d new Deadline(deadlineDescription, deadline);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                return new AddCommand(task);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (IndexOutOfBoundsException e) { // catch insufficient commands given"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new DukeException(DukeError.INSUFFICIENT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (IllegalArgumentException e) { // catch wrong command given"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new DukeException(DukeError.COMMAND);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (DateTimeParseException e) { // catch wrong date format given"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new DukeException(DukeError.DATEFORMAT);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 126
    }
  },
  {
    "path": "src/main/java/duke/utilities/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Storage class to load and add tasks to tasks.txt."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    String path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    Parser parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Constructor for Storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param path the String representation of the path to tasks.txt, passed to Storage in Duke class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Loads all tasks from the hard disk into an ArrayList of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return ArrayList of all tasks previously stored in the hard disk."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public ArrayList\u003cTask\u003e load() { // load all tasks from hard disk into an ArrayList of tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ArrayList\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            File file \u003d new File(path);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            FileReader fr \u003d new FileReader(path);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                line \u003d line.replaceAll(\"[^\\\\x00-\\\\x7F]\", \"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                lst.add(Parser.parseFile(line));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return lst;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Updates the file in the hard disk whenever the task list changes."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Called in execute method of Command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param lst the updated ArrayList of tasks, to be parsed into the hard disk."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void update(ArrayList\u003cTask\u003e lst) { // update the file in the hard disk whenever the task list changes"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            File file \u003d new File(path);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            FileOutputStream outputStream \u003d new FileOutputStream(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            OutputStreamWriter outputStreamWriter \u003d new OutputStreamWriter(outputStream, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(outputStreamWriter);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            for (Task task : lst) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                bw.write(Parser.parseTask(task));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                bw.flush();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 86
    }
  },
  {
    "path": "src/main/java/duke/utilities/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.exceptions.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * A class to add, delete and mark tasks as done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * TaskList object is passed to the execute method of Command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    protected ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) { // initialise the task list with files loaded from storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Deletes task from taskList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param index the index where the task to be removed is at in the ArrayList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return the deleted task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Task deleteTask(int index) throws DukeException { // deletes task at the index provided, and returns the deleted task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return taskList.remove(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (IndexOutOfBoundsException e) { // throw exception if the task does not exist at index provided"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new DukeException(DukeError.NUMBER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Marks task as done in the taskList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param index the index where the task to be marked done is at in the ArrayList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return the task marked as done"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Task doneTask(int index) throws DukeException { // marks the task at the index provided as done, and returns the done task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            task \u003d taskList.get(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (IndexOutOfBoundsException e) { // throw exception if the task does not exist at index provided"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new DukeException(DukeError.NUMBER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Adds given task to the ArrayList."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param task task to be added"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return a boolean True if successfully added"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean addTask(Task task) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return taskList.add(task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 69
    }
  },
  {
    "path": "src/main/java/duke/utilities/TimeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * An interface to parse date and time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Implemented by Deadline and Event classes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public interface TimeParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Parses given string representation of date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Allows for 2 formats, one for parsing user input in the format \"d/M/yyyy\"."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * The second format is for parsing dates in the default LocalDate pattern from file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param date String representation of date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return LocalDate object representing the given date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws DateTimeParseException if no valid date format is given"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    static LocalDate parseDate(String date) throws DateTimeParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return LocalDate.parse(date, DateTimeFormatter.ofPattern(\"d/M/yyyy\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return LocalDate.parse(date); // parse the default pattern"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Prints the date in the format \"d MMM yyyy\"."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Called in the Deadline and Event classes when displaying to the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param date the LocalDate object to be printed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return String representation \"d MMM yyyy\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    static String printDate(LocalDate date) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 40
    }
  },
  {
    "path": "src/main/resources/logo.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "              _,........__"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            ,-\u0027            \"`-."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "          ,\u0027                   `-."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ,\u0027                        \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "      ,\u0027                           ."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "      .\u0027\\               ,\"\".       `"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     ._.\u0027|             / |  `       \\"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     |   |            `-.\u0027  ||       `."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     |   |            \u0027-._,\u0027||       | \\"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     .`.,\u0027             `..,\u0027.\u0027       , |`-."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     l                       .\u0027`.  _/  |   `."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     `-.._\u0027-   ,          _ _\u0027   -\" \\  .     `"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "`.\"\"\"\"\"\u0027-.`-...,---------\u0027,\u0027         `. `....__."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ".\u0027        `\"-..___      __,\u0027\\          \\  \\     \\"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\\_ .          |   `\"\"\"\"\u0027    `.           . \\     \\"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "  `.          |              `.          |  .     L"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    `.        |`--...________.\u0027.        j   |     |"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "      `._    .\u0027      |          `.     .|   ,     |"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "         `--,\\       .            `7\"\"\u0027 |  ,      |"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            ` `      `            /     |  |      |    _,-\u0027\"\"\"`-."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "             \\ `.     .          /      |  \u0027      |  ,\u0027          `."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "              \\  v.__  .        \u0027       .   \\    /| /              \\"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "               \\/    `\"\"\\\"\"\"\"\"\"\"`.       \\   \\  /.\u0027\u0027                |"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                `        .        `._ ___,j.  `/ .-       ,---.     |"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                ,`-.      \\         .\"     `.  |/        j     `    |"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "               /    `.     \\       /         \\ /         |     /    j"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "              |       `-.   7-.._ .          |\"          \u0027         /"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "              |          `./_    `|          |            .     _,\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "              `.           / `----|          |-............`---\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \\          \\      |          |"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "               ,\u0027           )     `.         |"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                7____,,..--\u0027      /          |"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                                  `---.__,--.\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                  _____             _      _   _"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                 / ____|           (_)    | | | |"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                | (___   __ _ _   _ _ _ __| |_| | ___"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                 \\___ \\ / _` | | | | | \u0027__| __| |/ _ \\"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                 ____) | (_| | |_| | | |  | |_| |  __/"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                |_____/ \\__, |\\__,_|_|_|   \\__|_|\\___|"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                           | |"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                           |_|"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 41
    }
  },
  {
    "path": "src/main/resources/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "T|0|that"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "T|0|this"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "D|0|blah|2020-02-09"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "E|0|blah|2020-02-09"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "E|0|new|2020-12-09"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 5
    }
  },
  {
    "path": "src/test/java/duke/tasks/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    LocalDate testDate \u003d LocalDate.parse(\"2020-02-09\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void testEventConstructor() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Event task \u003d new Event(\"1\", \"blah\", \"9/02/2020\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(TaskType.EVENT, task.getTaskType());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(\"blah\", task.getDescription());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(testDate, task.getTaskTime());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void testDeadlineConstructor() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Deadline task \u003d new Deadline(\"1\", \"blah\", \"9/02/2020\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(TaskType.DEADLINE, task.getTaskType());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(\"blah\", task.getDescription());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(testDate, task.getTaskTime());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void testToDoConstructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ToDo task \u003d new ToDo(\"0\", \"blah\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(TaskType.TODO, task.getTaskType());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(\"blah\", task.getDescription());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 34
    }
  },
  {
    "path": "src/test/java/duke/utilities/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void testTaskParsing() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Task task \u003d new Event(\"1\", \"blah\", \"9/02/2020\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(\"E|1|blah|2020-02-09\", parser.parseTask(task));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 15
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "  ____"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " (.__.)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c|\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " /\\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "_  _"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ dude, what do you want? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ give me a command!"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ fine, I will take note of: [T][✘] borrow book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ you made me remember 1 task(s)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ fine, I will take note of: [D][✘] return book (by: Sunday)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ you made me remember 2 task(s)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ fine, I will take note of: [D][✘] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ you made me remember 3 task(s)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ you asked to:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\t1. [T][✘] borrow book"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\t2. [D][✘] return book (by: Sunday)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\t3. [D][✘] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ dude, nicely! you\u0027re done with:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\t[D][✔] return book (by: Sunday)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ you asked to:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\t1. [T][✘] borrow book"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\t2. [D][✔] return book (by: Sunday)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\t3. [D][✘] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ dude, elaborate more!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ dude, give me a proper command!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ dude, stop wasting my time! shoo!"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 26
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "todo"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "blah"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 9
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "fi"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "airshhlay": 35
    }
  }
]
