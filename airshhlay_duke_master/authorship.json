[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    toolVersion \u003d \"8.23\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "version \u00271.0-SNAPSHOT\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "sourceCompatibility \u003d 1.8"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    testCompile group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "test {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 31,
      "-": 19
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "# Welcome to Squirtle Manager!"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "Squirtle Manager is a lightweight command line interface application built with Java and JavaFX, with a focus on object-oriented programming (OOP). Squirtle Manager makes use of local storage to remember your agenda, and is an _easy_, _quick_ and _fun_ way to stay on top of your tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "![ui-image](Ui.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "## What Squirtle Can Do:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "**1. Task tracking**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "Squirtle Manager can track 3 types of tasks:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "1. Events: These come with a _description_ and _date_"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "2. Deadlines: These come with a _description_ and _date_"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "3. Todos: These are tasks with a _description_ only"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "**2. Task deletion**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "**3. Task updating**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "* Modify task descriptions and dates easily"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "**4. Mark finished tasks as done**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "**5. Task listing**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "* Get a list of all your ongoing tasks, and their done status"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "**6. Find tasks using given keyword**  "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "## Setting up"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "* Download the jar file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "* Run it using the command line command java -jar \u003cname of jar file\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "* Alternatively, double-click on the jar application to launch  "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "## Command List"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "Words in brackets refer to placeholders. Replace them with the appropriate command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "Example|"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "-------|"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "eg. to create a new deadline, called \"download Squirtle Manager\", due by 19 February 2020|"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "deadline download Squirtle Manager /by 19/2/2020|"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "Function | Command | Notes"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "---------|---------|-------"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "**Create new task**|todo (description)\u003cbr\u003e\u003cbr\u003edeadline /by (description) (deadline)\u003cbr\u003e\u003cbr\u003eevent /at (description) (date)|Leave a space between each item. Refer to above example.\u003cbr\u003e\u003cbr\u003e**date format: d/M/YYYY** or **today** or **tomorrow**\u003cbr\u003e\u003cbr\u003eNote the difference in construction between creating an event and deadline. (typing \u0027/at\u0027 _vs_ \u0027/by\u0027)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "**List Tasks**|list|Gives a numbered list of all your current tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "**Delete Tasks**|delete (item number)|Item number corresponds to the sequence of the task in the list.\u003cbr\u003eYou can delete multiple tasks by adding a space between task numbers.\u003cbr\u003e_eg. delete 1 2 3_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "**Update Task** Stage 1|update (item number)|Upon entering this command, Squirtle Manager will ask you to indicate which items to update, and what to update to.\u003cbr\u003eSee: Update Task Stage 2"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "**Update Task** Stage 2|(des/date) (update)|_Eg. to change the date of task to 9 February 2020: \u003cbr\u003edate 9/2/2020_"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "**Find Task**|find (keyword)|Squirtle Manager currently only accepts one keyword. Plans are being made to accept more keywords at one go to improve application versatility."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "**Mark Task as Done**|done (item number)|Item number corresponds to the sequence of the task on the list.  "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "## Sample Use"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "Creating different tasks:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "![create-task-image](taskcreation.png)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "Deleting a task:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "![delete-task-image](delete.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "Deleting multiple tasks at once:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "![multidelete-image](multidelete.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "Updating a selected task:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "![updating-image](update.png)  "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "Finding a task:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "![find-task-image](find.png)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "# Credits"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "Squirtle Manager is based on the popular [Duke][a2] software engineering tutorial, while this repository is forked from [this repo][a1], which contains modified code for instruction in module CS2103T taught by National University of Singapore.  "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "[a1]:https://github.com/nus-cs2103-AY1920S2/duke"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "[a2]:https://github.com/se-edu/duke"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "* If you have feedback or bug reports, please post in [airshhlay/duke issue tracker](https://github.com/airshhlay/duke/issues)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "* I welcome pull requests too."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "airshhlay": 69,
      "-": 11
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.layout.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Dialog boxes are composed of 2 different controls in the mockup of the Ui for Duke - ImageView and Label, and are reused multiple times."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * This is a custom control."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Circle circle \u003d new Circle(40, Color.WHITE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        text.setFont(new Font(\"Rockwell\", 12));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        text.setPadding(new Insets(15, 12, 0, 12));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        displayPicture.setFitWidth(70.0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        displayPicture.setFitHeight(70.0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        StackPane imageContainer \u003d new StackPane();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        imageContainer.getChildren().addAll(circle, displayPicture);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.getChildren().addAll(text, imageContainer);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        DialogBox db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        db.setBackground(new Background(new BackgroundFill(Color.LIGHTYELLOW, CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        DialogBox db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        db.setBackground(new Background(new BackgroundFill(Color.LIGHTBLUE, CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 65
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.exceptions.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.control.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * The Main class used to run the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Creates the Ui, Storage and TaskList objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Catches DukeExceptions and prints the error messages."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Specifies the path to tasks.txt."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Terminates when execute method of Command returns false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/Pikachu.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/Squirtle.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            ui \u003d new Ui();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            storage \u003d new Storage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            Alert alert \u003d new Alert(Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            alert.setTitle(\"Welcome to Manager SQUIRTLE\u0027s platform!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            alert.setHeaderText(\"SQUIRTLE is here to help!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            alert.setContentText(\"type \u0027help\u0027 to see what SQUIRTLE can do!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            alert.showAndWait();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            Alert alert \u003d new Alert(Alert.AlertType.WARNING);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            alert.setTitle(\"Warning!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            alert.setHeaderText(\"Error in loading file!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            alert.setContentText(\"SQUIRTLE cannot load your data from file!! Sorry!!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            alert.showAndWait();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        sendButton \u003d new Button(\"Go!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        sendButton.setStyle(\"-fx-background-color: skyblue; -fx-text-fill: white;\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        scene.setFill(Color.SKYBLUE); // add colour to the top bar"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        stage.setTitle(\"SQUIRTLE Manager\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Label welcomeMsg \u003d getDialogLabel(ui.start()); // print the welcome message"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(welcomeMsg, new ImageView(duke)));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        });"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        });"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Label userText \u003d getDialogLabel(userInput.getText());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Label dukeText \u003d getDialogLabel(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        );"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private String getResponse(String input) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            Command cmd \u003d Parser.parseInput(input);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return cmd.execute(storage, taskList, ui);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return ui.errorMsg(e);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 174
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * A helper Main class to run the actual Duke application"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Duke.main(args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 11
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.exceptions.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * The UI class for Duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Currently customised to Squirtle."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Returns custom messages for each action taken by the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " **/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String start() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return this.promptMsg();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Prompts the user for next command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return prompt string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String promptMsg() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return \"What will SQUIRTLE do?\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Exit message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return exit string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String exitMsg() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return \"SQUIRTLE shall return to pokeball!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Finds tasks that contain the keyword given by the user. If no task found, prints a separate message."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param lst     ArrayList of all tasks filtered by the TaskList that contain the keyword."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param keyword String passed by the user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return tasks found string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String findMsg(ArrayList\u003cTask\u003e lst, String keyword) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (lst.size() \u003d\u003d 0) { // no task containing the keyword found"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return \"Uh oh! SQUIRTLE could not find anything with \" + keyword + \"!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return \"SQUIRTLE discovered \" + lst.size() + \" thing(s) containing \" + keyword + \": \\n\" + this.printList(lst);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Lists all the tasks currently in the TaskList. If no tasks in the TaskList, prints a separate message."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param lst ArrayList of all tasks currently in the TaskList."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return list of tasks"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String listMsg(ArrayList\u003cTask\u003e lst) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (lst.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return \"SQUIRTLE has nothing to do ~~\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return \"SQUIRTLE has to attack: \\n\" + this.printList(lst);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * A helper method for listMsg() that prints each given task in a separate line."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param lst ArrayList of all tasks currently in the TaskList."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return list of tasks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String printList(ArrayList\u003cTask\u003e lst) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        String[] taskStrings \u003d new String[lst.size()];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        for (int i \u003d 0; i \u003c lst.size(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            taskStrings[i] \u003d \"\\t\" + (i + 1) + \". \" + lst.get(i);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return String.join(\"\\n\", taskStrings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Returns a string to guide the user in updating tasks. Updating has 2 stages:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * 1. When the user is selecting which task they wish to update, and"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * 2. The user selects what part of the task to update, and provides the desired change."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param updateStage current update stage"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param task        task the user wishes to update, or the newly updated task"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return a message depending on the current updating stage"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String updateMsg(int updateStage, Task task) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        switch (updateStage) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return \"SQUIRTLE is changing: \" + task.toString() + \"\\nWhat shall Squirtle change?\\n(\u0027des\u0027 for description, \u0027date\u0027 for date)\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return \"SQUIRTLE! Changed to: \" + task.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Returns a message when the user is adding a task to the TaskList."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param task    the task the user just created"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param lstSize number of tasks so far"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return task message"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String taskMsg(Task task, int lstSize) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return \"SQUIRTLE is adding: \\n\\t\" + task.toString() + \"!\" + \"\\nSQUIRTLE now has \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                + lstSize + \" thing(s) to do!\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Returns a message when the user is deleting a task"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param deletedTasks an arraylist of tasks that were deleted."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return delete message"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String deleteMsg(ArrayList\u003cTask\u003e deletedTasks) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return \"SQUIRTLE ate: \\n\" + printList(deletedTasks);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Returns a message when the user indicates that they are done with a task."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param task the task to mark as done"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return done message"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String doneMsg(Task task) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return \"SQUIRTLE used water gun on: \\n\\t\" + task.toString() + \"!\\n\\nIt is super effective!\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Returns a list of all available commands for duke. This method is called when the user types in \u0027help\u0027."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return a list of all available commands for the user."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String helpMsg() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return \"Here is what SQUIRTLE can do!\" +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                this.blankLine() +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \"create new task:\" +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \"\\n\\ttodo \u003cdescription\u003e\" +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \"\\n\\tevent \u003cdescription\u003e /at \u003cdate\u003e\" +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \"\\n\\tdeadline \u003cdescription\u003e /by \u003cdate\u003e\" +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                this.blankLine() +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \"update task:\\n\\tupdate \u003ctask number\u003e\" +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                this.blankLine() +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \"find task:\\n\\tfind \u003ckeyword\u003e\" +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                this.blankLine() +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \"delete task:\\n\\tdelete \u003ctask numbers\u003e\" +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                this.blankLine() +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \"mark task as done:\\n\\tdone \u003ctask number\u003e\" +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                this.blankLine() +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \"list all tasks:\\n\\tlist\" +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                this.blankLine() +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \"type help to ask SQUIRTLE what SQUIRTLE can do again!\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Called in the main Duke class, when any DukeException is thrown. Returns customised messages based on the type of DukeError the DukeException contains."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param e the DukeException being passed"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return customised error message"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String errorMsg(DukeException e) { // error responses"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        switch (e.error) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case NUMBER: // error in accessing list, no such task exists"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return \"SQUIRTLE cannot find task!\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case INSUFFICIENT:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return \"SQUIRTLE needs more info!\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case COMMAND:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return \"SQUIRTLE doesn\u0027t understand!\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case DATEFORMAT:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return \"SQUIRTLE doesn\u0027t understand this date!\\n\\tFormat: d/M/YYYY or YYYY-MM-dd\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case KEYWORDS:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return \"SQUIRTLE is confused! Give SQUIRTLE one keyword!\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case FILEPARSE:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return \"SQUIRTLE cannot read your file!\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case TASKPARSE:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return \"SQUIRTLE cannot write on your file!\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case UPDATE:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return \"SQUIRTLE cannot understand your update! Check your update item!\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            assert false : \"No exception that is not a duke exception should be caught in the main Duke class\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return \"An error not included in DukeExceptions was thrown\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private String blankLine() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return \"\\n\\n\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 195
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.tasks.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    Task task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Adds task to TaskList object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Updates tasks.txt file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Prints Ui message for adding tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return String add message"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String execute(Storage storage, TaskList taskList, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        storage.update(taskList.getTaskList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return ui.taskMsg(task, taskList.getListSize());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 31
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * An abstract class that represents a Command, created by the Parser class when parsing user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public abstract String execute(Storage storage, TaskList tasks, Ui ui) throws DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 12
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.tasks.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    int[] taskNumbers;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Constructor for delete command. Supports multi-delete using varArgs"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param taskNumbers integer array of varied length, depending on number of items the user wants to delete."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public DeleteCommand(int... taskNumbers) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.taskNumbers \u003d taskNumbers;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Deletes task from TaskList object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Updates the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Prints Ui\u0027s delete message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return String delete message"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String execute(Storage storage, TaskList taskList, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTasks \u003d taskList.deleteTasks(taskNumbers);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        storage.update(taskList.getTaskList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return ui.deleteMsg(deletedTasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 39
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.tasks.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    int taskNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Marks the task at index taskNumber as done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Updates the storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Prints Ui\u0027s done task message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return String done message"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String execute(Storage storage, TaskList taskList, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Task task \u003d taskList.doneTask(this.taskNumber);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        storage.update(taskList.getTaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return ui.doneMsg(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 32
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Constructor for FindCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param keyword a keyword supplied the user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Searches for tasks from taskList with descriptions containing the FindCommand object\u0027s keyword"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Passes these tasks to Ui for printing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return String find command message"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String execute(Storage storage, TaskList taskList, Ui ui) { // TODO change implementation to streams"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ArrayList\u003cTask\u003e lst \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ArrayList\u003cTask\u003e found \u003d lst.stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                .filter(task -\u003e task.getDescription().contains(this.keyword))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return ui.findMsg(found, this.keyword);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 40
    }
  },
  {
    "path": "src/main/java/duke/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Constructor for the Help Command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Execute the help command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param storage the Storage object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param tasks   the TaskList object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param ui      the Ui object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return the help message detailing the commands Duke can execute"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String execute(Storage storage, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return ui.helpMsg();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 27
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Gets the ArrayList representation of the tasks from TaskList object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Prints the tasks using Ui."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return String list of tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String execute(Storage storage, TaskList taskList, Ui ui) { // print out the task list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return ui.listMsg(taskList.getTaskList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 25
    }
  },
  {
    "path": "src/main/java/duke/commands/UpdateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.tasks.TaskType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    int updateStage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    String updateItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    int taskNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    String update;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    Task task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * The constructor for the UpdateCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Initial updateStage upon creation is 1."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param taskNumber the index of the task the user wants to update"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public UpdateCommand(int taskNumber) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.updateStage \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * A method called in the Parser class, user to move the Update object to the next update stage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param updateItem what to update"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param update     what to update to"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return this Command object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public UpdateCommand nextUpdateStage(String updateItem, String update) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assert updateStage \u003d\u003d 1; // to get to the next update stage, current stage must be 1 first"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.updateStage++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.updateItem \u003d updateItem;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.update \u003d update;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Executes update command. Update commands have 2 stages:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * 1. User indicates which task to update"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * 2. User indicates what to update, and the content to update it to."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param storage the Storage object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param tasks   the TaskList object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param ui      the Ui object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return Ui message for update"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String execute(Storage storage, TaskList tasks, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        switch (this.updateStage) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case 1: // updating at stage 1 - user indicates which task to update"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            this.task \u003d tasks.getTask(this.taskNumber); // get the task needed to update"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case 2: // updating at stage 2 - user gives the details of update"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            assert this.task !\u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            if (updateItem.equals(\"des\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                task.changeDescription(this.update);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            } else if (updateItem.equals(\"date\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                task.changeDate(this.update);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            tasks.updateTask(taskNumber, task); // update the task in taskList"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            storage.update(tasks.getTaskList()); // update the storage after updating the taskList"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return ui.updateMsg(updateStage, task);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 75
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * An enums class to represent possible causes of exceptions in the Duke application"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public enum DukeError {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    NUMBER, // error in accessing list, no such task exists"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    INSUFFICIENT, // error in creation of tasks, insufficient commands"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    COMMAND, // error in command - no task of given type exists"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    DATEFORMAT, // error in date given by the user - unable to parse"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    KEYWORDS, // error when user providing keywords - too many keywords"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    FILEPARSE, // error when parser is trying to read task from file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    TASKPARSE, // error when parser is trying to read task into a string"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    UPDATE; // error when user is trying to update - eg. gives updating date"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * A custom exception class representing exceptions unique to Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public DukeError error;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public DukeException(DukeError error) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.error \u003d error;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "airshhlay": 13
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.TimeParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class Deadline extends Task implements TimeParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Another constructor for creating Deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * This constructor is called in the Parser class when parsing file to string."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Sets isDone to true or false according to status number (0 or 1)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param status      0 - isDone is false, 1 - isDone is true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param description description of date"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param date        String representation of the date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws DateTimeParseException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Deadline(String status, String description, String date) throws DateTimeParseException { // constructor when parsing tasks from hard disk"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(TaskType.DEADLINE, status, description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.date \u003d TimeParser.parseDate(date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assert this.date !\u003d null : \"date is null after parsing in constructor\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public LocalDate getTaskTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Method to change the date assigned to this event. Called in Parser class when user is updating the date."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param update the date, represented in String, to be changed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return boolean true by default"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean changeDate(String update) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        date \u003d TimeParser.parseDate(update);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + TimeParser.printDate(this.date) + \")\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 46
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.utilities.TimeParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class Event extends Task implements TimeParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Another constructor for creating Event"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * This constructor is called in the Parser class when parsing file to string, or when parsing command to task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Sets isDone to true or false according to status number (0 or 1)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param status      0 - isDone is false, 1 - isDone is true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param description description of event"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param date        String representation of the event time"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws DateTimeParseException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Event(String status, String description, String date) throws DateTimeParseException { // constructor for parsing tasks from hard disk"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(TaskType.EVENT, status, description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.date \u003d TimeParser.parseDate(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assert this.date !\u003d null : \"event time is null after parsing in constructor\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public LocalDate getTaskTime() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Method to change the date assigned to this event. Called in Parser class when user is updating the date."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param update the date, represented in String, to be changed"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return boolean true by default"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean changeDate(String update) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        date \u003d TimeParser.parseDate(update);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + TimeParser.printDate(this.date) + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 47
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    protected TaskType TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * A default constructor with no parameters, for stub."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Task(TaskType TYPE, String status, String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.TYPE \u003d TYPE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.isDone \u003d status.equals(\"1\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return (isDone ? \"[✔]\" : \"[✘]\"); //return tick or X symbols"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public int getDoneInt() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return (isDone ? 1 : 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return this.TYPE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean changeDescription(String update) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.description \u003d update;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public abstract boolean changeDate(String update);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return getStatusIcon() + \" \" + this.description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 52
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * An enum class to represent the available types of tasks that can be created."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    TODO(\"T\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    EVENT(\"E\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    DEADLINE(\"D\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private String shortForm;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    TaskType(String shortForm) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.shortForm \u003d shortForm;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return this.shortForm;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 21
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public ToDo(String status, String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(TaskType.TODO, status, description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean changeDate(String update) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assert false; // this method should never be called for a todo class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 17
    }
  },
  {
    "path": "src/main/java/duke/utilities/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.tasks.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.exceptions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * A general parser to parse user input as well as tasks to and from tasks.txt."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * A boolean to indicate if the Parser is currently at the updating stage (as update contains two stages). Cannot move on to other commands if the update is not complete, just in case the user passes another command without completing the update stage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    static boolean isUpdating \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * The current update command, if the user is updating a task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    static UpdateCommand updateCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Parses task into a string to load into tasks.txt."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param task the task to parse"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return string representation of the task in the form (TYPE)|(0 or 1)|(description)|task time (if any)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static String parseTask(Task task) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        String parsed;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TaskType taskType \u003d task.getTaskType();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            parsed \u003d taskType.toString() + \"|\" + task.getDoneInt() + \"|\" + task.getDescription();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            parsed \u003d taskType.toString() + \"|\" + task.getDoneInt() + \"|\" + task.getDescription() + \"|\" + ((Event) task).getTaskTime();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            parsed \u003d taskType.toString() + \"|\" + task.getDoneInt() + \"|\" + task.getDescription() + \"|\" + ((Deadline) task).getTaskTime();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new DukeException(DukeError.TASKPARSE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assert parsed !\u003d null : \"parser unable to parse task, returns null\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return parsed;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Parses line from tasks.txt into a Task object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Line is in the form of (TYPE)|(0 or 1)|(description)|(task time, if any)."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param line String representation of task"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return a Task object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static Task parseFile(String line) throws DukeException { // parses line from tasks.txt into a task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        String[] split \u003d line.split(Pattern.quote(\"|\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        switch (split[0]) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            task \u003d new ToDo(split[1], split[2]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            task \u003d new Event(split[1], split[2], split[3]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            task \u003d new Deadline(split[1], split[2], split[3]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new DukeException(DukeError.FILEPARSE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assert task !\u003d null : \"error in parsing file to task object\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Parses user input into a Command object. The user input is received from the main Duke class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param input user input eg. \"date blah /by 9/2/2020\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return a Command representing the action to be taken as directed by user"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws DukeException if insufficient commands given, wrong command given or wrong date format given"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static Command parseInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            input \u003d input.trim(); // trim any opening and trailing whitespace"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            if (input.equals(\"list\")) { // list command"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            } else if (input.equals(\"help\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            } else if (input.startsWith(\"done\")) { // done command"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(input.split(\" \", 2)[1]) - 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                return new DoneCommand(taskNumber);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            } else if (input.startsWith(\"delete\")) { // delete command"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                String[] split \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                String[] numberStrings \u003d split[1].split(\" \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                int[] taskNumbers \u003d Stream.of(numberStrings).mapToInt(x -\u003e Integer.parseInt(x) - 1).toArray(); // split into int[] of indices"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                return new DeleteCommand(taskNumbers);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            } else if (input.startsWith(\"find\")) { // find command"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                String[] split \u003d input.split(\" \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                if (split.length \u003e 2) { // if more than one keyword supplied by user, throw DukeException"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    throw new DukeException(DukeError.KEYWORDS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                return new FindCommand(split[1]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            } else if (input.startsWith(\"update\")) { // first update stage"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                assert isUpdating \u003d\u003d false : \"isUpdating boolean should be false!\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(input.split(\" \", 2)[1]) - 1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                isUpdating \u003d true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                updateCommand \u003d new UpdateCommand(taskNumber);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                return updateCommand;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            } else if (isUpdating) { // second update stage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                assert updateCommand !\u003d null; // the updateCommand cannot be null if parser is set to update"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                String[] split \u003d input.split(\" \", 2); // user input here will be \"\u003citem to update\u003e \u003cupdate\u003e\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                if (!split[0].equals(\"des\") \u0026\u0026 !split[0].equals(\"date\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    throw new DukeException(DukeError.UPDATE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                isUpdating \u003d false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                Command nextStage \u003d updateCommand.nextUpdateStage(split[0], split[1]);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                updateCommand \u003d null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                return nextStage;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            } else { // parse task command"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                String[] split \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                TaskType taskType \u003d TaskType.valueOf(split[0].toUpperCase());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                String taskDetails \u003d split[1];"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                Task task;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                case TODO:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    task \u003d new ToDo(\"0\", taskDetails);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                case EVENT:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    String[] eventDetails \u003d taskDetails.split(\"/at\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    String eventDescription \u003d eventDetails[0].trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    String eventTime \u003d eventDetails[1].trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    task \u003d new Event(\"0\", eventDescription, eventTime);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                case DEADLINE:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    String[] deadlineDetails \u003d taskDetails.split(\"/by\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    String deadlineDescription \u003d deadlineDetails[0].trim();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    String deadline \u003d deadlineDetails[1].trim();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    task \u003d new Deadline(\"0\", deadlineDescription, deadline);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    throw new DukeException(DukeError.COMMAND);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                assert task !\u003d null : \"task at the end of parseInput method cannot be null!\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                return new AddCommand(task);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (IndexOutOfBoundsException e) { // catch insufficient commands given"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new DukeException(DukeError.INSUFFICIENT);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (IllegalArgumentException e) { // catch wrong command given"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new DukeException(DukeError.COMMAND);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (DateTimeParseException e) { // catch wrong date format given"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new DukeException(DukeError.DATEFORMAT);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 164
    }
  },
  {
    "path": "src/main/java/duke/utilities/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Storage class to load and add tasks to tasks.txt."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private String path \u003d \"tasks.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Constructor for Storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Loads all tasks from the hard disk into an ArrayList of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return ArrayList of all tasks previously stored in the hard disk."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException { // load all tasks from hard disk into an ArrayList of tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ArrayList\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            File file \u003d this.getFile();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            FileReader fr \u003d new FileReader(file);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                line \u003d line.replaceAll(\"[^\\\\x00-\\\\x7F]\", \"\"); // remove any unwanted ascii characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                lst.add(Parser.parseFile(line));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return lst;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Updates the file in the hard disk whenever the task list changes."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Called in execute method of Command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param lst the updated ArrayList of tasks, to be parsed into the hard disk."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void update(ArrayList\u003cTask\u003e lst) throws DukeException { // update the file in the hard disk whenever the task list changes"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            File file \u003d this.getFile();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            FileOutputStream outputStream \u003d new FileOutputStream(file);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            OutputStreamWriter outputStreamWriter \u003d new OutputStreamWriter(outputStream, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(outputStreamWriter);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            for (Task task : lst) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                bw.write(Parser.parseTask(task));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private File getFile() throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        File file \u003d new File(path);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return file;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 81
    }
  },
  {
    "path": "src/main/java/duke/utilities/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.exceptions.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * A class to add, delete and mark tasks as done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * TaskList object is passed to the execute method of Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Constructor for the taskList object, called in the main Duke class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param taskList an ArrayList of tasks loaded from Storage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) { // initialise the task list with files loaded from storage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * A method to retrieve the task at the given index."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param taskNumber the index the task to retrieve is at"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return Task object from the taskList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Task getTask(int taskNumber) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return taskList.get(taskNumber);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Deletes task from taskList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param taskNumbers an int[] of indices to delete."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return ArrayList of the tasks deleted"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws DukeException error if the task does not exist at the index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public ArrayList\u003cTask\u003e deleteTasks(int... taskNumbers) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            Arrays.sort(taskNumbers);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            for (int i \u003d taskNumbers.length - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                Task task \u003d taskList.remove(taskNumbers[i]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                deletedTasks.add(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (IndexOutOfBoundsException e) { // throw DukeException"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new DukeException(DukeError.NUMBER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Collections.reverse(deletedTasks);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return deletedTasks;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Marks task as done in the taskList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param index the index where the task to be marked done is at in the ArrayList"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return the task marked as done"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws DukeException if the task does not exist at the index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Task doneTask(int index) throws DukeException { // marks the task at the index provided as done, and returns the done task"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            task \u003d taskList.get(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (IndexOutOfBoundsException e) { // throw DukeException"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new DukeException(DukeError.NUMBER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Updates task description or date"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Task updateTask(int index, Task task) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        taskList.set(index, task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Adds given task to the ArrayList."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param task task to be added"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return a boolean True if successfully added"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean addTask(Task task) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return taskList.add(task);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 101
    }
  },
  {
    "path": "src/main/java/duke/utilities/TimeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * An interface to parse date and time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Implemented by Deadline and Event classes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public interface TimeParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Parses given string representation of date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Allows for 2 formats, one for parsing user input in the format \"d/M/yyyy\" or \"today\"."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * The second format is for parsing dates in the default LocalDate pattern from file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param date String representation of date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return LocalDate object representing the given date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws DateTimeParseException if no valid date format is given"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    static LocalDate parseDate(String date) throws DateTimeParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (date.equals(\"today\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return LocalDate.now();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } else if (date.equals(\"tomorrow\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return LocalDate.now().plus(1, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                return LocalDate.parse(date, DateTimeFormatter.ofPattern(\"d/M/yyyy\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                return LocalDate.parse(date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Prints the date in the format \"d MMM yyyy\"."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Called in the Deadline and Event classes when displaying to the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param date the LocalDate object to be printed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return String representation \"d MMM yyyy\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    static String printDate(LocalDate date) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 46
    }
  },
  {
    "path": "src/test/java/duke/tasks/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    LocalDate testDate \u003d LocalDate.parse(\"2020-02-09\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void testEventConstructor() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Event task \u003d new Event(\"1\", \"blah\", \"9/02/2020\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(TaskType.EVENT, task.getTaskType());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(\"blah\", task.getDescription());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(testDate, task.getTaskTime());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void testDeadlineConstructor() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Deadline task \u003d new Deadline(\"1\", \"blah\", \"9/02/2020\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(TaskType.DEADLINE, task.getTaskType());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(\"blah\", task.getDescription());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(testDate, task.getTaskTime());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void testToDoConstructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ToDo task \u003d new ToDo(\"0\", \"blah\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(TaskType.TODO, task.getTaskType());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(\"blah\", task.getDescription());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 34
    }
  },
  {
    "path": "src/test/java/duke/utilities/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package duke.utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void testTaskParsing() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Task task \u003d new Event(\"1\", \"blah\", \"9/02/2020\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(\"E|1|blah|2020-02-09\", parser.parseTask(task));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 15
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "  ____"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " (.__.)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c|\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " /\\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "_  _"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ dude, what do you want? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ give me a command!"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ fine, I will take note of: [T][✘] borrow book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ you made me remember 1 task(s)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ fine, I will take note of: [D][✘] return book (by: Sunday)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ you made me remember 2 task(s)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ fine, I will take note of: [D][✘] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ you made me remember 3 task(s)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ you asked to:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\t1. [T][✘] borrow book"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\t2. [D][✘] return book (by: Sunday)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\t3. [D][✘] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ dude, nicely! you\u0027re done with:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\t[D][✔] return book (by: Sunday)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ you asked to:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\t1. [T][✘] borrow book"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\t2. [D][✔] return book (by: Sunday)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\t3. [D][✘] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ dude, elaborate more!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ dude, give me a proper command!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "☛ dude, stop wasting my time! shoo!"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 26
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "todo"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "blah"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 9
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "fi"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "airshhlay": 35
    }
  }
]
