[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "test {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "firzanarmani": 34
    }
  },
  {
    "path": "src/main/java/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "E | true | birthday | 2020-02-01"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "T | true | shopping"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "D | false | assignment 1 | 2020-01-29"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 3
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private boolean isLoadedFromStorage \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Duke constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            this.isLoadedFromStorage \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Duke constructor."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Attempts to load tasks from duke.txt specified in filePath into a TaskList instance."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Creates an empty TaskList instance if the file cannot be found."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param filePath Path to the duke.txt containing the saved tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            this.isLoadedFromStorage \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Method to run the Duke program sequence."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (this.isLoadedFromStorage) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            ui.dukePrompt(\"Boss, I\u0027ve got my notebook ready with \" + tasks.getSize() + \" tasks in it\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        boolean isActive \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        while (isActive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                String fullCommand \u003d ui.readUserInput();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                if (c.isExit()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                    isActive \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Main method. Entry point for the Duke program."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param args Command-line arguments. Unused."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static void main(final String[] args) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            output \u003d c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            // TODO: If exit command, close application?"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            // if (c.isExit()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                //     isActive \u003d false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            // }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            output \u003d e.getMessage();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 99
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 9
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.windows.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 32
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.enums.ErrorCodes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.enums.TaskTypes;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private TaskTypes taskType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private String inputArgs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public AddCommand(TaskTypes taskType, String inputArgs) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.inputArgs \u003d inputArgs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        Task newTask \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        String taskPrompt \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            newTask \u003d new Deadline(inputArgs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            taskPrompt \u003d \"Oooh, important deadline eh, boss? Don\u0027t worry, I got it\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            newTask \u003d new ToDo(inputArgs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            taskPrompt \u003d \"Got it, boss. I\u0027ll write this one down\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            newTask \u003d new Event(inputArgs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            taskPrompt \u003d \"A special event I see. Don\u0027t worry boss, I\u0027ll remind you\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            throw new DukeException(ErrorCodes.UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        tasks.addTask(newTask);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        ui.dukePrompt(new String[]{taskPrompt,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            \"\\n\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            newTask.toString(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            \"\\n\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            tasks.printTasksTotal()});"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return taskPrompt"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + newTask.toString()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + tasks.printTasksTotal();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 62
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    protected String taskString;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Command(String taskString) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.taskString \u003d taskString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Executes the current command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param tasks TaskList instance of Duke program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param ui UI instance of Duke program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param storage Storage instance of Duke program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @throws DukeException DukeException thrown when command cannot be executed successfully."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Check if the command is an exit command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return A boolean if the command is an exit command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 34
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.enums.ErrorCodes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    int index \u003d -1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d tasks.getSize()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            throw new DukeException(ErrorCodes.INVALID_TASK_INDEX);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            Task deletedTask \u003d tasks.deleteTask(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            ui.dukePrompt(new String[]{\"Aaaaand deleted! Don\u0027t kill me if it\u0027s the wrong one, boss\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                \"\\n\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                deletedTask.toString(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                \"\\n\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                tasks.printTasksTotal()});"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            return \"Aaaaand deleted! Don\u0027t kill me if it\u0027s the wrong one, boss\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                + deletedTask.toString()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                + tasks.printTasksTotal();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 41
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.enums.ErrorCodes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private int index \u003d -1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d tasks.getSize()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            throw new DukeException(ErrorCodes.INVALID_TASK_INDEX);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            Task currentTask \u003d tasks.setDone(this.index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            ui.dukePrompt(new String[]{\"Got it boss! Just to confirm, this is the one I marked as done\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                \"\\n\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                currentTask.toString(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                \"\\n\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                tasks.printTasksTotal()});"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            return \"Got it boss! Just to confirm, this is the one I marked as done\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                + currentTask.toString()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                + tasks.printTasksTotal();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 42
    }
  },
  {
    "path": "src/main/java/duke/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        ui.dukePrompt(\"Good bye, boss! Call me if you need me. I\u0027ll be waiting!\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return \"Good bye, boss! Call me if you need me. I\u0027ll be waiting!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 23
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private String keyword \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private ArrayList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        filteredTasks \u003d tasks.filterTasks(keyword);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        String[] temp;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (filteredTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            temp \u003d new String[]{\"I couldn\u0027t find any tasks containing that keyword, boss. Try something else?\"};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            temp \u003d new String[tasks.getTaskList().size() + 1];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            temp[0] \u003d \"I found these tasks that match what you might be looking for, boss!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            for (int i \u003d 0; i \u003c filteredTasks.size(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                temp[i + 1] \u003d (i + 1) + \". \" + filteredTasks.get(i).toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        ui.dukePrompt(temp);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return String.join(\"\\n\", temp);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 41
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        String[] temp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (tasks.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            temp \u003d new String[]{\"Boss, my notepad is empty. You sure you told me anything?\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            temp \u003d new String[tasks.getTaskList().size() + 1];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            temp[0] \u003d \"Here\u0027s what I\u0027ve written down, boss.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                temp[i + 1] \u003d (i + 1) + \". \" + tasks.getTaskAt(i).toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        ui.dukePrompt(temp);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return String.join(\"\\n\", temp);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 33
    }
  },
  {
    "path": "src/main/java/duke/components/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.windows.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 62
    }
  },
  {
    "path": "src/main/java/duke/enums/ErrorCodes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke.enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public enum ErrorCodes {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    UNKNOWN_COMMAND,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    MISSING_TASK_NAME,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    MISSING_EVENT_DATE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    MISSING_DEADLINE_DATE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    INVALID_TASK_INDEX,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    INVALID_DATE_FORMAT,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    FILE_NOT_FOUND,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    LOADING_ERROR,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    SAVING_ERROR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 13
    }
  },
  {
    "path": "src/main/java/duke/enums/TaskTypes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke.enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public enum TaskTypes {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    EVENT"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 7
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.enums.ErrorCodes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private ErrorCodes errorCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private String errorInfo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * DukeException constructor."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param errorCode An ErrorCode enum representing the error type."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public DukeException(ErrorCodes errorCode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.errorCode \u003d errorCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * DukeException constructor with additional error information."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param errorCode An ErrorCode enum representing the error type."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param errorInfo A string containing any additional information."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public DukeException(ErrorCodes errorCode, String errorInfo) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.errorCode \u003d errorCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.errorInfo \u003d errorInfo;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        switch (errorCode) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        case UNKNOWN_COMMAND:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            message \u003d \"Sorry boss, I don\u0027t know that command. Try again, boss?\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        case MISSING_TASK_NAME:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            message \u003d \"Boss, I hate to say this but you forgot to tell me what the task is...\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        case MISSING_EVENT_DATE:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            message \u003d \"Err boss, you forgot to tell me when the event is going to happen\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        case MISSING_DEADLINE_DATE:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            message \u003d \"Boss, I can\u0027t tell when it\u0027s due. Could you be a little clearer?\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        case INVALID_TASK_INDEX:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            message \u003d \"Boss, you do know there\u0027s not that many tasks right?\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        case INVALID_DATE_FORMAT:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            message \u003d \"I don\u0027t understand the date, boss. Type the date like this YYYY-MM-DD\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        case FILE_NOT_FOUND:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            message \u003d \"Boss, I can\u0027t find my notebook... Sorry but I can\u0027t find duke.txt\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        case LOADING_ERROR:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            message \u003d \"Oops boss, I\u0027ve got trouble reading the duke.txt file, from line \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                + this.errorInfo + \" onwards... I\u0027ll just stop here and load what I have\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        case SAVING_ERROR:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            message \u003d \"Oops boss, I\u0027ve got trouble trying to save from this task (\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                + this.errorInfo + \") onwards... \\nI\u0027ll just stop here and save what I have\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            message \u003d \"Uh-oh boss, I don\u0027t feel so good...\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 70
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.commands.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.enums.ErrorCodes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.enums.TaskTypes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Parses the full command input from the user and returns the appropriate command to be execute by caller."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param fullCommand String of the full command input by the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return A Command object based on the type of command parsed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @throws DukeException DukeException thrown if missing task information or unknown commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        switch (fullCommand) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            command \u003d new ListCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            String[] splitString \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            if (splitString.length !\u003d 2) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                throw new DukeException(ErrorCodes.MISSING_TASK_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            String userCommand \u003d splitString[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            String userArgs \u003d splitString[1];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            int taskNo \u003d -1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            switch (userCommand) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                command \u003d new FindCommand(userArgs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                taskNo \u003d Integer.parseInt(userArgs) - 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                command \u003d new DoneCommand(taskNo);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                taskNo \u003d Integer.parseInt(userArgs) - 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                command \u003d new DeleteCommand(taskNo);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                command \u003d new AddCommand(TaskTypes.DEADLINE, userArgs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                command \u003d new AddCommand(TaskTypes.TODO, userArgs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                command \u003d new AddCommand(TaskTypes.EVENT, userArgs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                throw new DukeException(ErrorCodes.UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            };"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 67
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.enums.ErrorCodes;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Storage constructor."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param filePath String path of the duke.txt file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Load the list of tasks from the file specified."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return An ArrayList containing the loaded tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @throws DukeException DukeException thrown if file is not found or any line not being parsed succesfully."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            Scanner readFile \u003d new Scanner(new File(this.filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            int lineNo \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            while (readFile.hasNextLine()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                loadTask(readFile.nextLine(), lineNo);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                lineNo++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            readFile.close();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            throw new DukeException(ErrorCodes.FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Load the individual lines from the input file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param taskString A string of the current line to be loaded from storage."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param lineNo The current index of the line in the file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @throws DukeException DukeException thrown if any line cannot be loaded."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private void loadTask(String taskString, int lineNo) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        String[] splitString \u003d taskString.split(\" \\\\| \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        switch (splitString[0]) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            taskList.add(new ToDo(splitString[2]));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            String deadlineArgs \u003d splitString[2] + \" /by \" + splitString[3];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            taskList.add(new Deadline(deadlineArgs));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            String eventArgs \u003d splitString[2] + \" /at \" + splitString[3];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            taskList.add(new Event(eventArgs));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            throw new DukeException(ErrorCodes.LOADING_ERROR, String.valueOf(lineNo));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        if (splitString[1].equals(\"true\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            taskList.get(taskList.size() - 1).setTaskDone();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Overwrite the entire target file with the updated list of tasks and saves it."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param taskList The current list of tasks in the program."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @throws DukeException DukeException thrown if any task cannot be written into the buffer before saving the file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void save(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            FileWriter writer \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            for (Task task : taskList.getTaskList()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                    writer.write(task.toFileString() + \"\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                    throw new DukeException(ErrorCodes.SAVING_ERROR, task.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            throw new DukeException(ErrorCodes.FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 102
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.enums.ErrorCodes;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private String deadlineDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private LocalDate parsedDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Deadline constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param deadlineArgs Joined string of the user input command arguements"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @throws DukeException Incorrect format/missing date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Deadline(String deadlineArgs) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        super(deadlineArgs.split(\" /by \")[0]);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            this.deadlineDate \u003d deadlineArgs.split(\" /by \")[1];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            this.parsedDate \u003d LocalDate.parse(deadlineDate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            throw new DukeException(ErrorCodes.INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            throw new DukeException(ErrorCodes.MISSING_DEADLINE_DATE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * A method to return the details of the current Task object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Contains the task done status and the task name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return A String representation of the task details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + this.parsedDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return \"D\" + super.toFileString() + \" | \" + deadlineDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 48
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.enums.ErrorCodes;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private String eventDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private LocalDate parsedDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Event constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param eventArgs Joined string of the user input command arguements"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @throws DukeException Incorrect format/missing date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Event(String eventArgs) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        super(eventArgs.split(\" /at \")[0]);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            this.eventDate \u003d eventArgs.split(\" /at \")[1];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            this.parsedDate \u003d LocalDate.parse(eventDate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            throw new DukeException(ErrorCodes.INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            throw new DukeException(ErrorCodes.MISSING_EVENT_DATE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * A method to return the details of the current Task object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Contains the task done status and the task name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return A String representation of the task details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + this.parsedDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return \"E\" + super.toFileString() + \" | \" + eventDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 48
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private boolean taskDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Task(String taskName) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.taskDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return this.taskName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public boolean getTaskDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return this.taskDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setTaskDone() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.taskDone \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Return a string of the details of the current Task object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Contains the task done status and the task name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return A String representation of the task details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return \"[\" + (getTaskDone()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                ? Character.toString(0x2713)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                : Character.toString(0x2717))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \"] \" + getTaskName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return \" | \" + getTaskDone()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \" | \" + getTaskName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 41
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Task getTaskAt(int index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Task setDone(int index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        taskList.get(index).setTaskDone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public String printTasksTotal() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return \"Now you have \" + this.getSize() + \" tasks in the list\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Task deleteTask(int index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return taskList.remove(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public boolean addTask(Task task) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        // TODO: To handle this add() \u003d\u003d false?"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return taskList.add(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Filter the tasks that contain the keyword as a substring."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param keyword String to find in the task names."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return An ArrayList containing tasks that contain the keyword as a substring."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public ArrayList\u003cTask\u003e filterTasks(String keyword) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTasks \u003d this.taskList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        filteredTasks.removeIf((task) -\u003e !task.getTaskName().toLowerCase().contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 57
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public ToDo(String todoName) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        super(todoName);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * A method to return the details of the current Task object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Contains the task done status and the task name."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return A String representation of the task details."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return \"T\" + super.toFileString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 23
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private final String logo \u003d \" ____        _        \\n\" + \"|  _ \\\\ _   _| | _____ \\n\" + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        + \"| |_| | |_| |   \u003c  __/\\n\" + \"|____/ \\\\__._|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private final String logoDivider \u003d \"++++++++++++++++++++++\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private final Scanner scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Print out the welcome message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        System.out.println(logoDivider + logo + \"\\n\" + logoDivider);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.dukePrompt(new String[]{\"Hey boss! Duke here, at your service.\", \"What do you need me to do?\"});"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Print out a formatted single line prompt with Duke\u0027s label."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param prompt A single string message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void dukePrompt(String prompt) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        System.out.println(\"Duke: \" + prompt);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Print out a formatted multi line prompt with Duke\u0027s label."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param prompts An array of multi line string prompts."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void dukePrompt(String[] prompts) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        for (int i \u003d 0; i \u003c prompts.length; i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                System.out.println(\"Duke: \" + prompts[i]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                System.out.println(\"      \" + prompts[i]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Read the user\u0027s input command with the correct formatting."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return String of the user\u0027s input."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public String readUserInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        System.out.printf(\"\\nYou:  \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        String line \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Prints the error message in the correct formatting with Duke\u0027s label."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param errorMessage The error message string."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void showError(String errorMessage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        dukePrompt(errorMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 68
    }
  },
  {
    "path": "src/main/java/duke/windows/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke.windows;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.components.DialogBox;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 53
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.windows.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 19
    }
  },
  {
    "path": "src/test/java/duke/commands/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private static TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private static Storage storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Initialise the test environment with seed data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @throws DukeException DukeException thrown when adding tasks to TaskList fails."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static void initAll() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        tasks.addTask(new ToDo(\"Todo 1\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        tasks.addTask(new Deadline(\"Deadline 1 /by 2020-02-03\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        tasks.addTask(new Event(\"Event 1 /at 2020-05-01\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Assertion test when index of task to be marked as done, is out of bounds."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void testDoneOutOfBounds() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        Command testDone \u003d new DoneCommand(10);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        Exception e \u003d assertThrows(DukeException.class,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            () -\u003e testDone.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(\"Boss, you do know there\u0027s not that many tasks right?\", e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Assertion test when index of task to be marked as done, is within bounds (i.e. exists in the list)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void testDoneAssertion() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        Command testDone \u003d new DoneCommand(1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertDoesNotThrow(() -\u003e testDone.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertEquals(true, tasks.getTaskAt(1).getTaskDone());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 56
    }
  },
  {
    "path": "src/test/java/duke/storage/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private static Storage storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private static TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Initialise the test environment with seed data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @throws DukeException DukeException thrown when adding tasks to TaskList fails."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static void initAll() throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        // Load duke.txt with correct seed data"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        tasks.addTask(new ToDo(\"Todo 1\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        tasks.addTask(new Deadline(\"Deadline 1 /by 2020-02-03\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        tasks.addTask(new Event(\"Event 1 /at 2020-05-01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Assertion test if loading the tasks from the storage is successfully, without exceptions."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Should not throw any exceptions."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @throws DukeException DukeException thrown when loading the tasks from input file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void testLoadFromFile() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertDoesNotThrow(() -\u003e storage.load());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 43
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "++++++++++++++++++++++"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "|____/ \\__._|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "++++++++++++++++++++++"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Duke: Hey boss! Duke here, at your service."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "      What do you need me to do?"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "You:  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Duke: Oooh, important deadline eh, boss? Don\u0027t worry, I got it"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "      [D][✗] homework (by: Thursday-2359)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "      Now you have 1 tasks in the list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "You:  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Duke: A special event I see. Don\u0027t worry boss, I\u0027ll remind you"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "      [E][✗] birthday (at: 17-Jan)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "      Now you have 2 tasks in the list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "You:  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Duke: Got it, boss. I\u0027ll write this one down"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "      [T][✗] shopping"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "      Now you have 3 tasks in the list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "You:  "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Duke: Here\u0027s what I\u0027ve written down, boss."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "      1. [D][✗] homework (by: Thursday-2359)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "      2. [E][✗] birthday (at: 17-Jan)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "      3. [T][✗] shopping"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "You:  "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "Duke: Good bye, boss! Call me if you need me. I\u0027ll be waiting!"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 35
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "deadline homework /by Thursday-2359"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "event birthday /at 17-Jan"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "todo shopping"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 5
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 34
    }
  }
]
