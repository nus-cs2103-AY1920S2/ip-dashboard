[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    archiveVersion \u003d \"0.6.1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "test {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 39,
      "-": 22
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "T | 0 | Wash clothes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "D | 0 | Submit tP | 2020-12-04"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "E | 0 | CS2103T exam | 2020-08-15 | 4-6pm"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 3
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "1. [Introduction](#1-introduction)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "2. [Features](#2-features)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "3. [Usage](#3-usage)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    1. [`deadline` - Add a deadline](#deadline---add-a-deadline)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    2. [`event` - Add an event](#event---add-an-event)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    3. [`todo` - Add a todo](#todo---add-a-todo)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    4. [`delete` - Delete a task](#delete---delete-a-task)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    5. [`done` - Mark a task as done](#done---mark-a-task-as-done)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    6. [`find` - Find tasks by keyword](#find---find-tasks-by-keyword)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    7. [`list` - Display the task list](#list---display-the-task-list)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    8. [`bye` - End the program](#bye---end-the-program)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "Duke is a light-weight task organiser, helping users to keep track of their deadlines, events, and daily tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "In addition, all tasks that are managed by Duke are saved in a portable format so that users can easily upload or"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "transfer their tasks to any desktop platform!"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "## 2. Features"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "- Adding different types of tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    - Deadlines"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    - Events"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    - Todos"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "- Marking completed tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "- Deleting tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "- Finding tasks by keyword"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "- Automatically saving the task list in a save file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "- Automatically Loading a task list from a save file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "## 3. Usage"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "#### Command Format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "- Each command begins with a keyword, followed by a number of compulsory parameters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "- Items in square brackets are compulsory parameters to be supplied by the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "eg. in `todo Wake up!`, `Wake up!` fills in the `[description]` parameter of the command"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "that creates a todo (see `todo [description]`)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "- Parameters are `CASE_SENSITIVE`, meaning that n"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "- `[date]` parameters must be supplied in the following format: `yyyy-mm-dd`. eg. `2020-12-25` for 25 Decemeber 2020."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "- `[time]` parameters must be supplied in the following format: `h-ham/pm`. eg. `8-12pm`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "The time interval should be provided from earliest to latest. eg. `12-8am` is not supported."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "#### Task Descriptions"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "- All tasks types require a `description`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "- Descriptions are `CASE_SENSITIVE`, meaning"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "that the description that the user supplies will not be formatted."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "- Two tasks cannot have the same description if they belong to the same type of task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "#### Command List"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "### `deadline` - Add a deadline"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "Adds a deadline to the task list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "A deadline is a task that has a completion date,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "which must be specified after the `/by` keyword."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\\"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\\"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "Format: `deadline [description] /by [date]`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "![deadline](deadline.png)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "### `event` - Add an event"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "Adds an event to the task list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "An event is a task that has a scheduled date and time interval,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "which must be specified in that order after the `/at` keyword."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\\"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\\"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "Format: `event [description] /at [date] [time]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "![event](event.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "### `todo` - Add a todo"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "Adds a todo to the task list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "A todo is a task that only has a description."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\\"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\\"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "Format: `todo [description]`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "![todo](todo.png)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "### `delete` - Delete a task"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "Removes a task from the task list by specifying their position in the current list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "To obtain the `[task id]` of the task to remove, use the `list` command."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\\"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\\"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "Format: `delete [task id]`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "![delete](delete.png)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "### `done` - Mark a task as done"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "Marks a task as done in the task list by specifying their position in the current list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "A tick should appear next to the description of the task if it has been marked as done correctly."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "To obtain the `[task id]` of the task to mark as done, use the `list` command."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\\"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\\"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "Format: `done [task id]`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "![done](done.png)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "### `find` - Find tasks by keyword"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "Searches through the list of tasks, and displays all tasks that contain"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "the keyword in their description. The keyword used to search is `CASE_INSENSITVE`, meaning that"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "all the task descriptions and the keyword will be compared in `LOWER_CASE`."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\\"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\\"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "Format: `find [keyword]`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "![find](find.png)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "### `list` - Display the task list"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "Displays the list of tasks by ordering them numerically . Tasks will be listed in"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "the order that they were inserted into the list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\\"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\\"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "![list](list.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "### `bye` - End the program"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "Finish managing the task list. The user can continue to input commands,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "but they will not be processed. Duke must be restarted in order to process more commands."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\\"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\\"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "![bye](bye.png)"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 160,
      "-": 14
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.parser.Parsers;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // Duke components"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** The save/loading mechanism. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** The list of tasks. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** The user interface for console displays. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** True if the chat-bot has ended, otherwise false. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** True if the chat-bot loaded from a save file, otherwise false. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private boolean isLoaded;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a new chat-bot Duke."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param filePath the relative path to the save file of the chat-bot."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            tasks \u003d new TaskList(storage.load()); // Load from file if possible"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            isLoaded \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            tasks \u003d new TaskList(); // Start a brand new task list if file cannot be found/opened."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            isLoaded \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a new chat-bot Duke with the default save file location."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this(getDefaultPath());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the response from Duke after parsing and executing the user input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * If an error is thrown, Duke will respond with its own custom error message."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param input the user input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return the response from Duke after parsing and executing the user input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // TODO: Fix immutability of Ui"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            ui.clear();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            Command c \u003d Parsers.parse(input);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            tasks \u003d c.execute(tasks, ui, storage); // Let the command handle the processing"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return ui.getResponse();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return ui.getError(e);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns whether the chat-bot has ended or not."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return true if the chat-bot has ended, otherwise false."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns whether the chat-bot was loaded from a save file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return true if the chat-bot was loaded from a save file, otherwise false."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean isLoaded() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return isLoaded;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the welcome message."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return the welcome message."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String getWelcome() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return ui.getWelcome();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the loading error message."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return the loading error message."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String getLoadingError() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return ui.getLoadingError();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the os-dependent directory to the default save file location."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * This default save file location is {folder_enclosing_duke_program}-\u003edata-\u003etasks.txt."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return the os-dependent directory to the default save file location."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static String getDefaultPath() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return Paths.get(System.getProperty(\"user.dir\"), \"data\", \"tasks.txt\").toString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 116,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** The main entry point of the program with GUI. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 14
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "//@Override"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            AnchorPane anchorPane \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            Scene scene \u003d new Scene(anchorPane);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().init();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 35
    }
  },
  {
    "path": "src/main/java/duke/Serializable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public interface Serializable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns a text representation of this object for storage purposes."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return a text representation of this object for storage purposes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    String serialize();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 10
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.parser.StorageParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** Relative directory of the save file for this storage object. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a new saving/loading mechanism."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param filePath the relative directory of the save file for this storage object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns a list of tasks generated from a save file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return a list of tasks generated from a save file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @throws DukeException if file could not be found or opened."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            File saveFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            if (!saveFile.exists()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                saveFile.mkdirs(); // Create a new save file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            Scanner sc \u003d new Scanner(saveFile);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    Task task \u003d StorageParser.readTask(sc.nextLine());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    tasks.add(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    throw new DukeException(\"I can\u0027t read everything in the file!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new DukeException(\"I can\u0027t write to this file!: \" + filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Writes a list of tasks into a save file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param tasks the list of tasks to write to a save file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @throws DukeException if file could not be found or opened."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void save(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Setup file output resources with auto-closing"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d tasks.getNumTasks(); i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                // Each task has their own save file format"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                fw.write(tasks.get(i).serialize());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                fw.append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new DukeException(\"I can\u0027t write to this file!: \" + filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 88
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** The task to add to a task list. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a new command that adds a task to a task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param task the task to add."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public TaskList execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Add task to the list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        TaskList newTasks \u003d tasks.addTask(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        ui.showAdd(task);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        ui.showText(\"\\n\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        ui.showTaskCount(newTasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Save immediately"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        storage.save(newTasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return newTasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 43
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns an updated task list after performing a specific command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * The actions that can be performed include task processing,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * console outputting, and file I/O."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param tasks a list of tasks to update."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param ui a user interface for console outputting."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param storage a save/loading mechanism."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return an updated task list after performing a specific command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @throws DukeException if command encounters an issue when executing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public abstract TaskList execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns whether the command will exit the program."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return true if the command will exit the program, false otherwise."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 30
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** The id number of the task to delete from a task list. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a new command that deletes a task from a task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param taskId the id number of the task to delete from a list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public DeleteCommand(int taskId) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public TaskList execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Invalid task number"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (taskId \u003c\u003d 0 || taskId \u003e tasks.getNumTasks()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new DukeException(\"I can\u0027t find that task number!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Extract the deleted task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Task deletedTask \u003d tasks.get(taskId);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        TaskList newTasks \u003d tasks.deleteTask(taskId);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        ui.showDelete(deletedTask);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        ui.showText(\"\\n\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        ui.showTaskCount(newTasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Save immediately"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        storage.save(newTasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return newTasks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 49
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** The id number of the task to mark as done in a list. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a new command that marks a task as done in a task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param taskId the id number of the task to mark as done in a list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public DoneCommand(int taskId) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public TaskList execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Invalid task number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (taskId \u003c\u003d 0 || taskId \u003e tasks.getNumTasks()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new DukeException(\"I can\u0027t find that task number!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Mark task as done"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        TaskList newTasks \u003d tasks.doneTask(taskId);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        ui.showDone(newTasks.get(taskId));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Save immediately"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        storage.save(newTasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return newTasks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 44
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public TaskList execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Just display goodbye message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        ui.showGoodbye();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return tasks; // Don\u0027t update anything"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 19
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * The keyword used to find tasks in a task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Note that the search is case insensitive. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a new command that finds tasks in a task list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * that contain a specific keyword."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Note that the search is case insensitive."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param keyword the keyword used to find tasks in a task list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.keyword \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public TaskList execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        List\u003cInteger\u003e taskIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Find all task descriptions containing the keyword"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.getNumTasks(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            String description \u003d tasks.get(i).getDescription().toLowerCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            if (description.contains(keyword)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                taskIds.add(i);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Just display list of tasks with keyword in description"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        ui.showFind(tasks, taskIds);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return tasks; // Don\u0027t update anything"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 51
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public TaskList execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Just display task list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        ui.showList(tasks);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return tasks; // Don\u0027t update anything"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 19
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "// TODO: Will expand exception hierarchy in future"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a new custom exception."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param message the message of the exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/MissingParsedArgumentsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class MissingParsedArgumentsException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a new exception when a parse fails because of insufficient arguments."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public MissingParsedArgumentsException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        super(\"You missed out some arguments, blockhead.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 10
    }
  },
  {
    "path": "src/main/java/duke/parser/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.exception.MissingParsedArgumentsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "class CommandParser extends Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    static ExitCommand parseExit(String[] input)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throws MissingParsedArgumentsException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasNumArguments(input, 1)) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new MissingParsedArgumentsException();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new ExitCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    static DoneCommand parseDone(String[] input) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasNumArguments(input, 2)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new MissingParsedArgumentsException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        int taskId \u003d StringParser.parseInt(input[1]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new DoneCommand(taskId);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    static DeleteCommand parseDelete(String[] input) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasNumArguments(input, 2)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new MissingParsedArgumentsException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        int taskId \u003d StringParser.parseInt(input[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new DeleteCommand(taskId);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    static ListCommand parseList(String[] input) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasNumArguments(input, 1)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new MissingParsedArgumentsException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    static FindCommand parseFind(String[] input) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasNumArguments(input, 2)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new MissingParsedArgumentsException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new FindCommand(input[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 55
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "abstract class Parser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns true if the input contains the correct number of arguments,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * otherwise false."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param input a tokenized array of input arguments."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param length the desired number of input arguments."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return true if the input contains the correct number of arguments,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *         otherwise false."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    protected static boolean hasNumArguments(String[] input, int length) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return input.length \u003d\u003d length;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 16
    }
  },
  {
    "path": "src/main/java/duke/parser/Parsers.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class Parsers {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns a valid user command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param fullCommand a line of user input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return a valid user command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @throws DukeException if command is empty."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @throws DukeException if command could not be parsed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @throws DukeException if input arguments do not match."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String[] input \u003d fullCommand.stripTrailing().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String command \u003d input[0];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Handle different commands"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return CommandParser.parseExit(input);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return TaskParser.parseDeadline(input);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return CommandParser.parseDelete(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return CommandParser.parseDone(input);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return TaskParser.parseEvent(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return CommandParser.parseFind(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return CommandParser.parseList(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return TaskParser.parseTodo(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            if (command.strip().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                // Blank input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                throw new DukeException(\"Speak up! I can\u0027t hear you.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                // Unknown command"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                throw new DukeException(\"What on earth does that mean?\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 58
    }
  },
  {
    "path": "src/main/java/duke/parser/StorageParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.exception.MissingParsedArgumentsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class StorageParser extends Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** Separates a line of text for file IO processing. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final String DELIMITER \u003d \" \\\\s*\\\\|\\\\s*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Selects the appropriate method to read a task from a file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param line a line from a file input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @throws DukeException if task type is unknown."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @throws DukeException if arguments cannot make any valid task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static Task readTask(String line) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Tokenize the string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String[] args \u003d line.split(DELIMITER);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        int minimumArguments \u003d 3;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        boolean hasMinimumArguments \u003d args.length \u003e\u003d minimumArguments;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasMinimumArguments) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new MissingParsedArgumentsException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Task task \u003d readTaskByType(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        boolean isDone \u003d StringParser.parseBoolean(args[1], \"1\", \"0\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            task \u003d task.markDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Reads and constructs a task from a tokenized file input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param args tokens read from a file input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return a task read from file input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @throws DukeException if the file input has an invalid task id."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    static Task readTaskByType(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // First argument is the character ID of the task type."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        switch (args[0]) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return readTodo(args); // To-do"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return readDeadline(args); // Deadline"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return readEvent(args); // Event"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new DukeException(\"There\u0027s no such task type: \" + args[0]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    // TODO: remove dependency on Parser"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns a to-do constructed from a tokenized file input."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param args tokens read from a file input."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return a to-do read from file input."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @throws DukeException if the file input contains invalid arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    static Todo readTodo(String[] args) throws MissingParsedArgumentsException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasNumArguments(args, 3)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new MissingParsedArgumentsException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new Todo(args[2]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns a deadline constructed from a tokenized file input."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param args tokens read from a file input."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return a deadline read from file input."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @throws DukeException if the file input contains invalid arguments."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    static Deadline readDeadline(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasNumArguments(args, 4)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new MissingParsedArgumentsException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new Deadline(args[2], StringParser.parseDate(args[3]));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns an event constructed from a tokenized file input."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param args tokens read from a file input."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return an event read from file input."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @throws DukeException if the file input contains invalid arguments."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    static Event readEvent(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasNumArguments(args, 5)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new MissingParsedArgumentsException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new Event(args[2], args[3], args[4]);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 109
    }
  },
  {
    "path": "src/main/java/duke/parser/StringParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class StringParser extends Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Parses an integer from a string."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param input a string to convert into an integer."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return the integer representation of the string."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @throws DukeException if input is not an integer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static int parseInt(String input) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return Integer.parseInt(input);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            // Input was not an integer"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new DukeException(\"That\u0027s clearly not a number.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Parses a boolean from a string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param input a string to convert into a boolean."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param trueInput the string representation if the input is true."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param falseInput the string representation if the input is false."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return the boolean representation of the string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @throws DukeException if input cannot be parsed as a boolean."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static boolean parseBoolean(String input, String trueInput, String falseInput) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (input.equals(trueInput)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        } else if (input.equals(falseInput)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            String error \u003d String.format(\"It\u0027s %s (for true) or %s (for false). This isn\u0027t a boolean.\", trueInput, falseInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new DukeException(error);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Parses a date from a string."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param input a string to convert into a date, in yyyy-mm-dd format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return the date representation of the string."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @throws DukeException if input cannot be parsed as a date object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static LocalDate parseDate(String input) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return LocalDate.parse(input, DateTimeFormatter.ISO_LOCAL_DATE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new DukeException(\"I need the date in this format:\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    + \" yyyy-mm-dd.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 62
    }
  },
  {
    "path": "src/main/java/duke/parser/TaskParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.exception.MissingParsedArgumentsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "class TaskParser extends Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    static AddCommand parseDeadline(String[] input) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasNumArguments(input, 2)) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new MissingParsedArgumentsException();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String[] args \u003d input[1].split(\"\\\\s+/by\\\\s+\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasNumArguments(args, 2)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new MissingParsedArgumentsException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Task task \u003d new Deadline(args[0], StringParser.parseDate(args[1]));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new AddCommand(task);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    static AddCommand parseEvent(String[] input)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throws MissingParsedArgumentsException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasNumArguments(input, 2)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new MissingParsedArgumentsException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String[] args \u003d input[1].split(\"\\\\s+/at\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasNumArguments(args, 2)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new MissingParsedArgumentsException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        int timeSlotIndex \u003d args[1].lastIndexOf(\" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (timeSlotIndex \u003c\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            // Command is incorrectly typed"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new MissingParsedArgumentsException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Task task \u003d new Event(args[0],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                args[1].substring(0, timeSlotIndex).strip(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                args[1].substring(timeSlotIndex + 1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new AddCommand(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    static AddCommand parseTodo(String[] input) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!hasNumArguments(input, 2)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new MissingParsedArgumentsException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Task task \u003d new Todo(input[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new AddCommand(task);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 63
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** The cut-off date for this deadline. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    protected final LocalDate by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a new deadline with a cut-off date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param description the details of the deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param by the cut-off date as text."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Deadline(String description, LocalDate by) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this(description, false, by);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private Deadline(String description, boolean isDone, LocalDate by) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Deadline markDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new Deadline(description, true, by);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String serialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Date format is yyyy-mm-dd"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return serialize(\"D\", by.format(DateTimeFormatter.ISO_LOCAL_DATE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Date format is MMM d yyyy"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String formatDate \u003d by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(), formatDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String toFormatString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Date format is MMM d yyyy"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String formatDate \u003d by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return String.format(\"[D]%s\\nby:\\n%s\", super.toString(), formatDate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (super.equals(obj) \u0026\u0026 obj instanceof Deadline) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            Deadline deadline \u003d (Deadline)obj;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return this.by.equals(deadline.by);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return Objects.hash(super.hashCode(), by);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 65
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** The date of this event. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    protected final String at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** The start and end time of this event. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    protected final String timeInterval;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a new event with a date, start time and end time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param description the details of the deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param at the date of the event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param timeInterval the start and end time of the event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Event(String description, String at, String timeInterval) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this(description, false, at, timeInterval);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private Event(String description, boolean isDone, String at, String timeInterval) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.timeInterval \u003d timeInterval;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Event markDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new Event(description, true, at, timeInterval);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String serialize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return serialize(\"E\", at, timeInterval);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return String.format(\"[E]%s (at: %s %s)\", super.toString(), at, timeInterval);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String toFormatString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return String.format(\"[E]%s\\nat:\\n%s\\n%s\", super.toString(), at, timeInterval);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (super.equals(obj) \u0026\u0026 obj instanceof Event) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            Event event \u003d (Event)obj;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return this.at.equals(event.at)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    \u0026\u0026 this.timeInterval.equals(event.timeInterval);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return Objects.hash(super.hashCode(), at, timeInterval);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 63
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public abstract class Task implements Serializable {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** Details about the task. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** Keeps track of whether the task has been completed. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    protected final boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a new incomplete task with default parameters."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param description details about the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    protected Task(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this(description, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a new task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param description details about the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param isDone true if the task has been completed, false otherwise."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    protected Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the description of this task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return the description of this task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns whether the task has been completed or not."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return true if the task has been completed, otherwise false."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns a tick or X symbol depending if the task has been completed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return a tick (if task is completed) or an X (if not complete)."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Symbol codes: tick (\\u2713), cross (\\u2718)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return (isDone ? \"✓\" : \"✘\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns a copy of this task that has been marked as completed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return a copy of this task that has been marked as completed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public abstract Task markDone();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns a text representation of this task for storage purposes."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return a text representation of this task for storage purposes."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public abstract String serialize();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns a text representation of this task for storage purposes."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param taskId the unique id for the type of this task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param args optional arguments for tasks with additional serializable parameters."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return a text representation of this task for storage purposes."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    protected String serialize(String taskId, String... args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String delimiter \u003d \" | \";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        StringBuilder serial \u003d new StringBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        serial.append(taskId)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(delimiter)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(isDone ? \"1\" : \"0\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(delimiter)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                .append(description);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        for (int i \u003d 0; i \u003c args.length; i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            serial.append(delimiter).append(args[i]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // TODO: potential for assertion here"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return serial.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public abstract String toFormatString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        } else if (obj instanceof Task) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            Task task \u003d (Task)obj;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return this.description.equals(task.description);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return Objects.hash(description);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 124
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** Stores a list of tasks. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private final HashSet\u003cTask\u003e taskCounters;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** Constructs a new TaskList that can store an arbitrary size. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this(new ArrayList\u003c\u003e(), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** Constructs a new TaskList using an existing list of tasks. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.taskCounters \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.taskCounters.addAll(tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private TaskList(List\u003cTask\u003e tasks, HashSet\u003cTask\u003e taskCounters) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.taskCounters \u003d taskCounters;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the task at the specified position in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param taskId the position of the task in the list, starting from #1."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return the task at the specified position in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Task get(int taskId) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return tasks.get(taskId - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the number of tasks in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return the number of tasks in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public int getNumTasks() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the list of tasks."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return the list of tasks."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Adds a new tasks into the TaskList."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param task the task to add into the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return a copy of this TaskList with the newly added task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public TaskList addTask(Task task) throws DukeException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (taskCounters.contains(task)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            throw new DukeException(\"Don\u0027t make me remember the same thing!\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        newTasks.add(task);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        HashSet\u003cTask\u003e newTaskCounters \u003d new HashSet\u003c\u003e(taskCounters);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        newTaskCounters.add(task);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new TaskList(newTasks, newTaskCounters);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Marks a task in the TaskList as done."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param taskId the id of the task in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return a copy of this TaskList with the specified task marked as done."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public TaskList doneTask(int taskId) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Task oldTask \u003d this.get(taskId);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Task newTask \u003d oldTask.markDone();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        newTasks.set(taskId - 1, newTask);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // For safety, update hashSet with the completed task"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        HashSet\u003cTask\u003e newTaskCounters \u003d new HashSet\u003c\u003e(taskCounters);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        newTaskCounters.remove(oldTask);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        newTaskCounters.add(newTask);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new TaskList(newTasks, newTaskCounters);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Deletes a task in the TaskList."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param taskId the id of the task in the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return a copy of this TaskList with the specified task removed,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *      and remaining elements left-shifted."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public TaskList deleteTask(int taskId) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        Task task \u003d this.get(taskId);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        newTasks.remove(taskId - 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        HashSet\u003cTask\u003e newTaskCounters \u003d new HashSet\u003c\u003e(taskCounters);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        newTaskCounters.remove(task);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new TaskList(newTasks, newTaskCounters);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns a task in the list as a formatted text."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param taskId the id of the task in the list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return a task in the list as a formatted text."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String getFormattedTask(int taskId) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String description \u003d tasks.get(taskId - 1).toFormatString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        int paramIndex \u003d description.indexOf(\"\\n\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (paramIndex \u003e\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            String indent \u003d \"      \";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            String parameters \u003d description.substring(paramIndex + 1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            parameters \u003d parameters.replaceAll(\"(?m)^\", indent);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            description \u003d description.substring(0, paramIndex);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return String.format(\"%4d. %s\\n%s\", taskId, description, parameters);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            return String.format(\"%4d. %s\", taskId, description);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        StringBuilder taskDescriptions \u003d new StringBuilder();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String spacing \u003d \"\\n\\n\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d this.tasks.size(); i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            taskDescriptions.append(getFormattedTask(i)).append(spacing);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (taskDescriptions.length() \u003e 0) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            int stringLength \u003d taskDescriptions.length();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            taskDescriptions.delete(stringLength - spacing.length(), stringLength);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return taskDescriptions.toString();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 162
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a new to-do."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param description the details of the to-do"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this(description, false);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Todo markDone() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new Todo(description, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String serialize() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return serialize(\"T\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return String.format(\"[T]%s\", super.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String toFormatString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return super.equals(obj) \u0026\u0026 obj instanceof Todo;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return super.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 46
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** The text attached to this dialog box. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** The image attached to this dialog box. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a new dialog box with the provided text and image."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param text the GUI text for the dialog box."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param img the GUI image for the dialog box."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // Link?"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        double radius \u003d displayPicture.getFitWidth() / 2;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        displayPicture.setClip(new Circle(radius, radius, radius));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        ObservableList\u003cNode\u003e node \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        FXCollections.reverse(node);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.getChildren().setAll(node);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a dialog box for the user."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param text the GUI text for the dialog box."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param img the GUI image for the user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return a dialog box for the user."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Constructs a dialog box for Duke."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param text the GUI text for the dialog box."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param img the GUI image for Duke."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return a dialog box for Duke."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 91
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/charlie.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/lucy.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Sets the chat-bot for this main window."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param duke the chat-bot instance."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setDuke(Duke duke) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!this.duke.isLoaded()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            addDialogBox(DialogBox.getDukeDialog(duke.getLoadingError(), dukeImage));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        addDialogBox(DialogBox.getDukeDialog(duke.getWelcome(), dukeImage));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        addDialogBox(DialogBox.getUserDialog(input, userImage));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (!duke.isExit()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            addDialogBox(DialogBox.getDukeDialog(response, dukeImage));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Adds a list of dialog boxes."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param dialogBoxes a list of dialog boxes."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private void addDialogBox(DialogBox... dialogBoxes) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assert dialogBoxes.length \u003e 0 : \"Should be adding at least one dialog box,\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                + \" not \" + dialogBoxes.length;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        dialogContainer.getChildren().addAll(dialogBoxes);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 81
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** The logo for Duke. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private static final String HEADER \u003d \"\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"    PSYCHIATRIC    \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"      HELP 5¢      \\n\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"     c o _ o ɔ     \\n\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"    THE  DOCTOR    \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            + \"     IS [ IN ]     \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** The previous response from Duke. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private String response;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** Constructs a new Ui object for console input and output. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** Constructs a new Ui object for console input and output. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private Ui(String response) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        this.response \u003d response;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** Clears the log of responses from Duke. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        response \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Returns the latest response from Duke."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return the latest response from Duke."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String getResponse() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Displays a welcome message in the chat-bot."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return a welcome message in the chat-bot."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String getWelcome() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return HEADER;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Displays an error message in the chat-bot."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param e the error encountered."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return an error message in the chat-bot."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String getError(DukeException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String message \u003d \"AAUGH!!\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return message + e.getMessage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Displays the loading error message in the chat-bot."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return the loading error message in the chat-bot."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public String getLoadingError() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return \"AAUGH!! I can\u0027t read from the save file.\\n\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                + \"Nevermind. You can start from scratch again.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Logs a task that has been added to the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param task the tasks that has been added to the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void showAdd(Task task) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        showText(\"Another task to remember?:\\n\\n\" + indent(task.toString(), 2));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Logs a completed task."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param task the completed task."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void showDone(Task task) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String praise \u003d \"Finally!!\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                + \"Don\u0027t tell anyone that I gave you a tick!\\n\\n\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        showText(praise + indent(task.toString(), 2));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Logs a list of all tasks."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param tasks the list of tasks to display."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void showList(TaskList tasks) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        showText(\"I can remember all these tasks!:\\n\\n\" + tasks.toString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Logs a deleted task."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param task the deleted task."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void showDelete(Task task) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        showText(\"Phew! One less thing to remember:\\n\\n\" + indent(task.toString(), 2));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Logs the number of tasks in the list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param tasks the task list to count and display."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void showTaskCount(TaskList tasks) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        showText(\"I\u0027m remembering \" + tasks.getNumTasks() + \" tasks at the moment.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** Logs a farewell to the user. */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void showGoodbye() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        showText(\"Five cents, please!\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Logs a search result."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param tasks the list of tasks that was searched."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param taskIds the list of ids in the task list matching the search criteria."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void showFind(TaskList tasks, List\u003cInteger\u003e taskIds) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        // TODO: exception if taskIds contains duplicate elements"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String title \u003d \"Aren\u0027t I great for helping you find these tasks?:\\n\\n\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        StringBuilder foundTasks \u003d new StringBuilder();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        for (int i \u003d 0; i \u003c taskIds.size(); i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            int taskId \u003d taskIds.get(i);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            foundTasks.append(tasks.getFormattedTask(taskId)).append(\"\\n\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        if (foundTasks.length() \u003e 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            foundTasks.deleteCharAt(foundTasks.length() - 1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        showText(title + foundTasks.toString());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /** Displays text in the chat-bot. */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void showText(String text) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        response +\u003d text;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * Adds an indent to all lines of a given text."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param text the text to indent."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @param indentWidth the character width of the indentation."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     * @return the indented text."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private String indent(String text, int indentWidth) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assert indentWidth \u003e 0 : \"Should be adding at least one whitespace\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                + \" of indentation, not \" + indentWidth;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String indent \u003d \" \".repeat(indentWidth);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        return text.replaceAll(\"(?m)^\", indent);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 171
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"380.0\" prefWidth\u003d\"380\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-background-radius: 15; -fx-background-color: PALEGREEN;\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                \u003cFont name\u003d\"Monaco\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                \u003cInsets bottom\u003d\"7.0\" left\u003d\"7.0\" right\u003d\"7.0\" top\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                \u003cInsets bottom\u003d\"7.0\" left\u003d\"7.0\" right\u003d\"7.0\" top\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        \u003cVBox alignment\u003d\"BOTTOM_RIGHT\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                        \u003cInsets bottom\u003d\"7.0\" left\u003d\"7.0\" right\u003d\"7.0\" top\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 33
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Ask\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" maxWidth\u003d\"380.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 19
    }
  },
  {
    "path": "src/test/java/duke/TestParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class TestParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void testParseDate1() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        LocalDate actualDate \u003d Parser.parseDate(\"2020-12-25\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        LocalDate expectedDate \u003d LocalDate.of(2020, 12, 25);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertEquals(actualDate, expectedDate);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void testParseDate2() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseDate(\"potato\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void testParseInt1() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        int actualInt \u003d Parser.parseInt(\"3\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        int expectedInt \u003d 3;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertEquals(actualInt, expectedInt);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 34
    }
  },
  {
    "path": "src/test/java/duke/TestUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "public class TestUi {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void testShowGoodbye() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        ui.showGoodbye();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        String expectedOutput \u003d String.format(\"Bye! Please give a review if you like this program!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        assertEquals(ui.getResponse().toString(), expectedOutput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "        ui.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 31
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    Hello from"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Hey there! I\u0027m Duke"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Your word is my command!"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Okie! I\u0027ve added this task:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "       [T][✘] eat breakfast"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     There are now 1 tasks in the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Okie! I\u0027ve added this task:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "       [D][✘] finish Duke (by: Thurs 2359)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     There are now 2 tasks in the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Okie! I\u0027ve added this task:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "       [T][✘] eat lunch"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     There are now 3 tasks in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Okie! I\u0027ve added this task:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "       [E][✘] brother\u0027s birthday (at: 23/1/2020 3-5pm)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     There are now 4 tasks in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Okie! I\u0027ve added this task:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "       [E][✘] attend mass (at: Thurs 5.30-6.30pm)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     There are now 5 tasks in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Okie! I\u0027ve added this task:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "       [D][✘] find internship (by: 31/1/2020)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     There are now 6 tasks in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Okie! I\u0027ve added this task:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "       [T][✘] eat dinner"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     There are now 7 tasks in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Okie! I\u0027ve added this task:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "       [T][✘] go sleep"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     There are now 8 tasks in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      1.[T][✘] eat breakfast"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      2.[D][✘] finish Duke (by: Thurs 2359)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      3.[T][✘] eat lunch"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      4.[E][✘] brother\u0027s birthday (at: 23/1/2020 3-5pm)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      5.[E][✘] attend mass (at: Thurs 5.30-6.30pm)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      6.[D][✘] find internship (by: 31/1/2020)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      7.[T][✘] eat dinner"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      8.[T][✘] go sleep"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Good job completing this task! Here\u0027s a tick for completing it!"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "       [T][✓] eat breakfast"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      1.[T][✓] eat breakfast"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      2.[D][✘] finish Duke (by: Thurs 2359)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      3.[T][✘] eat lunch"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      4.[E][✘] brother\u0027s birthday (at: 23/1/2020 3-5pm)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      5.[E][✘] attend mass (at: Thurs 5.30-6.30pm)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      6.[D][✘] find internship (by: 31/1/2020)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      7.[T][✘] eat dinner"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      8.[T][✘] go sleep"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Good job completing this task! Here\u0027s a tick for completing it!"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "       [T][✓] eat lunch"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      1.[T][✓] eat breakfast"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      2.[D][✘] finish Duke (by: Thurs 2359)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      3.[T][✓] eat lunch"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      4.[E][✘] brother\u0027s birthday (at: 23/1/2020 3-5pm)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      5.[E][✘] attend mass (at: Thurs 5.30-6.30pm)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      6.[D][✘] find internship (by: 31/1/2020)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      7.[T][✘] eat dinner"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      8.[T][✘] go sleep"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Good job completing this task! Here\u0027s a tick for completing it!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "       [D][✓] finish Duke (by: Thurs 2359)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      1.[T][✓] eat breakfast"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      2.[D][✓] finish Duke (by: Thurs 2359)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      3.[T][✓] eat lunch"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      4.[E][✘] brother\u0027s birthday (at: 23/1/2020 3-5pm)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      5.[E][✘] attend mass (at: Thurs 5.30-6.30pm)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      6.[D][✘] find internship (by: 31/1/2020)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      7.[T][✘] eat dinner"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      8.[T][✘] go sleep"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Good job completing this task! Here\u0027s a tick for completing it!"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "       [T][✓] eat dinner"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      1.[T][✓] eat breakfast"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      2.[D][✓] finish Duke (by: Thurs 2359)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      3.[T][✓] eat lunch"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      4.[E][✘] brother\u0027s birthday (at: 23/1/2020 3-5pm)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      5.[E][✘] attend mass (at: Thurs 5.30-6.30pm)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      6.[D][✘] find internship (by: 31/1/2020)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      7.[T][✓] eat dinner"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      8.[T][✘] go sleep"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Good job completing this task! Here\u0027s a tick for completing it!"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "       [E][✓] brother\u0027s birthday (at: 23/1/2020 3-5pm)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      1.[T][✓] eat breakfast"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      2.[D][✓] finish Duke (by: Thurs 2359)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      3.[T][✓] eat lunch"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      4.[E][✓] brother\u0027s birthday (at: 23/1/2020 3-5pm)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      5.[E][✘] attend mass (at: Thurs 5.30-6.30pm)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      6.[D][✘] find internship (by: 31/1/2020)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      7.[T][✓] eat dinner"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      8.[T][✘] go sleep"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Good job completing this task! Here\u0027s a tick for completing it!"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "       [T][✓] go sleep"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      1.[T][✓] eat breakfast"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      2.[D][✓] finish Duke (by: Thurs 2359)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      3.[T][✓] eat lunch"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      4.[E][✓] brother\u0027s birthday (at: 23/1/2020 3-5pm)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      5.[E][✘] attend mass (at: Thurs 5.30-6.30pm)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      6.[D][✘] find internship (by: 31/1/2020)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      7.[T][✓] eat dinner"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      8.[T][✓] go sleep"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Good job completing this task! Here\u0027s a tick for completing it!"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "       [E][✓] attend mass (at: Thurs 5.30-6.30pm)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      1.[T][✓] eat breakfast"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      2.[D][✓] finish Duke (by: Thurs 2359)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      3.[T][✓] eat lunch"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      4.[E][✓] brother\u0027s birthday (at: 23/1/2020 3-5pm)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      5.[E][✓] attend mass (at: Thurs 5.30-6.30pm)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      6.[D][✘] find internship (by: 31/1/2020)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      7.[T][✓] eat dinner"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      8.[T][✓] go sleep"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Good job completing this task! Here\u0027s a tick for completing it!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "       [D][✓] find internship (by: 31/1/2020)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      1.[T][✓] eat breakfast"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      2.[D][✓] finish Duke (by: Thurs 2359)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      3.[T][✓] eat lunch"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      4.[E][✓] brother\u0027s birthday (at: 23/1/2020 3-5pm)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      5.[E][✓] attend mass (at: Thurs 5.30-6.30pm)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      6.[D][✓] find internship (by: 31/1/2020)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      7.[T][✓] eat dinner"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "      8.[T][✓] go sleep"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "     Bye! Please give a review if you like this program!"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    ------------------------------------------------------------"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 265
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "todo eat breakfast"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "deadline finish Duke /by Thurs 2359"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "todo eat lunch"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "event brother\u0027s birthday /at 23/1/2020 3-5pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "event attend mass /at Thurs 5.30-6.30pm"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "deadline find internship /by 31/1/2020"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "todo eat dinner"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "todo go sleep"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "done 7"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "done 8"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "done 6"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 26
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "java -classpath ../bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PotatoCombat"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "PotatoCombat": 34
    }
  }
]
