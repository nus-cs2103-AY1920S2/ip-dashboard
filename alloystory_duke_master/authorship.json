[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "test {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    mainClassName \u003d \"App\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    archiveVersion \u003d \"1.0\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 33,
      "-": 21
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "# Duke User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "![Duke Screenshot](./Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Product Screenshot"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "## Description"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Duke is a simple and interactive task manager that is targeted for users who prefer typing commands. This program is created for the sake of CS2103T. Also, this program is inspired by *The Good Place*."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "## Technology"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "1. Java 11"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "2. JavaFX 11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "3. Gradle"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "### Starting Duke"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "To start Duke, you can double-click on the application. If it does not work, you may enter `java -jar \u003cduke-filename\u003e` into your computer\u0027s terminal. If it still does not work, please make sure that you have Java 11 installed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Upon starting Duke, the application will attempt to load the previous task history from `./data/tasks.txt`. If the file is missing, Duke will create a new storage file there."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "### Creating Tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Tasks in Duke are categorised into: To-Do, Deadline and Event tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "#### Creating To-Do Tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "To-Do tasks form the basic tasks in Duke. In Duke, you are allowed to set a To-Do task with a description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "*Command*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "todo \u003cdescription\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "*Expected Output*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Okie! I\u0027ve added this task:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    \u003ctask-info\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "You have \u003cnumber-of-tasks\u003e tasks in the list!"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "*Duplicated Task Output*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "This task is duplicated!"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "#### Creating Deadline Tasks"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Deadline tasks are tasks that have to be done by a particular date and time. In Duke, you are allowed to set a Deadline task with a description and a date (format: `yyyy-MM-dd HHmm`)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "*Command*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "deadline \u003cdescription\u003e /by \u003cdate\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "*Expected Output*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Okie! I\u0027ve added this task:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    \u003ctask-info\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "You have \u003cnumber-of-tasks\u003e tasks in the list!"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "*Duplicated Task Output*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "This task is duplicated!"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": "#### Creating Event Tasks"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Event tasks are tasks that have to be done on a particular date and time. In Duke, you are allowed to set an Event task with a description and a date (format: `yyyy-MM-dd HHmm`)."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "*Command*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": "event \u003cdescription\u003e /at \u003cdate\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alloystory"
        },
        "content": "*Expected Output*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Okie! I\u0027ve added this task:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    \u003cdescription\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alloystory"
        },
        "content": "You have \u003cnumber-of-tasks\u003e tasks in the list!"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alloystory"
        },
        "content": "*Duplicated Task Output*"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alloystory"
        },
        "content": "This task is duplicated!"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alloystory"
        },
        "content": "### Listing Tasks"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alloystory"
        },
        "content": "After creating your tasks, you may view the list of tasks that you have added into Duke. The list of tasks are also stored in an editable text file at `./data/tasks.txt`."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alloystory"
        },
        "content": "*Command*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alloystory"
        },
        "content": "list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alloystory"
        },
        "content": "*Expected Output*"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Okay Chidi, listen properly..."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alloystory"
        },
        "content": "These are your tasks:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alloystory"
        },
        "content": "1. \u003ctask-info\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alloystory"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alloystory"
        },
        "content": "*Empty Task List Output*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alloystory"
        },
        "content": "You have no tasks"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alloystory"
        },
        "content": "### Searching Tasks"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alloystory"
        },
        "content": "After creating your tasks, you can search for tasks that contain a particular string in its description."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alloystory"
        },
        "content": "*Command*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alloystory"
        },
        "content": "find \u003cstring-to-match\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alloystory"
        },
        "content": "*Expected Output*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Alrighty, I found some tasks! Here they are:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alloystory"
        },
        "content": "1. \u003ctask-info\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alloystory"
        },
        "content": "..."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alloystory"
        },
        "content": "*No Matching Tasks Output*"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Ah dang it! There are no matching tasks ):"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alloystory"
        },
        "content": "### Completing Tasks"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Once you have finished your task, you can update the task and mark it as done. Refer to the task number that is given in the `list` command."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alloystory"
        },
        "content": "*Command*"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alloystory"
        },
        "content": "done \u003ctask-number\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alloystory"
        },
        "content": "*Expected Output*"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Well done Chidi! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    \u003ctask-info\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Give yourself a pat on the back!"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alloystory"
        },
        "content": "*Invalid Task Index Output*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Oops Chidi! I think you gave me the wrong task index!"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Please refer to the \u0027list\u0027 command for available indices."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alloystory"
        },
        "content": "### Deleting Tasks"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alloystory"
        },
        "content": "If your list of tasks get too lengthy, you can also choose to delete any task from Duke at any time. Refer to the task number that is given in the `list` command. "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Alternatively, you may also delete the tasks from the storage file in `./data/tasks.txt`. Be careful when editing this file, as it may crash the application."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alloystory"
        },
        "content": "*Command*"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alloystory"
        },
        "content": "delete \u003ctask-number\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alloystory"
        },
        "content": "*Expected Output*"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    \u003ctask-info\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Now you have \u003cnumber-of-tasks\u003e tasks in the list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Invalid Task Index Output"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Oops Chidi! I think you gave me the wrong task index!"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Please refer to the \u0027list\u0027 command for available indices."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alloystory"
        },
        "content": "### Closing Duke"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alloystory"
        },
        "content": "When you are finished with using Duke, you can exit the application. Duke\u0027s storage is persistent, so your previous task list will be automatically loaded upon the next startup."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alloystory"
        },
        "content": "*Command*"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alloystory"
        },
        "content": "bye"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alloystory"
        },
        "content": "*Expected Output*"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alloystory"
        },
        "content": "Bye Chidi! Enjoy your stay in The Bad Place! (hehe)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alloystory"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "alloystory": 149,
      "-": 16
    }
  },
  {
    "path": "src/main/java/App.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.Duke;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import views.Launcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "final class App {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final boolean HEADLESS \u003d false;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (HEADLESS) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            (new Duke()).start();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            Application.launch(Launcher.class, args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 15
    }
  },
  {
    "path": "src/main/java/app/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.BaseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.util.Pair;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.ConsoleInterface;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.commands.CommandManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.tasks.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Main class for Duke. The class contains all the main components "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * required for Duke to run properly."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private CommandManager commandManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private TaskManager taskManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Initializes a new instance of Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.commandManager \u003d new CommandManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Starts Duke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ConsoleInterface console \u003d new ConsoleInterface();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        console.render(Messages.WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String input \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        boolean shutdown \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "          "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        while (!console.isClosed()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            input \u003d console.listen();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                Pair result \u003d this.executeInput(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                output \u003d (String) result.getFirstValue();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                shutdown \u003d (boolean) result.getSecondValue();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                assert output !\u003d null : \"Output message should not be null\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                console.render(output);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            } catch (BaseException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                console.renderError(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                console.renderError(Messages.UNEXPECTED_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                console.renderError(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                if (shutdown) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                    console.close();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Processes the input based on Duke\u0027s configurations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     *     and returns the corresponding result."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param input The input to be processed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return A Pair object containing the output values."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws BaseException If any exceptions occur during the execution"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     *     of the input."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public Pair executeInput(String input) throws BaseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Command command \u003d this.commandManager.getCommand(input);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Pair output \u003d command.execute(this.taskManager);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assert output !\u003d null : \"Command execution should not be null\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 75,
      "-": 1
    }
  },
  {
    "path": "src/main/java/app/core/ConsoleInterface.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * This class represents the User Interface of the Duke "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * program. The class provides methods to render text on "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * a custom output."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class ConsoleInterface {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * The maximum length of the string before word wrapping"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * occurs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final int MAX_STRING_LENGTH \u003d 60;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private boolean isClosed \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Initializes a new User Interface object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public ConsoleInterface() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assert this.scanner !\u003d null : \"The scanner attribute should not be null\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Returns the line entered by the user on the console."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return the String entered by the user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public String listen() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return this.scanner.nextLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Prints a message on the standard output."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param message The message to be printed"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void render(String message) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        System.out.println(ConsoleInterface.createBorderedMessage(message));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Prints a message on the standard error."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param message The message to be printed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void renderError(String message) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        System.err.println(ConsoleInterface.createBorderedMessage(message));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Returns a boolean representing whether the UI has closed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return a boolean representing whether the UI has closed"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public boolean isClosed() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return this.isClosed;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Closes the UI. No further input and output can happen"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * using this UI."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.isClosed \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.scanner.close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static String createBorderedMessage(String message) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String border \u003d createBordersOfLength(MAX_STRING_LENGTH);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        output.append(String.format(\"    %s\\n\", border));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        for (String str : message.split(\"\\n\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            while (index \u003c str.length()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                int printLength \u003d Math.min(str.length() - index, MAX_STRING_LENGTH - 2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                String formattedString \u003d String.format(\"      %s\\n\", str.substring(index, index + printLength));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                output.append(formattedString);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                index +\u003d printLength;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        output.append(String.format(\"    %s\\n\", border));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static String createBordersOfLength(int length) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        for (int i \u003d 0; i \u003c length; i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            output.append(\"_\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 96
    }
  },
  {
    "path": "src/main/java/app/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String WELCOME_MESSAGE \u003d \"Hey, I\u0027m Janet! \""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            + \"How may I help you, Chidi?\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String GOODBYE_MESSAGE \u003d \"Bye Chidi! \""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            + \"Enjoy your stay in The Bad Place! (hehe)\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String UNEXPECTED_ERROR_MESSAGE \u003d \"Oh No! sOmetHinG bAD is hAppeNing!!! \""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            + \"CALL MICHAEL (or any developer)!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // Command Manager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMPTY_COMMAND_MESSAGE \u003d \"Oh I\u0027m sorry Chidi! You have to give me a command!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String UNSUPPORTED_COMMAND_MESSAGE \u003d \"Woopsies! I don\u0027t understand \u0027%s\u0027\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Commands"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String BYE_WRONG_FORMAT_MESSAGE \u003d \"Usage: bye\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String LIST_WRONG_FORMAT_MESSAGE \u003d \"Usage: list\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String LIST_NO_TASK_MESSAGE \u003d \"You have no tasks\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String LIST_SUCCESS_MESSAGE \u003d \"Okay Chidi, listen properly...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            + \"These are your tasks:\\n%s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Adding Tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String TODO_WRONG_FORMAT_MESSAGE \u003d \"Usage: todo \u003cdescription\u003e\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEADLINE_WRONG_FORMAT_MESSAGE \u003d \"Usage: deadline \u003cdescription\u003e /by \u003cdeadline\u003e\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EVENT_WRONG_FORMAT_MESSAGE \u003d \"Usage: event \u003cdescription\u003e /at \u003cwhen\u003e\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String ADD_DUPLICATED_TASK_MESSAGE \u003d \"This task is duplicated!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADD_TASK_SUCCESS_MESSAGE \u003d \"Okie! I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            + \"    %s\\nYou have %d tasks in the list!\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    // Deleting Tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DELETE_WRONG_FORMAT_MESSAGE \u003d \"Usage: delete \u003ctask_index\u003e\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String DELETE_INVALID_TASK_INDEX_MESSAGE \u003d \"Oops Chidi! \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            + \"I think you gave me the wrong task index!\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Please refer to the \u0027list\u0027 command for available indices.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String DELETE_TASK_SUCCESS_MESSAGE \u003d \"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            + \"    %s\\nNow you have %d tasks in the list.\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Set Task Done"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DONE_WRONG_FORMAT_MESSAGE \u003d \"Usage: done \u003ctask_index\u003e\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String DONE_INVALID_TASK_INDEX_MESSAGE \u003d \"Oops Chidi! \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            + \"I think you gave me the wrong task index!\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Please refer to the \u0027list\u0027 command for available indices.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String DONE_SUCCESS_MESSAGE \u003d \"Well done Chidi! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            + \"    %s\\nGive yourself a pat on the back!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    // Find Tasks"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FIND_WRONG_FORMAT_MESSAGE \u003d \"Usage: find \u003cstring_to_match\u003e\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FIND_NO_TASKS_MESSAGE \u003d \"Ah dang it! There are no matching tasks ):\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String FIND_SUCCESS_MESSAGE \u003d \"Alrighty, I found some tasks! Here they are:\\n%s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Others"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String STORAGE_SAVE_ERROR_MESSAGE \u003d \"Oh no! An error happened \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            + \"while I was writing to the storage file!\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            + \"The file may be corrupted. Please check the file at %s!\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_DATE_FORMAT_MESSAGE \u003d \"Ah! I can only understand this format: %s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String INVALID_CHARACTER_MESSAGE \u003d \"Hey... \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            + \"I think you used an invalid character (%s) in your input...\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 39,
      "-": 21
    }
  },
  {
    "path": "src/main/java/app/core/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.StorageFileException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * This class manages all storage related tasks in Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Default Storage Directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String STORAGE_DIR \u003d \"./data/\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String STORAGE_FILENAME \u003d \"tasks.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static final String STORAGE_FILEPATH \u003d STORAGE_DIR + STORAGE_FILENAME;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Saves a list of tasks in storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param tasks The list of tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void save(List\u003cTask\u003e tasks) throws StorageFileException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            File outputDir \u003d new File(STORAGE_DIR);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            if (!outputDir.exists()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                outputDir.mkdirs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            FileWriter writer \u003d new FileWriter(STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                writer.write(task.toStorage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                writer.write(\"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new StorageFileException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                String.format(Messages.STORAGE_SAVE_ERROR_MESSAGE, STORAGE_FILEPATH)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Loads a list of tasks from the storage."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return a parsed list of tasks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public List\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            List\u003cTask\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new FileReader(STORAGE_FILEPATH));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            reader.lines()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                .forEach(line -\u003e output.add(Task.fromStorage(line)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 65
    }
  },
  {
    "path": "src/main/java/app/core/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.core.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.tasks.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.InvalidUsageException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.util.Pair;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "final class ByeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    ByeCommand(String args) throws InvalidUsageException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (args.length() !\u003d 0) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new InvalidUsageException(Messages.BYE_WRONG_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public Pair execute(TaskManager taskManager) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new Pair(Messages.GOODBYE_MESSAGE, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 19
    }
  },
  {
    "path": "src/main/java/app/core/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.core.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.tasks.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.BaseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.util.Pair;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * An abstract class that defines abstract methods"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * to be implemented in child Command classes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Abstract execution method that runs the command on the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * task manager and user interface."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param taskManager The desired task manager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws BaseException If any error occurs during the execution of the command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public abstract Pair execute(TaskManager taskManager) throws BaseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 19
    }
  },
  {
    "path": "src/main/java/app/core/commands/CommandManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.core.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.util.InputValidator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.util.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.util.StringPair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.BaseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * This class contains all the data and functions related to Commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public final class CommandManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Parses a user input and returns the corresponding command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param userInput User Input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return A Command object that can be executed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws BaseException If any error occurs during the parsing "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     *     of the user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public Command getCommand(String userInput) throws BaseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        InputValidator.validate(userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        StringPair tokens \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String command \u003d tokens.getFirstValue();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String args \u003d tokens.getSecondValue();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assert command !\u003d null : \"Token\u0027s command should not be null\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assert args !\u003d null : \"Token\u0027s args should not be null\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return new ByeCommand(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return new TodoCommand(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return new EventCommand(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return new DeadlineCommand(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return new ListCommand(args);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return new FindCommand(args);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return new DoneCommand(args);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return new DeleteCommand(args);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        case \"\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new InvalidCommandException(Messages.EMPTY_COMMAND_MESSAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new InvalidCommandException(String.format(Messages.UNSUPPORTED_COMMAND_MESSAGE, command));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 55
    }
  },
  {
    "path": "src/main/java/app/core/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.core.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import app.core.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.tasks.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.util.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.StorageFileException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import app.exceptions.DuplicatedTaskException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.InvalidDateTimeFormatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.InvalidUsageException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "final class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Date deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    DeadlineCommand(String args) throws InvalidUsageException, InvalidDateTimeFormatException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String[] splitArgs \u003d args.split(\"/by\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (splitArgs.length !\u003d 2) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new InvalidUsageException(Messages.DEADLINE_WRONG_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assert splitArgs.length \u003d\u003d 2 : \"There should only be 2 arguments in the split arguments\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.description \u003d splitArgs[0].trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.deadline \u003d Date.fromFormat(splitArgs[1].trim(), Date.DEFAULT_INPUT_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Pair execute(TaskManager taskManager) throws StorageFileException, DuplicatedTaskException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d taskManager.addDeadlineTask(this.description, this.deadline);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String output \u003d String.format(Messages.ADD_TASK_SUCCESS_MESSAGE, task, taskManager.getSize());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new Pair(output, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 30,
      "-": 5
    }
  },
  {
    "path": "src/main/java/app/core/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.core.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import app.core.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.tasks.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.util.Pair;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.InvalidTaskIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.StorageFileException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.InvalidUsageException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "final class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    DeleteCommand(String args) throws InvalidUsageException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            this.taskIndex \u003d Integer.parseInt(args);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new InvalidUsageException(Messages.DELETE_WRONG_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public Pair execute(TaskManager taskManager) throws InvalidTaskIndexException, StorageFileException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            Task task \u003d taskManager.deleteTask(this.taskIndex);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String output \u003d String.format(Messages.DELETE_TASK_SUCCESS_MESSAGE, task, taskManager.getSize());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return new Pair(output, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new InvalidTaskIndexException(Messages.DELETE_INVALID_TASK_INDEX_MESSAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 29,
      "-": 3
    }
  },
  {
    "path": "src/main/java/app/core/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.core.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import app.core.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.tasks.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.util.Pair;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.InvalidTaskIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.StorageFileException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.InvalidUsageException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "final class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    DoneCommand(String args) throws InvalidUsageException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            this.taskIndex \u003d Integer.parseInt(args);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new InvalidUsageException(Messages.DONE_WRONG_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public Pair execute(TaskManager taskManager) throws InvalidTaskIndexException, StorageFileException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            Task task \u003d taskManager.setTaskDone(this.taskIndex);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String output \u003d String.format(Messages.DONE_SUCCESS_MESSAGE, task);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return new Pair(output, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new InvalidTaskIndexException(Messages.DONE_INVALID_TASK_INDEX_MESSAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 29,
      "-": 3
    }
  },
  {
    "path": "src/main/java/app/core/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.core.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import app.core.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.tasks.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.util.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.StorageFileException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import app.exceptions.DuplicatedTaskException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.InvalidDateTimeFormatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.InvalidUsageException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "final class EventCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Date when;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    EventCommand(String args) throws InvalidUsageException, InvalidDateTimeFormatException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String[] splitArgs \u003d args.split(\"/at\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (splitArgs.length !\u003d 2) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new InvalidUsageException(Messages.EVENT_WRONG_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assert splitArgs.length \u003d\u003d 2 : \"There should only be 2 arguments in the split arguments\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.description \u003d splitArgs[0].trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.when \u003d Date.fromFormat(splitArgs[1].trim(), Date.DEFAULT_INPUT_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Pair execute(TaskManager taskManager) throws StorageFileException, DuplicatedTaskException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d taskManager.addEventTask(this.description, this.when);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String output \u003d String.format(Messages.ADD_TASK_SUCCESS_MESSAGE, task, taskManager.getSize());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new Pair(output, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 30,
      "-": 5
    }
  },
  {
    "path": "src/main/java/app/core/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.core.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.tasks.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.util.Pair;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import app.exceptions.EmptyTaskListException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.InvalidUsageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "final class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private String toMatch;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    FindCommand(String args) throws InvalidUsageException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new InvalidUsageException(Messages.FIND_WRONG_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.toMatch \u003d args;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Pair execute(TaskManager taskManager) throws EmptyTaskListException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String tasks \u003d taskManager.findMatchingTasks(this.toMatch);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String output \u003d String.format(Messages.FIND_SUCCESS_MESSAGE, tasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new Pair(output, false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 22,
      "-": 4
    }
  },
  {
    "path": "src/main/java/app/core/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.core.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import app.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.tasks.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import app.exceptions.EmptyTaskListException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.InvalidUsageException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.util.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "final class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    ListCommand(String args) throws InvalidUsageException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (args.length() !\u003d 0) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new InvalidUsageException(Messages.LIST_WRONG_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public Pair execute(TaskManager taskManager) throws EmptyTaskListException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String tasks \u003d taskManager.getTasks();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String output \u003d String.format(Messages.LIST_SUCCESS_MESSAGE, tasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new Pair(output, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 17,
      "-": 5
    }
  },
  {
    "path": "src/main/java/app/core/commands/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.core.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import app.core.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.tasks.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.util.Pair;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.StorageFileException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import app.exceptions.DuplicatedTaskException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.InvalidUsageException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "final class TodoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    TodoCommand(String args) throws InvalidUsageException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throw new InvalidUsageException(Messages.TODO_WRONG_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.description \u003d args;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Pair execute(TaskManager taskManager) throws StorageFileException, DuplicatedTaskException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d taskManager.addTodoTask(this.description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String output \u003d String.format(Messages.ADD_TASK_SUCCESS_MESSAGE, task, taskManager.getSize());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new Pair(output, false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 23,
      "-": 5
    }
  },
  {
    "path": "src/main/java/app/core/tasks/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.core.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Date deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    DeadlineTask(String description, Date deadline) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public String toStorage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return String.format(\"D,%s,%b,%s\", this.description, this.isDone, this.deadline.toStorage());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return String.format(\"[D][%s] %s (by: %s)\", this.getStatusIcon(), this.description, this.deadline.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (other \u003d\u003d null || other.getClass() !\u003d this.getClass()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        DeadlineTask otherTask \u003d (DeadlineTask) other;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        boolean hasSameDescription \u003d this.description.equals(otherTask.description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        boolean hasSameDeadline \u003d this.deadline.equals(otherTask.deadline);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return hasSameDescription \u0026\u0026 hasSameDeadline;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 38
    }
  },
  {
    "path": "src/main/java/app/core/tasks/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.core.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "class EventTask extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Date when;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    EventTask(String description, Date when) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.when \u003d when;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public String toStorage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return String.format(\"E,%s,%b,%s\", this.description, this.isDone, this.when.toStorage());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return String.format(\"[E][%s] %s (at: %s)\", this.getStatusIcon(), this.description, this.when.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (other \u003d\u003d null || other.getClass() !\u003d this.getClass()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        EventTask otherTask \u003d (EventTask) other;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        boolean hasSameDescription \u003d this.description.equals(otherTask.description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        boolean hasSameWhen \u003d this.when.equals(otherTask.when);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return hasSameDescription \u0026\u0026 hasSameWhen;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 38
    }
  },
  {
    "path": "src/main/java/app/core/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.core.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.InvalidDateTimeFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * This class contains the information of a Task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    Task(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assert description !\u003d null : \"Description should not be null\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    String getStatusIcon() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return (isDone ? \"✓\" : \"✘\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    void setDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Creates a Task based on the format stored in storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param data Storage data"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return A new Task object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static Task fromStorage(String data) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            String[] parsedArgs \u003d data.split(\",\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            String type \u003d parsedArgs[0];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            Task output;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                Date date \u003d Date.fromStorage(parsedArgs[3]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                output \u003d new DeadlineTask(parsedArgs[1], date);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            } else if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                Date date \u003d Date.fromStorage(parsedArgs[3]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                output \u003d new EventTask(parsedArgs[1], date);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                output \u003d new TodoTask(parsedArgs[1]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            if (Boolean.parseBoolean(parsedArgs[2])) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                output.setDone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } catch (InvalidDateTimeFormatException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public abstract String toStorage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public abstract boolean equals(Object other);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 67
    }
  },
  {
    "path": "src/main/java/app/core/tasks/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.core.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.StorageFileException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import app.exceptions.DuplicatedTaskException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import app.exceptions.EmptyTaskListException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * This class stores and handles all the data related to "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * tasks in Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Initializes a new task manager. The method will attempt"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * to load from the storage if data is present."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public TaskManager() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.taskList \u003d this.storageManager.load();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Adds a todo task in the manager."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param description The description of the task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return The Task object that was created"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws StorageFileException If an error happens while saving the task list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws DuplicatedTaskException If the task is duplicated"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task addTodoTask(String description) throws StorageFileException, DuplicatedTaskException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return this.add(new TodoTask(description));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Adds a deadline task in the manager."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param description The description of the task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param deadline A Date object representing the deadline "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     *     of the task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return The Task object that was created"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws StorageFileException If an error happens while saving the task list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws DuplicatedTaskException If the task is duplicated"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public Task addDeadlineTask(String description, Date deadline)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            throws StorageFileException, DuplicatedTaskException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return this.add(new DeadlineTask(description, deadline));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Adds an event task in the manager."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param description The description of the task"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param when A Date object representing the date of "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     *     the event"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return The Task object that was created"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws StorageFileException If an error happens while saving the task list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws DuplicatedTaskException If the task is duplicated"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task addEventTask(String description, Date when) throws StorageFileException, DuplicatedTaskException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return this.add(new EventTask(description, when));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private Task add(Task task) throws StorageFileException, DuplicatedTaskException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (this.taskList.contains(task)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatedTaskException(Messages.ADD_DUPLICATED_TASK_MESSAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.storageManager.save(this.taskList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Sets a task as done."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param index The index of the task in the task manager"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return The Task object that was updated"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws IndexOutOfBoundsException If the index is out of the bounds of the task list"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws StorageFileException If an error happens while saving the task list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task setTaskDone(int index) throws IndexOutOfBoundsException, StorageFileException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Task task \u003d this.taskList.get(index - 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        task.setDone();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.storageManager.save(this.taskList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Deletes a task from the task manager."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param index The index of the task in the task manager"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return The Task object that was deleted"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws IndexOutOfBoundsException If the index is out of the bounds of the task list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws StorageFileException If an error happens while saving the task list"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task deleteTask(int index) throws IndexOutOfBoundsException, StorageFileException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Task task \u003d this.taskList.remove(index - 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.storageManager.save(this.taskList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Finds a list of tasks that matches with an input string."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param toMatch The string to match in task descriptions"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return The string representation of the list of filtered tasks that matches the input string"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws EmptyTaskListException If the task list is empty"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public String findMatchingTasks(String toMatch) throws EmptyTaskListException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        List\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            if (task.getDescription().contains(toMatch)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                filteredTasks.add(task);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (filteredTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EmptyTaskListException(Messages.FIND_NO_TASKS_MESSAGE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return convertListToString(filteredTasks);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Returns a String representation of the list of tasks."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return The string representation of the list of tasks"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws EmptyTaskListException If the task list is empty"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTasks() throws EmptyTaskListException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (this.taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new EmptyTaskListException(Messages.LIST_NO_TASK_MESSAGE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return convertListToString(this.taskList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Returns the size of the task list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return An integer representing the size of the task list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String convertListToString(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            sb.append(String.format(\"%d. %s\\n\", i + 1, taskList.get(i)));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 130,
      "-": 22
    }
  },
  {
    "path": "src/main/java/app/core/tasks/TodoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.core.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "class TodoTask extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    TodoTask(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public String toStorage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return String.format(\"T,%s,%b\", this.description, this.isDone);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return String.format(\"[T][%s] %s\", this.getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (other \u003d\u003d null || other.getClass() !\u003d this.getClass()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        TodoTask otherTask \u003d (TodoTask) other;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        boolean hasSameDescription \u003d this.description.equals(otherTask.description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return hasSameDescription;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 32
    }
  },
  {
    "path": "src/main/java/app/exceptions/BaseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * This class is the base class for all custom exceptions"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * related to Duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class BaseException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Initialises a new BaseException object with a"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * custom error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param message The error message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public BaseException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 16
    }
  },
  {
    "path": "src/main/java/app/exceptions/DuplicatedTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package app.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * This class represents the exception that is thrown"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * when the user a duplicated task is added."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatedTaskException extends BaseException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initialises a new DuplicatedTaskException object with a"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * custom error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message The error message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatedTaskException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/app/exceptions/EmptyTaskListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package app.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * This class represents the exception that is thrown"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * when the task list is empty."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmptyTaskListException extends BaseException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initialises a new EmptyTaskListException object with a"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * custom error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message The error message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public EmptyTaskListException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/app/exceptions/InvalidCharacterException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * This class represents the exception that is thrown"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * when the user uses an invalid character in the input."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class InvalidCharacterException extends BaseException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Initialises a new InvalidCharacterException object with a"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * custom error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param message The error message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public InvalidCharacterException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 16
    }
  },
  {
    "path": "src/main/java/app/exceptions/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * This class represents the exception that is thrown"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * when the user tries to use an unsupported command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class InvalidCommandException extends BaseException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Initialises a new InvalidCommandException object with a"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * custom error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param message The error message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 16
    }
  },
  {
    "path": "src/main/java/app/exceptions/InvalidDateTimeFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * This class represents the exception thrown when the user"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * enters a date that does not conform to the supported formats."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class InvalidDateTimeFormatException extends BaseException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Initialises a new InvalidDateTimeFormatException object with a"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * custom error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param message The error message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public InvalidDateTimeFormatException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 16
    }
  },
  {
    "path": "src/main/java/app/exceptions/InvalidTaskIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * This class represents the exception that is thrown when"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * the user tries to access an invalid index in the task list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class InvalidTaskIndexException extends BaseException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Initialises a new InvalidTaskIndexException object with a"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * custom error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param message The error message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public InvalidTaskIndexException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 16
    }
  },
  {
    "path": "src/main/java/app/exceptions/InvalidUsageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * This class represents the exception thrown when the user"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * fails to provide certain arguments required by the command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class InvalidUsageException extends BaseException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Initialises a new InvalidUsageException object with a"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * custom error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param message The error message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public InvalidUsageException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 16
    }
  },
  {
    "path": "src/main/java/app/exceptions/StorageFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * This class represents the exception that is thrown when"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * the program is unable to write to the storage file."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class StorageFileException extends BaseException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Initialises a new StorageFileException object with a"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * custom error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param message The error message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public StorageFileException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 16
    }
  },
  {
    "path": "src/main/java/app/util/Date.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import app.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.InvalidDateTimeFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * This class represents the dates that are present in Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public final class Date {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private DateTimeFormatter formatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Default format for input date parsing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String DEFAULT_INPUT_FORMAT \u003d \"yyyy-MM-dd HHmm\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Default format for date output."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String DEFAULT_OUTPUT_FORMAT \u003d \"MMM d yyyy hh:mma\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Default format in storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static final String DEFAULT_STORAGE_FORMAT \u003d \"yyyyMMddHHmmss\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Date(String dateTimeStr, String format) throws InvalidDateTimeFormatException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(format);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            this.date \u003d LocalDateTime.parse(dateTimeStr, formatter);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            this.formatter \u003d DateTimeFormatter.ofPattern(DEFAULT_OUTPUT_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InvalidDateTimeFormatException(String.format(Messages.INVALID_DATE_FORMAT_MESSAGE, format));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Date(LocalDateTime date, DateTimeFormatter formatter) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.formatter \u003d formatter;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Parses and creates a new Date object using the DEFAULT_INPUT_FORMAT."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param dateTimeStr Input string "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return A new Date object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws InvalidDateTimeFormatException If input string\u0027s format does not "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     *     match DEFAULT_INPUT_FORMAT"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static Date from(String dateTimeStr) throws InvalidDateTimeFormatException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new Date(dateTimeStr, DEFAULT_INPUT_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Parses and creates a new Date object using a custom format."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param dateTimeStr Input string"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param format Custom format based on DateTimeFormatter"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return A new Date object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws InvalidDateTimeFormatException If input string\u0027s format does not "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     *     match the param format."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static Date fromFormat(String dateTimeStr, String format) throws InvalidDateTimeFormatException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new Date(dateTimeStr, format);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Parses and creates a new Date object using the DEFAULT_STORAGE_FORMAT."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param dateTimeStr Input string "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return A new Date object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws InvalidDateTimeFormatException If input string\u0027s format does not "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     *     match DEFAULT_STORAGE_FORMAT"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static Date fromStorage(String dateTimeStr) throws InvalidDateTimeFormatException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new Date(dateTimeStr, DEFAULT_STORAGE_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Changes the output format to a custom format."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param outputFormat Custom format based on DateTimeFormatter"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return A new Date object with a new output formatter"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public Date withFormat(String outputFormat) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(outputFormat);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new Date(this.date, formatter);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Returns a String reresentation of the Date for use in Storage."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return a String representation of the Date using the DEFAULT_STORAGE_FORMAT"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public String toStorage() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return this.date.format(DateTimeFormatter.ofPattern(DEFAULT_STORAGE_FORMAT));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Returns a String representation of the Date object."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return this.date.format(this.formatter);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (other \u003d\u003d null || other.getClass() !\u003d this.getClass()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Date otherDate \u003d (Date) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return this.date.equals(otherDate.date);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 119,
      "-": 2
    }
  },
  {
    "path": "src/main/java/app/util/InputValidator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.InvalidCharacterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * This class checks for any invalid character written into the input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public final class InputValidator {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static Set\u003cCharacter\u003e invalidCharacters \u003d new HashSet\u003c\u003e(Arrays.asList(\u0027,\u0027));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Validates a string against a set of invalid characters."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param input The input to be tested."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @throws InvalidCharacterException When the input contains an invalid character"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static void validate(String input) throws InvalidCharacterException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        for (int i \u003d 0; i \u003c input.length(); i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            char character \u003d input.charAt(i);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            if (invalidCharacters.contains(character)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                throw new InvalidCharacterException(String.format(Messages.INVALID_CHARACTER_MESSAGE, character));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 28
    }
  },
  {
    "path": "src/main/java/app/util/Pair.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * This class represents a data structure that contains two values."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * This is similar to a tuple in other programming languages."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class Pair {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    protected Object firstValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    protected Object secondValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Initializes a new Pair object with two values."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param firstValue The first value of the object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param secondValue The second value of the object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public Pair(Object firstValue, Object secondValue) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.firstValue \u003d firstValue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.secondValue \u003d secondValue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Returns the first value of the Pair object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return the first value of the Pair object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public Object getFirstValue() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return this.firstValue;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Returns the second value of the Pair object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return the second value of the Pair object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public Object getSecondValue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return this.secondValue;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 36
    }
  },
  {
    "path": "src/main/java/app/util/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * This class provides various utility functionalities "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * to parse a String."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public final class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Parses an input string by splitting the string by the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * first instance of a whitespace. Returns a StringPair object "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * containing the first word and the rest of the string."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param input The input string"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return A StringPair object containing the first word and "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     *     the rest of the string."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static StringPair parse(String input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String command \u003d input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String args \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        int splitIndex \u003d input.indexOf(\" \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        if (splitIndex !\u003d -1) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            command \u003d input.substring(0, splitIndex);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            args \u003d input.substring(splitIndex + 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return new StringPair(command.trim(), args.trim());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 28
    }
  },
  {
    "path": "src/main/java/app/util/StringPair.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * This class is a special child of the Pair class,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * where it only holds two String values."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public final class StringPair extends Pair {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Initializes a new StringPair object with two strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param firstValue The first string"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param secondValue The second string"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public StringPair(String firstValue, String secondValue) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        super(firstValue, secondValue);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Returns the first string of the StringPair object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return the first string of the StringPair object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public String getFirstValue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return String.valueOf(this.firstValue);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    * Returns the second string of the StringPair object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    * @return the second string of the StringPair object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public String getSecondValue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return String.valueOf(this.secondValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 35
    }
  },
  {
    "path": "src/main/java/views/ChatBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package views;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class ChatBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private void setDialog(String text) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private void setImage(Image img) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Circle circleClip \u003d new Circle(30, 30, 30);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.displayPicture.setClip(circleClip);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param node The node to flip."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return The flipped node."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static HBox flip(HBox node) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(node.getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        node.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return node;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Creates a user-sided ChatBox based on the input text and image."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param text The text to show."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param img The display image to show."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return The node to be displayed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static HBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            HBox node \u003d ChatBox.getDialog(text, img);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return node;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * Creates a duke-sided ChatBox based on the input text and image."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param text The text to show."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @param img The display image to show."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     * @return The node to be displayed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alloystory"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public static HBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            HBox node \u003d ChatBox.getDialog(text, img);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            node \u003d ChatBox.flip(node);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return node;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private static HBox getDialog(String text, Image img) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(ChatBox.class.getResource(\"/views/ChatBox.fxml\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        HBox node \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        fxmlLoader.\u003cChatBox\u003egetController().setDialog(text);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        fxmlLoader.\u003cChatBox\u003egetController().setImage(img);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        return node;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 95
    }
  },
  {
    "path": "src/main/java/views/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package views;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.Duke;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public final class Launcher extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Launcher.class.getResource(\"/views/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            Scene scene \u003d new Scene(fxmlLoader.load());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(new Duke());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            stage.setMinWidth(stage.getWidth());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            stage.setMinHeight(stage.getHeight());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 29
    }
  },
  {
    "path": "src/main/java/views/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package views;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.Duke;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.BaseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.util.Pair;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class MainWindow {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.jpg\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Janet.jpg\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void setDuke(Duke duke) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private void renderUser(String message) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            ChatBox.getUserDialog(message, this.userImage)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private void renderDuke(String message) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            ChatBox.getDukeDialog(message, this.dukeImage)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    // -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        this.renderDuke(Messages.WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String input \u003d this.userInput.getText();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        boolean shutdown \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            Pair result \u003d this.duke.executeInput(input);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            output \u003d (String) result.getFirstValue();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            shutdown \u003d (boolean) result.getSecondValue();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } catch (BaseException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            output \u003d e.getMessage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            output \u003d Messages.UNEXPECTED_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            this.renderUser(input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            this.renderDuke(output);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            if (shutdown) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                PauseTransition pause \u003d new PauseTransition(Duration.seconds(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                pause.setOnFinished(event -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                    Platform.exit();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                    System.exit(0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                pause.play();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 87
    }
  },
  {
    "path": "src/main/resources/views/ChatBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003cjavafx.scene.layout.HBox alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"600.0\" maxWidth\u003d\"1.7976931348623157E308\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"390.0\" spacing\u003d\"10.0\" style\u003d\"-fx-background-color: #1b262c;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"views.ChatBox\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "      \u003cRegion prefWidth\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" maxWidth\u003d\"500.0\" minHeight\u003d\"60.0\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: #bbe1fa; -fx-background-radius: 5;\" text\u003d\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque sed fringilla mi. Donec mattis, turpis aliquam auctor cursus, lacus magna bibendum lectus, sollicitudin luctus neque eros sed ex. Vestibulum at ipsum vel tellus aliquet pulvinar. Phasellus nisl elit, mattis in posuere sit amet, tincidunt posuere eros. In eu pulvinar libero. Phasellus elementum libero risus, in vulputate diam consectetur id. Praesent ut felis at massa auctor cursus vel id nisi. Etiam feugiat commodo arcu vel sodales. Phasellus non eros quis mauris facilisis pharetra at at massa. Sed placerat tellus ac erat gravida euismod. Etiam varius augue diam, eget tempor mi eleifend nec. Mauris imperdiet ante malesuada, volutpat ex eu, vestibulum ante.Aliquam a volutpat magna. Morbi interdum finibus sem, id condimentum nulla malesuada egestas. Sed tortor sapien, consectetur id nibh at, imperdiet iaculis dui. Aenean sit amet turpis pellentesque, porta est vitae, egestas leo. Cras consectetur in ligula vel faucibus. Pellentesque consequat interdum accumsan. Mauris feugiat ex vel elementum bibendum.\" textOverrun\u003d\"WORD_ELLIPSIS\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            \u003cFont size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"60.0\" fitWidth\u003d\"60.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" smooth\u003d\"false\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            \u003cImage url\u003d\"@../images/UserPlaceholder.jpg\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "         \u003c/image\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c/javafx.scene.layout.HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "alloystory": 32
    }
  },
  {
    "path": "src/main/resources/views/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: black;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"views.MainWindow\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "      \u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "          \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" pannable\u003d\"true\" prefHeight\u003d\"540.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #1b262c;\" vbarPolicy\u003d\"ALWAYS\" vvalue\u003d\"1.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "              \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"375.0\" spacing\u003d\"5.0\" style\u003d\"-fx-background-color: #1b262c;\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                  \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "          \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            \u003cHBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"60.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #0f4c75;\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                \u003cTextField fx:id\u003d\"userInput\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"60.0\" prefWidth\u003d\"320.0\" promptText\u003d\"Enter a command!\" style\u003d\"-fx-background-color: #0f4c75; -fx-text-fill: white;\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                        \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                     \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                     \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                  \u003c/TextField\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "                \u003cButton fx:id\u003d\"sendButton\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"60.0\" prefWidth\u003d\"80.0\" style\u003d\"-fx-background-color: #3282b8;\" text\u003d\"Send\" HBox.hgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "alloystory": 40
    }
  },
  {
    "path": "src/test/java/app/util/DateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import app.exceptions.InvalidDateTimeFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void createDate_correctDefaultFormat() throws InvalidDateTimeFormatException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Date output \u003d Date.from(\"2019-01-01 1800\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(\"Jan 1 2019 06:00PM\", output.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void createDate_wrongDefaultFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            Date.from(\"2019-01-01\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } catch (InvalidDateTimeFormatException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            assertEquals(\"Ah! I can only understand this format: yyyy-MM-dd HHmm\", e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void createDate_correctAlternateFormat() throws InvalidDateTimeFormatException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Date output \u003d Date.fromFormat(\"01-01-2019 0000\", \"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(\"Jan 1 2019 12:00AM\", output.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void createDate_wrongAlternateFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            Date.fromFormat(\"2019-01-1\", \"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        } catch (InvalidDateTimeFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            assertEquals(\"Ah! I can only understand this format: dd-MM-yyyy HHmm\", e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void outputDate_withFormat() throws InvalidDateTimeFormatException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        Date output \u003d Date.from(\"2019-01-01 1800\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alloystory"
        },
        "content": "            .withFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(\"01-01-2019\", output.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 44
    }
  },
  {
    "path": "src/test/java/app/util/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "package app.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void parseStringToPair_multipleWords() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        StringPair output \u003d Parser.parse(\"test string\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(\"test\", output.getFirstValue());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(\"string\", output.getSecondValue());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    public void parseStringToPair_oneWord() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        StringPair output \u003d Parser.parse(\"test\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(\"test\", output.getFirstValue());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        assertEquals(\"\", output.getSecondValue());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alloystory": 21
    }
  },
  {
    "path": "text-ui-testing/test_script.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alloystory"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alloystory"
        },
        "content": "# -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alloystory"
        },
        "content": "# Step 1: Compiling"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alloystory"
        },
        "content": "# Create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alloystory"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alloystory"
        },
        "content": "then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alloystory"
        },
        "content": "fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alloystory"
        },
        "content": "# Compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alloystory"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Main.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alloystory"
        },
        "content": "then"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alloystory"
        },
        "content": "fi"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alloystory"
        },
        "content": "# -----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alloystory"
        },
        "content": "# Step 2: Testing"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alloystory"
        },
        "content": "for dir in */;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alloystory"
        },
        "content": "do"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    # Delete output from previous run"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    if [ -e \"$dir/actual.txt\" ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    then"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        rm \"$dir/actual.txt\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    # Run the program, feed commands from input.txt file and redirect the output to the actual.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    java -cp ../bin Main \u003c \"$dir/input.txt\" \u003e \"$dir/actual.txt\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alloystory"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    # Compare the output to the expected output"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    diff \"$dir/actual.txt\" \"$dir/expected.txt\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    then"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        echo \"$dir: PASSED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    else"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alloystory"
        },
        "content": "        echo \"$dir: FAILED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alloystory"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alloystory"
        },
        "content": "done"
      }
    ],
    "authorContributionMap": {
      "alloystory": 39
    }
  }
]
