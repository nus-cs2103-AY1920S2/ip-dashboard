[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    archiveVersion \u003d \"0.1\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "test {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "grrrrnt": 37,
      "-": 18
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * Represents a deadline task. A \u003ccode\u003eDeadline\u003c/code\u003e object corresponds to a"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * deadline task represented by task description and date-time information."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    protected String dayTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public Deadline(String description, String dayTime) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        this.dayTime \u003d Parser.parseTime(dayTime);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Returns deadline day (and time)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @return Day and time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public String getDayTime() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return dayTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "grrrrnt": 22
    }
  },
  {
    "path": "src/main/java/DeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "public class DeadlineException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public DeadlineException() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public String getMessage(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return \"\\u2639 OOPS!!! The description of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "grrrrnt": 10
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "grrrrnt": 47
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/happyman.jpg\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/happyduke.jpeg\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    static private Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    static private Storage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    static private TaskList taskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    static private Parser parser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    static String dataFilePath \u003d Paths.get(Paths.get(System.getProperty(\"user.dir\")).toString(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            \"data/task_data.txt\").toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        storage \u003d new Storage(dataFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        ui.print(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        ui.print(\"NOTE: For all date/time input, please use the DD-MM-YYYY HH:MM format.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            taskList.setList(storage.getList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            taskList \u003d new TaskList(ui, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        parser \u003d new Parser(taskList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        ui.print(\"Hello! I\u0027m Duke the dude.\\nHow can I serve you?\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        ui.setInput(System.in);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            input \u003d ui.getLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                    exit();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                    parser.parseInput(input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                ui.showError(ex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Prints goodbye message."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public static void exit() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        ui.print(\"Bye. Hope to serve you again soon!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        );"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private String getResponse(String input) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "grrrrnt": 175,
      "-": 8
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public String getMessage(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return \"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "grrrrnt": 10
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * Represents a event task. An \u003ccode\u003eEvent\u003c/code\u003e object corresponds to an"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * event task represented by task description and date-time information."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    protected String dayTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public Event(String description, String dayTime) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        this.dayTime \u003d Parser.parseTime(dayTime);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Returns event day (and time)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @return Day and time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public String getDayTime() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return dayTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "grrrrnt": 22
    }
  },
  {
    "path": "src/main/java/EventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "public class EventException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public EventException() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public String getMessage(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return \"\\u2639 OOPS!!! The description of an event cannot be empty.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "grrrrnt": 10
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "grrrrnt": 10
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * Parses user input and translates it into action. A \u003ccode\u003eParser\u003c/code\u003e object is associated"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * with a \u003ccode\u003eTaskList\u003c/code\u003e object on which the action is applied."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public Parser(TaskList taskList) { this.taskList \u003d taskList; }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Evaluates user input using first word (instruction)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Adds or removes tasks from task list according to instruction details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @param input User string input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @throws DukeException  If first word of input (instruction) is unrecognised."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public void parseInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            taskList.showList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        } else if (input.split(\" \")[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            int taskNum \u003d Integer.parseInt(input.split(\" \")[1]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            taskList.done(taskNum);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        } else if (input.split(\" \")[0].equals(\"todo\") ||"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                input.split(\" \")[0].equals(\"event\") ||"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                input.split(\" \")[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            taskList.add(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        } else if (input.split(\" \")[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            int taskNum \u003d Integer.parseInt(input.split(\" \")[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            taskList.delete(taskNum);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        } else if (input.split(\" \")[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            String query \u003d input.split(\" \")[1];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            taskList.find(query);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Formats date and time from user input and returns formatted string."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @param dayTime User input string."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @return Formatted date-and-time string."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public static String parseTime(String dayTime) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        String s;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (dayTime.split(\" \").length \u003e\u003d 2) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            LocalDateTime dt \u003d LocalDateTime.parse(dayTime, formatter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            s \u003d dt.format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM, FormatStyle.SHORT));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            LocalDate d \u003d LocalDate.parse(dayTime, formatter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            s \u003d d.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "grrrrnt": 62
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * Represents a collection of methods to read and write files in the data folder."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * A \u003ccode\u003eStorage\u003c/code\u003e object corresponds to a file path represented as a String"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * and a \u003ccode\u003eFile\u003c/code\u003e object that accesses the file at the path."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private File f;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        f \u003d new File(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Retrieves and returns list of tasks from data folder."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @return List of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @throws FileNotFoundException If storage file cannot be found in data folder."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public List\u003cTask\u003e getList() throws FileNotFoundException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            String str \u003d sc.nextLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            String[] elements \u003d str.split(\" \\\\| \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            Task t \u003d new Task();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            switch (elements[0]) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                t \u003d new Todo(elements[2]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                t \u003d new Event(elements[2], elements[3]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                t \u003d new Deadline(elements[2], elements[3]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            if (Integer.parseInt(elements[1]) \u003d\u003d 1)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                t.markAsDone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            list.add(t);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Updates storage file in storage folder with list of tasks."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @param list List of tasks."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @throws IOException If there is an error with writing to storage file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public void writeTaskList(List\u003cTask\u003e list) throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        for (Task t : list)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            fw.write(taskToString(t));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private static String taskToString(Task t) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        String str \u003d \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        int done \u003d t.getIsDone() ? 1 : 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (t instanceof Todo)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            str \u003d \"T | \" + done + \" | \" + t.getDescription();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (t instanceof Event)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            str \u003d \"E | \" + done + \" | \" + t.getDescription() + \" | \" + ((Event) t).getDayTime();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (t instanceof Deadline)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            str \u003d \"D | \" + done + \" | \" + t.getDescription() + \" | \" + ((Deadline) t).getDayTime();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return str + \"\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "grrrrnt": 77
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * Represents a task. A \u003ccode\u003eTask\u003c/code\u003e object corresponds to a generic task represented by"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * task description and a boolean flag identifying if the task has been completed."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public Task() {}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Returns status of task as an icon, represented in a string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @return Status of task as a string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return (isDone ? \"OK!\" : \" X \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Returns task description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @return Task description."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public String getDescription() { return description; }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Returns status of task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @return Task status."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public boolean getIsDone() { return isDone; }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Change status of task to done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        String toReturn \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (this instanceof Todo) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            toReturn \u003d \"[T][\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        } else if (this instanceof Event) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            toReturn \u003d \"[E][\" + getStatusIcon() + \"] \" + description + \" (at: \" + ((Event) this).getDayTime() + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        } else if (this instanceof Deadline) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            toReturn \u003d \"[D][\" + getStatusIcon() + \"] \" + description + \" (by: \" + ((Deadline) this).getDayTime() + \")\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "grrrrnt": 58
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * Represents a list of tasks. A \u003ccode\u003eTaskList\u003c/code\u003e object corresponds to a"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * list of \u003ccode\u003eTask\u003c/code\u003e objects which it represents, a \u003ccode\u003eUi\u003c/code\u003e object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * to facilitate user input and output and a \u003ccode\u003eStorage\u003c/code\u003e object to access"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * storage file in the data folder."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public TaskList(Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Sets task list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @param list Task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public void setList(List\u003cTask\u003e list) { taskList \u003d list; }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Adds task described in user input to task list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @param s Task to add."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @throws DukeException If string format is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public void add(String s) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        String typeOfTask \u003d s.split(\" \", 2)[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        Task toAdd \u003d new Task();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        if (typeOfTask.equals(\"todo\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                String task \u003d s.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                toAdd \u003d new Todo(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                throw new TodoException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        } else if (typeOfTask.equals(\"event\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                String task \u003d s.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                String[] taskParts \u003d task.split(\" /at \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                toAdd \u003d new Event(taskParts[0], taskParts[1]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                throw new EventException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        } else if (typeOfTask.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                String task \u003d s.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                String[] taskParts \u003d task.split(\" /by \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                toAdd \u003d new Deadline(taskParts[0], taskParts[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                throw new DeadlineException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        taskList.add(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        ui.print(\"Gotcha! Added this task:\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                + \"  \" + toAdd + \"\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                + \"Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            storage.writeTaskList(taskList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Deletes task at index i (starts from 1) from task list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @param i Index of task to remove."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public void delete(int i) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        Task t \u003d taskList.remove(i-1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        ui.print(\"Poof! This task is gone:\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                +  \"  \" + t + \"\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                + \"Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            storage.writeTaskList(taskList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Displays tasks in task list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public void showList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        ui.print(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            ui.print(count + \".\" + t);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Finds and displays tasks that contain the query string."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @param query The query string."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public void find(String query) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        ui.print(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            if (t.toString().contains(query)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                ui.print(count + \".\" + t);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Marks task at index i (starts at 1) in task list as done."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @param i Index of task to mark as done."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public void done(int i) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        taskList.get(i-1).markAsDone();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        ui.print(\"Nice! I\u0027ve marked this task as done: \\n\" +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "                \"  \" + taskList.get(i-1));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            storage.writeTaskList(taskList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "grrrrnt": 133
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * Represents a todo task. A \u003ccode\u003eTodo\u003c/code\u003e object corresponds to a"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * todo task represented by task description."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "grrrrnt": 10
    }
  },
  {
    "path": "src/main/java/TodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "public class TodoException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public TodoException() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public String getMessage(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return \"\\u2639 OOPS!!! The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "grrrrnt": 10
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " * Represents an interface to facilitate user input and output."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public Ui() {}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Prints string."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @param s String to print."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public void print(String s) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Prints error message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @param e Exception to print."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public void showError(Exception e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        System.out.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Sets input stream."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @param in Input stream to set."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public void setInput(InputStream in) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        sc \u003d new Scanner(in);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * Returns next line from input stream."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     * @return Next line from input stream."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public String getLine() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "grrrrnt": 47
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public void testParseTime() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        assertEquals(\"4 Jun 2000, 6:09 PM\", Parser.parseTime(\"04-06-2000 18:09\"));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "grrrrnt": 11
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        assertEquals(\"[T][ X ] eat apples\", new Todo(\"eat apples\").toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    public void testStatusIcon() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        Todo eat \u003d new Todo(\"eat\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        assertEquals(\" X \", eat.getStatusIcon());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        eat.markAsDone();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "        assertEquals(\"OK!\", eat.getStatusIcon());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "grrrrnt": 19
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "todo buy fruits"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "grrrrnt": 3
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "grrrrnt"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "grrrrnt": 21
    }
  }
]
