[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "# Setting up [![Build Status](https://travis-ci.com/amrl/duke.svg?branch\u003dmaster)](https://travis-ci.com/amrl/duke)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "amrl": 1,
      "-": 38
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "//    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "//checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "//    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "//}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "    archiveVersion \u003d \"0.2\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "test {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "//    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 37,
      "-": 20
    }
  },
  {
    "path": "src/main/java/duke/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Valid commands for Duke task management."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "public enum Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "    BYE, DONE, TODO, DEADLINE, EVENT, LIST, DELETE, FIND, TAG"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 8
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Deadline contains information about a given task with description and date of deadline."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Deadline(String description, LocalDate by) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private String getFormattedDate() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return this.by.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return String.format(\"[D]%s (by: %s)%s\", super.toString(), this.getFormattedDate(), super.getTags());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "    protected String getFileFormattedLine() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return String.format(\"D|%s|%s|%s\", super.isDone ? \"1\" : \"0\", this.description, this.by);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 31
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns DialogBox for Duke response (flipped)."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param text Duke response text."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param img Duke display image."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return DialogBox for Duke response (flipped)."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amrl"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 68
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Duke is a task management assistant. It accepts user commands with the appropriate parameters and time"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": " * information (if any). It can add/delete tasks, mark tasks as done, and list all tasks. Upon exit, the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": " * tasks will be saved to a data file. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "        new Duke(\"data/tasks.txt\").runCli();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Constructs a Duke object. An attempt will be made to load in tasks from the default file. If the file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * does not exist or cannot be accessed, an empty task list will be loaded."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "        // load saved tasks from file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "            storage \u003d new Storage(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "            tasks \u003d new TaskList(storage.loadTasks());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "            ui \u003d new Ui(tasks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "            System.out.println(\"Error: Cannot read or write to file\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "            ui \u003d new Ui(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Constructs a Duke object. An attempt will be made to load in tasks from the file specified. If the file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * does not exist or cannot be accessed, an empty task list will be loaded."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param filePath Path of file containing saved tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": "        // load saved tasks from file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "            tasks \u003d new TaskList(storage.loadTasks());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "            ui \u003d new Ui(tasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": "            System.out.println(\"Error: Cannot read or write to file\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "            ui \u003d new Ui(tasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Starts the Duke task management assistant in CLI mode. The user will input commands and the appropriate"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * actions will be performed. Enter \"bye\" to exit the program."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void runCli() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "        System.out.println(ui.showGreeting());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrl"
        },
        "content": "        label:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "            String input \u003d ui.getInput();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amrl"
        },
        "content": "            "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amrl"
        },
        "content": "                Parser instruction \u003d new Parser(input);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amrl"
        },
        "content": "                Command command \u003d instruction.getCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amrl"
        },
        "content": "                switch (command) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "                case BYE:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": "                    break label;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": "                case DONE:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amrl"
        },
        "content": "                    System.out.println(setDone(Integer.parseInt(instruction.getParameters())));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amrl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrl"
        },
        "content": "                case TODO:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amrl"
        },
        "content": "                    System.out.println(addTask(new Todo(instruction.getParameters())));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amrl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amrl"
        },
        "content": "                case DEADLINE:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amrl"
        },
        "content": "                    System.out.println(addTask("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amrl"
        },
        "content": "                            new Deadline(instruction.getParameters(), instruction.getDate())));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amrl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amrl"
        },
        "content": "                case EVENT:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amrl"
        },
        "content": "                    System.out.println(addTask("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amrl"
        },
        "content": "                            new Event(instruction.getParameters(), instruction.getDate())));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amrl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amrl"
        },
        "content": "                case LIST:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amrl"
        },
        "content": "                    System.out.println(ui.showTasks());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amrl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amrl"
        },
        "content": "                case DELETE:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amrl"
        },
        "content": "                    System.out.println(deleteTask(Integer.parseInt(instruction.getParameters())));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amrl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amrl"
        },
        "content": "                case FIND:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amrl"
        },
        "content": "                    System.out.println(ui.showFound(tasks.findTasks(instruction.getParameters())));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amrl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amrl"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amrl"
        },
        "content": "                    ;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amrl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amrl"
        },
        "content": "            } catch (InvalidInstructionException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amrl"
        },
        "content": "                System.out.format(\"Error: %s. Please try again.%n%n\", e.getMessage());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amrl"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amrl"
        },
        "content": "                System.out.println(\"Error: Unable to write to file.\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amrl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amrl"
        },
        "content": "        System.out.println(ui.showFarewell());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Processes instruction given by user. Used by GUI."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param input Instruction given by user."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return Response (or error message) according to instruction processed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amrl"
        },
        "content": "    String processInstruction(String input) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amrl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amrl"
        },
        "content": "            Parser instruction \u003d new Parser(input);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amrl"
        },
        "content": "            Command command \u003d instruction.getCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amrl"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amrl"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amrl"
        },
        "content": "                return ui.showFarewell();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amrl"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amrl"
        },
        "content": "                return setDone(Integer.parseInt(instruction.getParameters()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amrl"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amrl"
        },
        "content": "                return addTask(new Todo(instruction.getParameters()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amrl"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amrl"
        },
        "content": "                return addTask(new Deadline(instruction.getParameters(), instruction.getDate()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amrl"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amrl"
        },
        "content": "                return addTask(new Event(instruction.getParameters(), instruction.getDate()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amrl"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amrl"
        },
        "content": "                return ui.showTasks();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amrl"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amrl"
        },
        "content": "                return deleteTask(Integer.parseInt(instruction.getParameters()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amrl"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amrl"
        },
        "content": "                return ui.showFound(tasks.findTasks(instruction.getParameters()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amrl"
        },
        "content": "            case TAG:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amrl"
        },
        "content": "                return addTag(instruction.getParameters());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amrl"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "amrl"
        },
        "content": "                return \"\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "amrl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "amrl"
        },
        "content": "            "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "amrl"
        },
        "content": "        } catch (InvalidInstructionException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return String.format(\"Error: %s. Please try again.%n%n\", e.getMessage());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amrl"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return \"Error: Unable to write to file.\\n\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "amrl"
        },
        "content": "    "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private String setDone(int taskNum) throws InvalidInstructionException, IOException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "amrl"
        },
        "content": "        tasks.setAsDone(taskNum);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "amrl"
        },
        "content": "        storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return ui.showSetAsDone(tasks.getTask(taskNum));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "amrl"
        },
        "content": "    "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private String addTask(Task task) throws IOException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "amrl"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "amrl"
        },
        "content": "        storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return ui.showAddTask(task);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "amrl"
        },
        "content": "    "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private String deleteTask(int taskNum) throws InvalidInstructionException, IOException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Task delTask \u003d tasks.getTask(taskNum);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "amrl"
        },
        "content": "        tasks.deleteTask(taskNum);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "amrl"
        },
        "content": "        storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return ui.showDeleteTask(delTask);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "amrl"
        },
        "content": "    "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private String addTag(String parameters) throws InvalidInstructionException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "amrl"
        },
        "content": "        // todo: move logic to Parser"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "amrl"
        },
        "content": "        String[] paramsList \u003d parameters.split(\" \");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (paramsList.length \u003c 2) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new InvalidInstructionException(\"Not enough parameters given\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "amrl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "amrl"
        },
        "content": "            int taskNum \u003d Integer.parseInt(paramsList[0]);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "amrl"
        },
        "content": "            tasks.getTask(taskNum).addTag(paramsList[1]);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return ui.showTagTask(tasks.getTask(taskNum));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "amrl"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new InvalidInstructionException(\"Task number given is not an integer\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 185
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 8
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Event contains information about a given task with description and date of event."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "    protected LocalDate at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Event(String description, LocalDate at) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private String getFormattedDate() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return this.at.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return String.format(\"[E]%s (at: %s)%s\", super.toString(), this.getFormattedDate(), super.getTags());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "    protected String getFileFormattedLine() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return String.format(\"E|%s|%s|%s\", super.isDone ? \"1\" : \"0\", this.description, this.at);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 31
    }
  },
  {
    "path": "src/main/java/duke/InvalidInstructionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class InvalidInstructionException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public InvalidInstructionException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 8
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 13
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "//@Override"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 31
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "        String response \u003d duke.processInstruction(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 54
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Parser decodes user given instruction to determine the appropriate action to be taken by Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Command command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private String parameters;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Constructs a Parser object. Attempts to extract the different sections of the specified instruction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * into the command, parameters, and date (if any)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param instruction Input from user as instructions to Duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @throws InvalidInstructionException If specified instruction is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Parser(String instruction) throws InvalidInstructionException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.command \u003d extractCommand(instruction);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (this.command \u003d\u003d Command.DONE || this.command \u003d\u003d Command.DELETE) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "                this.parameters \u003d String.valueOf(Integer.parseInt(extractFirstParam(instruction)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "                throw new InvalidInstructionException(\"Task number given is not an integer\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "        } else if (this.command \u003d\u003d Command.TODO || this.command \u003d\u003d Command.TAG) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "            this.parameters \u003d extractDescription(instruction);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "        } else if (this.command \u003d\u003d Command.DEADLINE || this.command \u003d\u003d Command.EVENT) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "            this.parameters \u003d extractDescription(instruction);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "            this.date \u003d extractDate(instruction);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "        } else if (this.command \u003d\u003d Command.FIND) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "            this.parameters \u003d extractFirstParam(instruction);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Gets the command from the instruction."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return Instruction command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Gets the parameters from the instruction [after command, before time flag (if any)]."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return Instruction parameters."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public String getParameters() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return this.parameters;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Gets the date from the instruction. "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return Instruction date."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "    "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static Command extractCommand(String input) throws InvalidInstructionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amrl"
        },
        "content": "        String command \u003d (input.split(\" \")[0]).toLowerCase();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amrl"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amrl"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return Command.BYE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return Command.DONE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amrl"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return Command.TODO;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrl"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return Command.DEADLINE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amrl"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return Command.EVENT;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amrl"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return Command.LIST;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amrl"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return Command.DELETE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amrl"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return Command.FIND;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amrl"
        },
        "content": "        case \"tag\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return Command.TAG;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amrl"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new InvalidInstructionException("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amrl"
        },
        "content": "                    String.format(\"Command \\\"%s\\\" is not recognized\", command));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static String extractDescription(String input) throws InvalidInstructionException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amrl"
        },
        "content": "        String[] inputArr \u003d input.split(\" \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (inputArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new InvalidInstructionException(\"No description given\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amrl"
        },
        "content": "        String descPortion \u003d input.split(\" /\")[0];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amrl"
        },
        "content": "        String[] descPortionArr \u003d descPortion.split(\" \");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amrl"
        },
        "content": "        String[] descArr \u003d Arrays.copyOfRange(descPortionArr, 1, descPortionArr.length);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return String.join(\" \", descArr);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static LocalDate extractDate(String input) throws InvalidInstructionException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amrl"
        },
        "content": "        String[] inputArr \u003d input.split(\" /\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (inputArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new InvalidInstructionException(\"No time flag (/by /at) given\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amrl"
        },
        "content": "        String datePortion \u003d inputArr[1];"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amrl"
        },
        "content": "        String[] datePortionArr \u003d datePortion.split(\" \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (datePortionArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new InvalidInstructionException(\"No timing given\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return LocalDate.parse(datePortionArr[1]);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static String extractFirstParam(String input) throws InvalidInstructionException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amrl"
        },
        "content": "        String[] inputArr \u003d input.split(\" \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (inputArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new InvalidInstructionException(\"No parameters given\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return input.split(\" \")[1];"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 134
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Storage handles the writing and reading of tasks to and from a specified file. It can convert the tasks"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": " * in file line format to Task objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private ArrayList\u003cString\u003e lines;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Constructs a Storage object which stores the tasks saved in the specified file as elements in a list,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * still in the file line format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param filePath Path of file containing saved tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @throws IOException If an I/O error occurred."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Storage(String filePath) throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "        // populate array with lines from file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "        // create empty file if file does not exist"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (!file.createNewFile()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "                lines.add(sc.nextLine());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "            sc.close();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Loads in tasks from the given file, converts them to Task objects, and stores them into a list. The"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * list is then returned."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return List of saved tasks from file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public ArrayList\u003cTask\u003e loadTasks() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "        for (String line : this.lines) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "            String[] lineArr \u003d line.split(\"\\\\|\");  // escape special char |"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "            "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "            String type \u003d lineArr[0];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "            String doneStatus \u003d lineArr[1];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "            String description \u003d lineArr[2];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "            "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "            if (type.equals(\"T\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "                task \u003d new Todo(description);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": "            } else if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrl"
        },
        "content": "                task \u003d new Deadline(description, LocalDate.parse(lineArr[3]));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "                task \u003d new Event(description, LocalDate.parse(lineArr[3]));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amrl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amrl"
        },
        "content": "            if (doneStatus.equals(\"1\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amrl"
        },
        "content": "                task.isDone \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amrl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Writes the tasks from the specified tasks list into the given file, in file line format."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @throws IOException If an I/O error occurred."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void writeToFile(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amrl"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.filePath, false);  // overwrite entire file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amrl"
        },
        "content": "        for (Task line : taskList.getList()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amrl"
        },
        "content": "            fw.append(line.getFileFormattedLine()).append(System.lineSeparator());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amrl"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amrl"
        },
        "content": "    "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amrl"
        },
        "content": "    // todo: write/read task tags to/from file "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 92
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Task contains information about a given task, including its description and done status."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "    protected ArrayList\u003cString\u003e tags;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Constructs a Task object. Starts out as undone."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Gets the icon associated with the done status of the task. Check-mark for done and cross for undone."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return Done status icon."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");  // return tick or X symbols"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Gets the description of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return Task description."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Marks the task as being done."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns a string representing the task in the format for saving into a file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return Task represented as a string for saving into a file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "    protected String getFileFormattedLine() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return String.format(\"G|%s|%s\", this.isDone ? \"1\" : \"0\", this.description);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns a string representation of the task including its done status icon and description."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return String representing the task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amrl"
        },
        "content": "    "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amrl"
        },
        "content": "    protected String getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return (this.tags.isEmpty() ? \"\" : \" \" + String.join(\" \", this.tags));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "    "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": "    protected void addTag(String tag) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.tags.add(\"#\" + tag);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 75
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": " * TaskList represents a list of tasks and stores Task objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Constructs a TaskList object. The tasks list will be empty."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Constructs a TaskList object. Initializes the tasks list with the tasks in the specified list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns the task in the specified position of the tasks list. "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param taskNum Position of required task in the tasks list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return Required task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @throws InvalidInstructionException If specified position is out of range in the tasks list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Task getTask(int taskNum) throws InvalidInstructionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (taskNum \u003c\u003d 0 || taskNum \u003e tasks.size()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new InvalidInstructionException(String.format(\"Task #%d does not exist\", taskNum));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assert taskNum \u003e 0 \u0026\u0026 taskNum \u003c\u003d tasks.size() : \"task number is invalid\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return tasks.get(taskNum - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns the number of tasks in the tasks list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return Number of tasks in tasks list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns tasks list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return Tasks list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Sets the task at the specified position in the tasks list as done."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param taskNum Position of done task in the tasks list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @throws InvalidInstructionException If specified position is out of range in the tasks list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void setAsDone(int taskNum) throws InvalidInstructionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (taskNum \u003c\u003d 0 || taskNum \u003e tasks.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new InvalidInstructionException(String.format(\"Task #%d does not exist\", taskNum));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assert taskNum \u003e 0 \u0026\u0026 taskNum \u003c\u003d tasks.size() : \"task number is invalid\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.tasks.get(taskNum - 1).markAsDone();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Adds specified task to the tasks list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param task Task to be added to the tasks list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Deletes task at the specified position in the tasks list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param taskNum Position of task to be deleted in the tasks list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @throws InvalidInstructionException If specified position is out of range in the tasks list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void deleteTask(int taskNum) throws InvalidInstructionException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (taskNum \u003c\u003d 0 || taskNum \u003e tasks.size()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new InvalidInstructionException(String.format(\"Task #%d does not exist\", taskNum));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assert taskNum \u003e 0 \u0026\u0026 taskNum \u003c\u003d tasks.size() : \"task number is invalid\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.tasks.remove(taskNum - 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Finds tasks in the tasks list whose description contain the specified search term. "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param searchTerm Keyword to be searched for."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return List of tasks whose description contain the specified search term."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public ArrayList\u003cTask\u003e findTasks(String searchTerm) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ArrayList\u003cTask\u003e matchedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amrl"
        },
        "content": "        for (Task task : this.tasks) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amrl"
        },
        "content": "            if (task.getDescription().contains(searchTerm)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amrl"
        },
        "content": "                matchedTasks.add(task);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amrl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return matchedTasks;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 117
    }
  },
  {
    "path": "src/main/java/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Todo contains information about a given task with description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return String.format(\"[T]%s%s\", super.toString(), super.getTags());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    protected String getFileFormattedLine() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return String.format(\"T|%s|%s\", super.isDone ? \"1\" : \"0\", this.description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 21
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Ui handles tasks related to the user interface of Duke. It deals with user interaction, including getting"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": " * user input and generating replies from Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Scanner input;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Constructs a Ui object. A Scanner reading in from System.in will be instantiated for user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Ui(TaskList tasks) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns the Duke logo and greeting."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return Greeting string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public String showGreeting() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return logo + \"Hi, I\u0027m Duke!\\n\" + \"What can I do for you?\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Gets input typed by the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return User input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": "        System.out.print(\"\u003e \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return this.input.nextLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns the information for each task in the tasks list in the order they were added."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return List of tasks."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public String showTasks() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d tasks.getList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "        sb.append(\"Here are your tasks:\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "            sb.append(\"\u003cNo tasks have been added\u003e\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrl"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "            sb.append(String.format(\"%d.%s%n\", i + 1, list.get(i)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amrl"
        },
        "content": "    "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns farewell message and exit notice."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return Farewell message and exit notice."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public String showFarewell() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return \"Have a nice day!\\n\" + \"Exiting...\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns specified task from given tasks list as marked done."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amrl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param task Task which has been marked as done."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return String showing task as done."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public String showSetAsDone(Task task) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return \"Noted. I have marked this task as done:\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amrl"
        },
        "content": "                + String.format(\"\\t%s%n%n\", task);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns specified task from given tasks list as added to that list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amrl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param task Task which has been added to list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return String showing task as added."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public String showAddTask(Task task) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return \"Alright! The following task has been added:\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amrl"
        },
        "content": "                + String.format(\"\\t%s%n\", task)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amrl"
        },
        "content": "                + String.format(\"You now have %d %s in the list.%n%n\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amrl"
        },
        "content": "                        tasks.getSize(), tasks.getSize() \u003d\u003d 1 ? \"task\" : \"tasks\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns specified task from given tasks list as being deleted from that list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amrl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param task Task which has been deleted from list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return String showing task as deleted."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public String showDeleteTask(Task task) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return \"Noted. I have removed this task:\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amrl"
        },
        "content": "                + String.format(\"\\t%s%n\", task)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amrl"
        },
        "content": "                + String.format(\"You now have %d %s in the list.%n%n\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amrl"
        },
        "content": "                        tasks.getSize(), tasks.getSize() \u003d\u003d 1 ? \"task\" : \"tasks\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns all tasks from specified tasks list as found task matching some search term."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amrl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return String showing tasks matching some search term."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public String showFound(ArrayList\u003cTask\u003e foundTasks) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amrl"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (foundTasks.isEmpty()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amrl"
        },
        "content": "            sb.append(\"No matching tasks found.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amrl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amrl"
        },
        "content": "            sb.append(\"These are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amrl"
        },
        "content": "            for (int i \u003d 0; i \u003c foundTasks.size(); i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amrl"
        },
        "content": "                sb.append(String.format(\"%d.%s%n\", i + 1, foundTasks.get(i)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amrl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amrl"
        },
        "content": "    "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public String showTagTask(Task task) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return \"Added tag to this task:\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amrl"
        },
        "content": "                + String.format(\"\\t%s%n\", task);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 139
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "amrl": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "amrl": 19
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void getCommand_valid_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "            assertEquals(Command.DEADLINE, new Parser(\"deadline word1 word2 /by 2020-01-01\").getCommand());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "        } catch (InvalidInstructionException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void getCommand_unrecognizedCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "            assertEquals(Command.DEADLINE, new Parser(\"qwerty word1 word2 /by 2020-01-01\").getCommand());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "        } catch (InvalidInstructionException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "            assertEquals(\"Command \\\"qwerty\\\" is not recognized\", e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 28
    }
  },
  {
    "path": "src/test/java/duke/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void toString_valid_success() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(\"[T][\\u2718] word1 word2\", new Todo(\"word1 word2\").toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void getFileFormattedLine_valid_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(\"T|0|word1 word2\", new Todo(\"word1 word2\").getFileFormattedLine());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 18
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "Hi, I\u0027m Duke!"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003e \tHere are your tasks:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "\t\u003cNo tasks have been added\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003e \tAlright! The following task has been added:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "\t\t[T][?] borrow book"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "\tYou now have 1 task in the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003e \tHere are your tasks:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "\t1.[T][?] borrow book"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003e \tAlright! The following task has been added:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "\t\t[D][?] return book (by: Sunday)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "\tYou now have 2 tasks in the list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003e \tHere are your tasks:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "\t1.[T][?] borrow book"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "\t2.[D][?] return book (by: Sunday)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003e \tAlright! The following task has been added:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "\t\t[E][?] project meeting (by: Mon 2-4pm)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "\tYou now have 3 tasks in the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003e \tHere are your tasks:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "\t1.[T][?] borrow book"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "\t2.[D][?] return book (by: Sunday)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "\t3.[E][?] project meeting (by: Mon 2-4pm)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003e \tNoted. I have marked this task as done:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "\t\t[D][?] return book (by: Sunday)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003e \tHere are your tasks:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "\t1.[T][?] borrow book"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "\t2.[D][?] return book (by: Sunday)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": "\t3.[E][?] project meeting (by: Mon 2-4pm)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003e \tI\u0027m sorry! I don\u0027t recognize that command. Please try again."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003e \tHere are your tasks:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "\t1.[T][?] borrow book"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": "\t2.[D][?] return book (by: Sunday)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "\t3.[E][?] project meeting (by: Mon 2-4pm)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "\u003e \tHave a nice day!"
      }
    ],
    "authorContributionMap": {
      "amrl": 52
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "wrong wrong wrong"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "amrl": 12
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "amrl": 21
    }
  }
]
