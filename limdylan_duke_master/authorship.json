[
  {
    "path": ".classpath",
    "fileType": "classpath",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003cclasspath\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\u003cclasspathentry kind\u003d\"src\" output\u003d\"bin/main\" path\u003d\"src/main/java\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\t\u003cattributes\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\t\t\u003cattribute name\u003d\"gradle_scope\" value\u003d\"main\"/\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\t\t\u003cattribute name\u003d\"gradle_used_by_scope\" value\u003d\"main,test\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\t\u003c/attributes\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\u003c/classpathentry\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\u003cclasspathentry kind\u003d\"con\" path\u003d\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-12/\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\u003cclasspathentry kind\u003d\"con\" path\u003d\"org.eclipse.buildship.core.gradleclasspathcontainer\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\u003cclasspathentry kind\u003d\"output\" path\u003d\"bin/default\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c/classpath\u003e"
      }
    ],
    "authorContributionMap": {
      "limdylan": 12
    }
  },
  {
    "path": ".gitignore",
    "fileType": "gitignore",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# IDEA files"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/.idea/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/out/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/*.iml"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle build files"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/.gradle/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/build/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "src/main/resources/docs/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# MacOS custom attributes files created by Finder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ".DS_Store"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "*.iml"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "bin/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "# VS Code files"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".vscode"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "# Data files"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/data/"
      }
    ],
    "authorContributionMap": {
      "limdylan": 6,
      "-": 14
    }
  },
  {
    "path": ".project",
    "fileType": "project",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003cprojectDescription\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\u003cname\u003eduke\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\u003ccomment\u003eProject duke created by Buildship.\u003c/comment\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\u003cprojects\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\u003c/projects\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\u003cbuildSpec\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\t\u003cbuildCommand\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\t\t\u003cname\u003eorg.eclipse.jdt.core.javabuilder\u003c/name\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\t\t\u003carguments\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\t\t\u003c/arguments\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\t\u003c/buildCommand\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\t\u003cbuildCommand\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\t\t\u003cname\u003eorg.eclipse.buildship.core.gradleprojectbuilder\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\t\t\u003carguments\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\t\t\u003c/arguments\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\t\u003c/buildCommand\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\u003c/buildSpec\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\u003cnatures\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\t\u003cnature\u003eorg.eclipse.jdt.core.javanature\u003c/nature\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\t\u003cnature\u003eorg.eclipse.buildship.core.gradleprojectnature\u003c/nature\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\t\u003c/natures\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c/projectDescription\u003e"
      }
    ],
    "authorContributionMap": {
      "limdylan": 23
    }
  },
  {
    "path": ".settings/org.eclipse.buildship.core.prefs",
    "fileType": "prefs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "connection.project.dir\u003d"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": "eclipse.preferences.version\u003d1"
      }
    ],
    "authorContributionMap": {
      "limdylan": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    archiveVersion \u003d \"\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 12,
      "-": 21
    }
  },
  {
    "path": "config/checkstyle/checkstyle.xml",
    "fileType": "xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE module PUBLIC"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "        \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \"https://checkstyle.org/dtds/configuration_1_3.dtd\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    Checkstyle configuration that checks the Google coding conventions from Google Java Style"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    that can be found at https://google.github.io/styleguide/javaguide.html"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    Checkstyle is very configurable. Be sure to read the documentation at"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    http://checkstyle.sf.net (or in your downloaded distribution)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    To completely disable a check, just comment it out or delete it from the file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    Authors: Max Vetrenko, Ruslan Diachenko, Roman Ivanov."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cmodule name \u003d \"Checker\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"charset\" value\u003d\"UTF-8\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"severity\" value\u003d\"error\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"fileExtensions\" value\u003d\"java, properties, xml\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Excludes all \u0027module-info.java\u0027 files              --\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- See https://checkstyle.org/config_filefilters.html --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"BeforeExecutionExclusionFileFilter\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"fileNamePattern\" value\u003d\"module\\-info\\.java$\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for whitespace                               --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- See http://checkstyle.sf.net/config_whitespace.html --\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"FileTabCharacter\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"eachLine\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"TreeWalker\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"OuterTypeFilename\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"IllegalTokenText\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"STRING_LITERAL, CHAR_LITERAL\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                      value\u003d\"\\\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\\\(0(10|11|12|14|15|42|47)|134)\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"message\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                      value\u003d\"Consider using special escape sequence instead of octal value or Unicode escaped value.\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"AvoidEscapedUnicodeCharacters\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEscapesForControlCharacters\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowByTailComment\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowNonPrintableEscapes\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"LineLength\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"ignorePattern\" value\u003d\"^package.*|^import.*|a href|href|http://|https://|ftp://\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"AvoidStarImport\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"OneTopLevelClass\"/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"NoLineWrap\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"EmptyBlock\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"TEXT\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                      value\u003d\"LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"NeedBraces\"/\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"LeftCurly\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"RightCurly\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"id\" value\u003d\"RightCurlySame\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                      value\u003d\"LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    LITERAL_DO\"/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"RightCurly\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"id\" value\u003d\"RightCurlyAlone\"/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"alone\"/\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                      value\u003d\"CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                    INSTANCE_INIT\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"WhitespaceAround\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmessage key\u003d\"ws.notFollowed\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                     value\u003d\"WhitespaceAround: \u0027\u0027{0}\u0027\u0027 is not followed by whitespace. Empty blocks may only be represented as \u0027{}\u0027 when not part of a multi-block statement (4.1.3)\"/\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmessage key\u003d\"ws.notPreceded\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                     value\u003d\"WhitespaceAround: \u0027\u0027{0}\u0027\u0027 is not preceded with whitespace.\"/\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"FallThrough\"/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"UpperEll\"/\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"ModifierOrder\"/\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"EmptyLineSeparator\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowNoEmptyLineBetweenFields\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"id\" value\u003d\"SeparatorWrapDot\"/\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"DOT\"/\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"id\" value\u003d\"SeparatorWrapComma\"/\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA\"/\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"EOL\"/\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- ELLIPSIS is EOL until https://github.com/google/styleguide/issues/258 --\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"id\" value\u003d\"SeparatorWrapEllipsis\"/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"ELLIPSIS\"/\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"EOL\"/\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- ARRAY_DECLARATOR is EOL until https://github.com/google/styleguide/issues/259 --\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"id\" value\u003d\"SeparatorWrapArrayDeclarator\"/\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"ARRAY_DECLARATOR\"/\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"EOL\"/\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"id\" value\u003d\"SeparatorWrapMethodRef\"/\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_REF\"/\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"PackageName\"\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]*)*$\"/\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                     value\u003d\"Package name \u0027\u0027{0}\u0027\u0027 must match pattern \u0027\u0027{1}\u0027\u0027.\"/\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"TypeName\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                     value\u003d\"Type name \u0027\u0027{0}\u0027\u0027 must match pattern \u0027\u0027{1}\u0027\u0027.\"/\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"MemberName\"\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-z0-9][a-zA-Z0-9]*$\"/\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                     value\u003d\"Member name \u0027\u0027{0}\u0027\u0027 must match pattern \u0027\u0027{1}\u0027\u0027.\"/\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"ParameterName\"\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]([a-z0-9][a-zA-Z0-9]*)?$\"/\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                     value\u003d\"Parameter name \u0027\u0027{0}\u0027\u0027 must match pattern \u0027\u0027{1}\u0027\u0027.\"/\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"LambdaParameterName\"\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]([a-z0-9][a-zA-Z0-9]*)?$\"/\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                     value\u003d\"Lambda parameter name \u0027\u0027{0}\u0027\u0027 must match pattern \u0027\u0027{1}\u0027\u0027.\"/\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"CatchParameterName\"\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]([a-z0-9][a-zA-Z0-9]*)?$\"/\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                     value\u003d\"Catch parameter name \u0027\u0027{0}\u0027\u0027 must match pattern \u0027\u0027{1}\u0027\u0027.\"/\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"LocalVariableName\"\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"VARIABLE_DEF\"/\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]([a-z0-9][a-zA-Z0-9]*)?$\"/\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                     value\u003d\"Local variable name \u0027\u0027{0}\u0027\u0027 must match pattern \u0027\u0027{1}\u0027\u0027.\"/\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"ClassTypeParameterName\"\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)\"/\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                     value\u003d\"Class type name \u0027\u0027{0}\u0027\u0027 must match pattern \u0027\u0027{1}\u0027\u0027.\"/\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"MethodTypeParameterName\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)\"/\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                     value\u003d\"Method type name \u0027\u0027{0}\u0027\u0027 must match pattern \u0027\u0027{1}\u0027\u0027.\"/\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"InterfaceTypeParameterName\"\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)\"/\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                     value\u003d\"Interface type name \u0027\u0027{0}\u0027\u0027 must match pattern \u0027\u0027{1}\u0027\u0027.\"/\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"NoFinalizer\"/\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"GenericWhitespace\"\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmessage key\u003d\"ws.followed\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                     value\u003d\"GenericWhitespace \u0027\u0027{0}\u0027\u0027 is followed by whitespace.\"/\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmessage key\u003d\"ws.preceded\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                     value\u003d\"GenericWhitespace \u0027\u0027{0}\u0027\u0027 is preceded with whitespace.\"/\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmessage key\u003d\"ws.illegalFollow\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                     value\u003d\"GenericWhitespace \u0027\u0027{0}\u0027\u0027 should followed by whitespace.\"/\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmessage key\u003d\"ws.notPreceded\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                     value\u003d\"GenericWhitespace \u0027\u0027{0}\u0027\u0027 is not preceded with whitespace.\"/\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"Indentation\"\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"basicOffset\" value\u003d\"4\"/\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"braceAdjustment\" value\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"throwsIndent\" value\u003d\"4\"/\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"lineWrappingIndentation\" value\u003d\"4\"/\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"arrayInitIndent\" value\u003d\"4\"/\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"VariableDeclarationUsageDistance\"/\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"MethodParamPad\"/\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                      value\u003d\"COMMA, SEMI, POST_INC, POST_DEC, DOT, ELLIPSIS, METHOD_REF\"/\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"ParenPad\"/\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"NL\"/\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                      value\u003d\"BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                    LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF \"/\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"AnnotationLocation\"\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"id\" value\u003d\"AnnotationLocationMostCases\"/\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                      value\u003d\"CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF\"/\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"AnnotationLocation\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"id\" value\u003d\"AnnotationLocationVariables\"/\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"VARIABLE_DEF\"/\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowSamelineMultipleAnnotations\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"NonEmptyAtclauseDescription\"/\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        \u003c!-- \u003cmodule name\u003d\"JavadocTagContinuationIndentation\"/\u003e --\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        \u003c!-- \u003cmodule name\u003d\"SummaryJavadoc\"\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"forbiddenSummaryFragments\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                      value\u003d\"^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )\"/\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        \u003c/module\u003e --\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        \u003c!-- \u003cmodule name\u003d\"JavadocParagraph\"/\u003e --\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"AtclauseOrder\"\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tagOrder\" value\u003d\"@param, @return, @throws, @deprecated\"/\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"target\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                      value\u003d\"CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF\"/\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        \u003c!-- \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test\"/\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        \u003c/module\u003e --\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        \u003c!-- \u003cmodule name\u003d\"MissingJavadocMethod\"\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"minLineCount\" value\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test\"/\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        \u003c/module\u003e --\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"MethodName\"\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-z0-9][a-zA-Z0-9_]*$\"/\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "                     value\u003d\"Method name \u0027\u0027{0}\u0027\u0027 must match pattern \u0027\u0027{1}\u0027\u0027.\"/\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        \u003c!-- \u003cmodule name\u003d\"SingleLineJavadoc\"\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"ignoreInlineTags\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        \u003c/module\u003e --\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"EmptyCatchBlock\"\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"exceptionVariableName\" value\u003d\"expected\"/\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"CommentsIndentation\"/\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/module\u003e"
      }
    ],
    "authorContributionMap": {
      "limdylan": 10,
      "-": 247
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeNoCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeNoSuchInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeProgramTerminatedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.utils.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            this.tasks \u003d storage.loadTaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            ui.printLoadSuccess(storage.getFilePath());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            ui.printLoadFail(e, storage.getFilePath());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Ui getUi() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Storage getStorage() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        ui.printWelcome();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                String input \u003d ui.readInput();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                Command command \u003d Command.createCommand(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                command.execute(this);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            } catch (DukeNoSuchInputException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    | DukeProgramTerminatedException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            } catch (DukeNoCommandException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                ui.printException(e);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        ui.printGoodbye();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        ui.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 63,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "// import duke.command.method.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.command.method.ByeCommandMethod;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.command.method.CommandMethod;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.command.method.DeadlineCommandMethod;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.command.method.DeleteCommandMethod;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.command.method.DoneCommandMethod;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.command.method.EventCommandMethod;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.command.method.FindCommandMethod;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.command.method.ListCommandMethod;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.command.method.TodoCommandMethod;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeNoCommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeUnrecognisedCommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private String[] arguments;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private CommandMethod method;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static Command createCommand(String input) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String[] arguments;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (input.contains(\" \")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            String[] inputs \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            name \u003d inputs[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            if (inputs[1].contains(\" \")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                arguments \u003d inputs[1].split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                arguments \u003d new String[] {inputs[1]};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            name \u003d input;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            arguments \u003d new String[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        switch (name) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case \"\": {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new DukeNoCommandException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case TodoCommandMethod.NAME: {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return new Command(name, arguments, new TodoCommandMethod());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case EventCommandMethod.NAME: {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return new Command(name, arguments, new EventCommandMethod());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case DeadlineCommandMethod.NAME: {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return new Command(name, arguments,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    new DeadlineCommandMethod());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case ListCommandMethod.NAME: {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return new Command(name, arguments, new ListCommandMethod());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case DoneCommandMethod.NAME: {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return new Command(name, arguments, new DoneCommandMethod());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case DeleteCommandMethod.NAME: {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return new Command(name, arguments, new DeleteCommandMethod());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case FindCommandMethod.NAME: {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return new Command(name, arguments, new FindCommandMethod());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case ByeCommandMethod.NAME: {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return new Command(name, arguments, new ByeCommandMethod());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        default: {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        throw new DukeUnrecognisedCommandException(name);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private Command(String name, String[] arguments, CommandMethod method) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.method \u003d method;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String getCommandName() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String[] getArgumentList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return arguments;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String getArgumentString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return String.join(\" \", arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void execute(Duke program) throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        method.execute(program, this);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        StringBuilder output \u003d new StringBuilder(getCommandName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (arguments.length \u003e 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            output.append(String.format(\" %s\", getArgumentString()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 104
    }
  },
  {
    "path": "src/main/java/duke/command/method/ByeCommandMethod.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.command.method;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeProgramTerminatedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class ByeCommandMethod implements CommandMethod {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String NAME \u003d \"bye\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void execute(Duke program, Command command)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throws DukeProgramTerminatedException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        throw new DukeProgramTerminatedException();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 14
    }
  },
  {
    "path": "src/main/java/duke/command/method/CommandMethod.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.command.method;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public interface CommandMethod {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    void execute(Duke program, Command command) throws DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 9
    }
  },
  {
    "path": "src/main/java/duke/command/method/DeadlineCommandMethod.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.command.method;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeInvalidNumberOfArgumentsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeNoArgumentsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class DeadlineCommandMethod implements CommandMethod {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String NAME \u003d \"deadline\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void execute(Duke program, Command command) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (command.getArgumentList().length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new DukeNoArgumentsException(DeadlineCommandMethod.NAME);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String[] parts \u003d command.getArgumentString().split(\" /by \", 2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (parts.length !\u003d 2) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new DukeInvalidNumberOfArgumentsException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    DeadlineCommandMethod.NAME,2, parts.length);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String description \u003d parts[0];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            LocalDateTime by \u003d LocalDateTime.parse(parts[1],"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    DeadlineTask.DATE_TIME_INPUT_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            DeadlineTask newTask \u003d new DeadlineTask(description, by);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            String message \u003d program.getTaskList().addTask(newTask);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            program.getUi().print(message);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            Storage storage \u003d program.getStorage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            storage.saveTaskList(program.getTaskList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new DukeInvalidDateTimeException(parts[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 40
    }
  },
  {
    "path": "src/main/java/duke/command/method/DeleteCommandMethod.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.command.method;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeEmptyTaskListException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeInvalidTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeNoArgumentsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.utils.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class DeleteCommandMethod implements CommandMethod {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String NAME \u003d \"delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void execute(Duke program, Command command) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        TaskList tasks \u003d program.getTaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (command.getArgumentList().length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new DukeNoArgumentsException(command.getCommandName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new DukeEmptyTaskListException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String firstArgument \u003d command.getArgumentList()[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(firstArgument) - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            String message \u003d tasks.removeTask(taskIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            program.getUi().print(message);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            Storage storage \u003d program.getStorage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            storage.saveTaskList(program.getTaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new DukeInvalidTaskException(firstArgument);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 34
    }
  },
  {
    "path": "src/main/java/duke/command/method/DoneCommandMethod.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.command.method;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeEmptyTaskListException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeInvalidTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeNoArgumentsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.utils.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class DoneCommandMethod implements CommandMethod {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String NAME \u003d \"done\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void execute(Duke program, Command command) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        TaskList tasks \u003d program.getTaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (command.getArgumentList().length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new DukeNoArgumentsException(command.getCommandName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new DukeEmptyTaskListException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String firstArgument \u003d command.getArgumentList()[0];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(firstArgument) - 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            Task task \u003d tasks.getTask(taskIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            String message \u003d task.markAsCompleted();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            program.getUi().print(message);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            Storage storage \u003d program.getStorage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            storage.saveTaskList(program.getTaskList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new DukeInvalidTaskException(firstArgument);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 36
    }
  },
  {
    "path": "src/main/java/duke/command/method/EventCommandMethod.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.command.method;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeInvalidNumberOfArgumentsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeNoArgumentsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class EventCommandMethod implements CommandMethod {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String NAME \u003d \"event\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void execute(Duke program, Command command) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (command.getArgumentList().length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new DukeNoArgumentsException(EventCommandMethod.NAME);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String[] parts \u003d command.getArgumentString().split(\" /at \", 2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (parts.length !\u003d 2) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new DukeInvalidNumberOfArgumentsException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    EventCommandMethod.NAME, 2, parts.length);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String description \u003d parts[0];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            LocalDateTime at \u003d LocalDateTime.parse(parts[1],"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    EventTask.DATE_TIME_INPUT_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            EventTask newTask \u003d new EventTask(description, at);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            String message \u003d program.getTaskList().addTask(newTask);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            program.getUi().print(message);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            Storage storage \u003d program.getStorage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            storage.saveTaskList(program.getTaskList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new DukeInvalidDateTimeException(parts[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 40
    }
  },
  {
    "path": "src/main/java/duke/command/method/FindCommandMethod.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.command.method;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeEmptyTaskListException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeNoArgumentsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.utils.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class FindCommandMethod implements CommandMethod {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String NAME \u003d \"find\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void execute(Duke program, Command command) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        TaskList tasks \u003d program.getTaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (command.getArgumentList().length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new DukeNoArgumentsException(command.getCommandName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new DukeEmptyTaskListException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String query \u003d command.getArgumentString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        TaskList results \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        ListIterator\u003cTask\u003e iterator \u003d tasks.listIterator();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            Task t \u003d iterator.next();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            if (t.getDescription().contains(query)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                results.addTask(t);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        program.getUi().print(String.format(\"Tasks with \u0027%s\u0027:\", query));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        program.getUi().print(results.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 36
    }
  },
  {
    "path": "src/main/java/duke/command/method/ListCommandMethod.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.command.method;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class ListCommandMethod implements CommandMethod {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String NAME \u003d \"list\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void execute(Duke program, Command command) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        program.getUi().print(\"Tasks so far:\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        program.getUi().print(program.getTaskList().toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 13
    }
  },
  {
    "path": "src/main/java/duke/command/method/TodoCommandMethod.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.command.method;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeNoArgumentsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.task.TodoTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class TodoCommandMethod implements CommandMethod {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String NAME \u003d \"todo\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void execute(Duke program, Command command) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (command.getArgumentList().length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new DukeNoArgumentsException(TodoCommandMethod.NAME);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        TodoTask newTask \u003d new TodoTask(command.getArgumentString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String message \u003d program.getTaskList().addTask(newTask);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        program.getUi().print(message);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        Storage storage \u003d program.getStorage();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        storage.saveTaskList(program.getTaskList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 23
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeCorruptedFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class DukeCorruptedFileException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DukeCorruptedFileException(String filePath) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(String.format(\"File at %s is corrupted\", filePath));"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeEmptyTaskListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class DukeEmptyTaskListException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DukeEmptyTaskListException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(\"Cannot get task from empty task list!\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeFileNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class DukeFileNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DukeFileNotFoundException(FileNotFoundException e) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(e.getMessage());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeInvalidDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class DukeInvalidDateTimeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DukeInvalidDateTimeException(String dateTime) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(String.format("
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                \"\u0027%s\u0027 is not a valid date-time (valid: \u002731/05/2019 2359\u0027)\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                dateTime));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeInvalidNumberOfArgumentsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class DukeInvalidNumberOfArgumentsException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DukeInvalidNumberOfArgumentsException(String command, int expected,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            int received) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(String.format("
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                \"Expected %d arguments for %s; instead received %d\", expected,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                command, received));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeInvalidTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class DukeInvalidTaskException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DukeInvalidTaskException(String taskIndex) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(String.format("
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                \"%s is not a suitable task number!\", taskIndex));"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "limdylan": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeNoArgumentsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class DukeNoArgumentsException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DukeNoArgumentsException(String command) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(String.format(\"No arguments received for %s\", command));"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "limdylan": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeNoCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class DukeNoCommandException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DukeNoCommandException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(\"No command issued\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeNoSuchInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class DukeNoSuchInputException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DukeNoSuchInputException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(\"No input was found\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeProgramTerminatedException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class DukeProgramTerminatedException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DukeProgramTerminatedException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(\"Program was terminated\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeReadFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class DukeReadFileException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DukeReadFileException(IOException e) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(e.getMessage());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeUnrecognisedCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class DukeUnrecognisedCommandException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DukeUnrecognisedCommandException(String commandName) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(String.format(\"Unrecognised command: %s\", commandName));"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeUnrecognisedTaskTypeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class DukeUnrecognisedTaskTypeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DukeUnrecognisedTaskTypeException(String taskType) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(String.format(\"Unrecognised task: %s\", taskType));"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeWriteFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class DukeWriteFileException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DukeWriteFileException(IOException e) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(e.getMessage());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 10
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeFileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeCorruptedFileException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeReadFileException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeUnrecognisedTaskTypeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeWriteFileException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.task.TodoTask;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.utils.TaskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String DEFAULT_FILE_PATH \u003d \"data/data.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.filePath \u003d Storage.DEFAULT_FILE_PATH;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public TaskList loadTaskList() throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            FileReader fr \u003d new FileReader(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            String line \u003d br.readLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                Task newTask \u003d parseTask(line);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                tasks.addTask(newTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                line \u003d br.readLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new DukeFileNotFoundException(e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new DukeReadFileException(e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                | DukeUnrecognisedTaskTypeException"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                | DateTimeParseException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new DukeCorruptedFileException(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private Task parseTask(String line)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throws DukeUnrecognisedTaskTypeException, DateTimeParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String[] parts \u003d line.split(Pattern.quote(\" \" + Task.DELIMITER + \" \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        char taskTypeIcon \u003d parts[0].charAt(0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        boolean isCompleted \u003d parts[1].charAt(0) \u003d\u003d Task.COMPLETED;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String description \u003d parts[2];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        switch (taskTypeIcon) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case TodoTask.ICON: {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            newTask \u003d new TodoTask(description, isCompleted);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case DeadlineTask.ICON: {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            LocalDateTime by \u003d LocalDateTime.parse(parts[3],"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    DeadlineTask.DATE_TIME_OUTPUT_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            newTask \u003d new DeadlineTask(description, by, isCompleted);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case EventTask.ICON: {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            LocalDateTime at \u003d LocalDateTime.parse(parts[3],"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    EventTask.DATE_TIME_OUTPUT_FORMAT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            newTask \u003d new EventTask(description, at, isCompleted);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        default: {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            String taskTypeString \u003d Character.toString(taskTypeIcon);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new DukeUnrecognisedTaskTypeException(taskTypeString);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void saveTaskList(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                Task task \u003d tasks.getTask(i);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                String line \u003d task.toStringDelimited();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                fw.write(line + \"\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new DukeWriteFileException(e);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 110
    }
  },
  {
    "path": "src/main/java/duke/task/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final char ICON \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_INPUT_FORMAT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_OUTPUT_FORMAT"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            \u003d DateTimeFormatter.ofPattern(\"EE, dd MMM yyyy, HH:mm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private LocalDateTime by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DeadlineTask(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DeadlineTask(String description, LocalDateTime by,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            boolean isCompleted) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public char getTaskIcon() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return DeadlineTask.ICON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String toStringDelimited() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return String.format(\"%c %c %s %c %s\", getTaskIcon(), Task.DELIMITER,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                super.toStringDelimited(), Task.DELIMITER,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                getDateTime().format(DeadlineTask.DATE_TIME_OUTPUT_FORMAT));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return String.format(\"[%c]%s (by: %s)\", getTaskIcon(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                super.toString(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                getDateTime().format(DeadlineTask.DATE_TIME_OUTPUT_FORMAT));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 48
    }
  },
  {
    "path": "src/main/java/duke/task/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final char ICON \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_INPUT_FORMAT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_OUTPUT_FORMAT"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            \u003d DateTimeFormatter.ofPattern(\"EE, dd MMM yyyy, HH:mm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private LocalDateTime at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public EventTask(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public EventTask(String description, LocalDateTime at,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            boolean isCompleted) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public char getTaskIcon() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return EventTask.ICON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String toStringDelimited() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return String.format(\"%c %c %s %c %s\", getTaskIcon(), Task.DELIMITER,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                super.toStringDelimited(), Task.DELIMITER,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                getDateTime().format(DeadlineTask.DATE_TIME_OUTPUT_FORMAT));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return String.format(\"[%c]%s (at: %s)\", getTaskIcon(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                super.toString(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                getDateTime().format(EventTask.DATE_TIME_OUTPUT_FORMAT));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 48
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final char COMPLETED \u003d \u0027X\u0027;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final char PENDING \u003d \u0027 \u0027;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final char DELIMITER \u003d \u0027|\u0027;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    protected boolean isCompleted;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this(description, false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Task(String description, boolean isCompleted) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String markAsCompleted() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (isCompleted) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return String.format(\"\u0027%s\u0027 has already been done\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    getDescription());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            isCompleted \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return String.format(\"Marked \u0027%s\u0027 as done\", getDescription());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public abstract char getTaskIcon();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public char getStatusIcon() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return isCompleted ? Task.COMPLETED : Task.PENDING;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String toStringDelimited() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return String.format(\"%c %c %s\", getStatusIcon(), Task.DELIMITER,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                getDescription());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return String.format(\"[%c] %s\", getStatusIcon(), getDescription());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 49
    }
  },
  {
    "path": "src/main/java/duke/task/TodoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class TodoTask extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final char ICON \u003d \u0027T\u0027;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public TodoTask(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public TodoTask(String description, boolean isCompleted) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public char getTaskIcon() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return TodoTask.ICON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String toStringDelimited() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return String.format(\"%c %c %s\", getTaskIcon(), Task.DELIMITER,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                super.toStringDelimited());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return String.format(\"[%c]%s\", getTaskIcon(), super.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 29
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.exception.DukeNoSuchInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String LOGO \u003d \"\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            + \" ____        _        \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String INDENTATION \u003d \"    \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String WELCOME_MESSAGE \u003d String.format("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            \"Hello from \\n%s\", Ui.LOGO);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String GOODBYE_MESSAGE \u003d \"Goodbye!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String LOAD_SUCCESS_MESSAGE_TEMPLATE"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            \u003d \"Tasks loaded from %s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String LOAD_FAIL_MESSAGE_TEMPLATE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            \u003d \"Cannot load tasks from %s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public boolean hasNextInput() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return sc.hasNext();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String readInput() throws DukeNoSuchInputException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return sc.nextLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new DukeNoSuchInputException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void print(String message) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void printWelcome() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        print(Ui.WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void printException(Exception e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        print(e.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void printLoadSuccess(String filePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        print(String.format(Ui.LOAD_SUCCESS_MESSAGE_TEMPLATE, filePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void printLoadFail(Exception e, String filePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        printException(e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        print(String.format(Ui.LOAD_FAIL_MESSAGE_TEMPLATE, filePath));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void printGoodbye() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        print(Ui.GOODBYE_MESSAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 70
    }
  },
  {
    "path": "src/main/java/duke/utils/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String addTask(Task task) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return String.format(\"Added: \u0027%s\u0027\", task.getDescription());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String removeTask(int index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        Task task \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return String.format(\"Removed: \u0027%s\u0027\", task.getDescription());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public ListIterator\u003cTask\u003e listIterator() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return tasks.listIterator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return \"{  * No tasks *  }\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        StringBuilder output \u003d new StringBuilder(\"{\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        ListIterator\u003cTask\u003e iterator \u003d listIterator();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            int index \u003d iterator.nextIndex();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            Task task \u003d iterator.next();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            output.append(String.format(\"\\n  %d. %s\", (index + 1), task));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        output.append(\"\\n}\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 57
    }
  },
  {
    "path": "text-ui-test/expected",
    "fileType": "expected",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Hello from"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Added: \u0027walk\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Added: \u0027read book\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Added: \u0027eat dinner\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Marked \u0027read book\u0027 as done"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Added: \u0027return home\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Marked \u0027return home\u0027 as done"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Tasks so far:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "1.[T][ ] walk"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "2.[T][X] read book"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "3.[E][ ] eat dinner (at: next week)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "4.[D][X] return home (by: tonight)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Goodbye!"
      }
    ],
    "authorContributionMap": {
      "limdylan": 19
    }
  },
  {
    "path": "text-ui-test/input",
    "fileType": "input",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "todo walk"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "event eat dinner /at next week"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "deadline return home /by tonight"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "limdylan": 8
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "REM javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "REM https://github.com/nus-cs2103-AY1920S2/forum/issues/3#issue-551755325"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "dir /s /B ..\\src\\main\\java\\*.java \u003e sources"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin @sources"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    del sources"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "REM run the program, feed commands from input file and redirect the output to the actual"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "java -classpath ..\\bin Duke \u003c input \u003e actual"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "FC expected actual \u003e fc_output || cat fc_output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "REM cleanup"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "del sources"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "del actual"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "del fc_output"
      }
    ],
    "authorContributionMap": {
      "limdylan": 27
    }
  }
]
